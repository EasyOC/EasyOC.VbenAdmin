/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';
import { AbpServiceBase } from './abp-service-base';

export class AccountServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    impersonate(body: ImpersonateInput | undefined): Promise<ImpersonateOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/Impersonate";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processImpersonate(_response));
        });
    }

    protected processImpersonate(response: AxiosResponse): Promise<ImpersonateOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = ImpersonateOutput.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ImpersonateOutput>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    isTenantAvailable(body: IsTenantAvailableInput | undefined): Promise<IsTenantAvailableOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/IsTenantAvailable";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processIsTenantAvailable(_response));
        });
    }

    protected processIsTenantAvailable(response: AxiosResponse): Promise<IsTenantAvailableOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = IsTenantAvailableOutput.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<IsTenantAvailableOutput>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    register(body: RegisterInput | undefined): Promise<RegisterOutput> {
        let url_ = this.baseUrl + "/api/services/app/Account/Register";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRegister(_response));
        });
    }

    protected processRegister(response: AxiosResponse): Promise<RegisterOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = RegisterOutput.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RegisterOutput>(<any>null);
    }
}

export class ATPFFCPriceServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @param id (optional) 
    * @return Success
    */
    getAll(id: number | undefined): Promise<ATPFFCPriceDto> {
        let url_ = this.baseUrl + "/api/services/app/ATPFFCPrice/GetAll?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetAll(_response));
        });
    }

    protected processGetAll(response: AxiosResponse): Promise<ATPFFCPriceDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = ATPFFCPriceDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ATPFFCPriceDto>(<any>null);
    }

    /**
    * @return Success
    */
    getAllCurrency(): Promise<Currency[]> {
        let url_ = this.baseUrl + "/api/services/app/ATPFFCPrice/GetAllCurrency";
            url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetAllCurrency(_response));
        });
    }

    protected processGetAllCurrency(response: AxiosResponse): Promise<Currency[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Currency.fromJS(item, _mappings));
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Currency[]>(<any>null);
    }

    /**
    * @return Success
    */
    getAllSelect(): Promise<ATPFFCPriceDto[]> {
        let url_ = this.baseUrl + "/api/services/app/ATPFFCPrice/GetAllSelect";
            url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetAllSelect(_response));
        });
    }

    protected processGetAllSelect(response: AxiosResponse): Promise<ATPFFCPriceDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ATPFFCPriceDto.fromJS(item, _mappings));
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ATPFFCPriceDto[]>(<any>null);
    }
}

export class AuditLogServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @param startDate (optional) 
    * @param endDate (optional) 
    * @param userName (optional) 
    * @param serviceName (optional) 
    * @param methodName (optional) 
    * @param browserInfo (optional) 
    * @param hasException (optional) 
    * @param minExecutionDuration (optional) 
    * @param maxExecutionDuration (optional) 
    * @param sorting (optional) 
    * @param maxResultCount (optional) 
    * @param skipCount (optional) 
    * @return Success
    */
    getAuditLogs(startDate: Date | undefined, endDate: Date | undefined, userName: string | null | undefined, serviceName: string | null | undefined, methodName: string | null | undefined, browserInfo: string | null | undefined, hasException: boolean | null | undefined, minExecutionDuration: number | null | undefined, maxExecutionDuration: number | null | undefined, sorting: string | null | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Promise<PagedResultDtoOfAuditLogListDto> {
        let url_ = this.baseUrl + "/api/services/app/AuditLog/GetAuditLogs?";
        
        
        
        
         if (startDate !== undefined && startDate !== null)
            url_ += "StartDate=" + encodeURIComponent(startDate ? "" +
            startDate.toJSON() : "") + "&";
                
        
        
        
         if (endDate !== undefined && endDate !== null)
            url_ += "EndDate=" + encodeURIComponent(endDate ? "" +
            endDate.toJSON() : "") + "&";
                if (userName !== undefined)
            url_ += "UserName=" + encodeURIComponent("" + userName) + "&";
                if (serviceName !== undefined)
            url_ += "ServiceName=" + encodeURIComponent("" + serviceName) + "&";
                if (methodName !== undefined)
            url_ += "MethodName=" + encodeURIComponent("" + methodName) + "&";
                if (browserInfo !== undefined)
            url_ += "BrowserInfo=" + encodeURIComponent("" + browserInfo) + "&";
                if (hasException !== undefined)
            url_ += "HasException=" + encodeURIComponent("" + hasException) + "&";
                if (minExecutionDuration !== undefined)
            url_ += "MinExecutionDuration=" + encodeURIComponent("" + minExecutionDuration) + "&";
                if (maxExecutionDuration !== undefined)
            url_ += "MaxExecutionDuration=" + encodeURIComponent("" + maxExecutionDuration) + "&";
                if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
                
        
        
        
         if (maxResultCount !== undefined && maxResultCount !== null)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
                
        
        
        
         if (skipCount !== undefined && skipCount !== null)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetAuditLogs(_response));
        });
    }

    protected processGetAuditLogs(response: AxiosResponse): Promise<PagedResultDtoOfAuditLogListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = PagedResultDtoOfAuditLogListDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfAuditLogListDto>(<any>null);
    }

    /**
    * @param startDate (optional) 
    * @param endDate (optional) 
    * @param userName (optional) 
    * @param serviceName (optional) 
    * @param methodName (optional) 
    * @param browserInfo (optional) 
    * @param hasException (optional) 
    * @param minExecutionDuration (optional) 
    * @param maxExecutionDuration (optional) 
    * @param sorting (optional) 
    * @param maxResultCount (optional) 
    * @param skipCount (optional) 
    * @return Success
    */
    getQuotationPriceAuditLogs(startDate: Date | undefined, endDate: Date | undefined, userName: string | null | undefined, serviceName: string | null | undefined, methodName: string | null | undefined, browserInfo: string | null | undefined, hasException: boolean | null | undefined, minExecutionDuration: number | null | undefined, maxExecutionDuration: number | null | undefined, sorting: string | null | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Promise<PagedResultDtoOfAuditLogListDto> {
        let url_ = this.baseUrl + "/api/services/app/AuditLog/GetQuotationPriceAuditLogs?";
        
        
        
        
         if (startDate !== undefined && startDate !== null)
            url_ += "StartDate=" + encodeURIComponent(startDate ? "" +
            startDate.toJSON() : "") + "&";
                
        
        
        
         if (endDate !== undefined && endDate !== null)
            url_ += "EndDate=" + encodeURIComponent(endDate ? "" +
            endDate.toJSON() : "") + "&";
                if (userName !== undefined)
            url_ += "UserName=" + encodeURIComponent("" + userName) + "&";
                if (serviceName !== undefined)
            url_ += "ServiceName=" + encodeURIComponent("" + serviceName) + "&";
                if (methodName !== undefined)
            url_ += "MethodName=" + encodeURIComponent("" + methodName) + "&";
                if (browserInfo !== undefined)
            url_ += "BrowserInfo=" + encodeURIComponent("" + browserInfo) + "&";
                if (hasException !== undefined)
            url_ += "HasException=" + encodeURIComponent("" + hasException) + "&";
                if (minExecutionDuration !== undefined)
            url_ += "MinExecutionDuration=" + encodeURIComponent("" + minExecutionDuration) + "&";
                if (maxExecutionDuration !== undefined)
            url_ += "MaxExecutionDuration=" + encodeURIComponent("" + maxExecutionDuration) + "&";
                if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
                
        
        
        
         if (maxResultCount !== undefined && maxResultCount !== null)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
                
        
        
        
         if (skipCount !== undefined && skipCount !== null)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetQuotationPriceAuditLogs(_response));
        });
    }

    protected processGetQuotationPriceAuditLogs(response: AxiosResponse): Promise<PagedResultDtoOfAuditLogListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = PagedResultDtoOfAuditLogListDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfAuditLogListDto>(<any>null);
    }

    /**
    * @param startDate (optional) 
    * @param endDate (optional) 
    * @param userName (optional) 
    * @param serviceName (optional) 
    * @param methodName (optional) 
    * @param browserInfo (optional) 
    * @param hasException (optional) 
    * @param minExecutionDuration (optional) 
    * @param maxExecutionDuration (optional) 
    * @param sorting (optional) 
    * @param maxResultCount (optional) 
    * @param skipCount (optional) 
    * @return Success
    */
    getAuditLogsToExcel2(startDate: Date | undefined, endDate: Date | undefined, userName: string | null | undefined, serviceName: string | null | undefined, methodName: string | null | undefined, browserInfo: string | null | undefined, hasException: boolean | null | undefined, minExecutionDuration: number | null | undefined, maxExecutionDuration: number | null | undefined, sorting: string | null | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Promise<AuditLogListDto[]> {
        let url_ = this.baseUrl + "/api/services/app/AuditLog/GetAuditLogsToExcel2?";
        
        
        
        
         if (startDate !== undefined && startDate !== null)
            url_ += "StartDate=" + encodeURIComponent(startDate ? "" +
            startDate.toJSON() : "") + "&";
                
        
        
        
         if (endDate !== undefined && endDate !== null)
            url_ += "EndDate=" + encodeURIComponent(endDate ? "" +
            endDate.toJSON() : "") + "&";
                if (userName !== undefined)
            url_ += "UserName=" + encodeURIComponent("" + userName) + "&";
                if (serviceName !== undefined)
            url_ += "ServiceName=" + encodeURIComponent("" + serviceName) + "&";
                if (methodName !== undefined)
            url_ += "MethodName=" + encodeURIComponent("" + methodName) + "&";
                if (browserInfo !== undefined)
            url_ += "BrowserInfo=" + encodeURIComponent("" + browserInfo) + "&";
                if (hasException !== undefined)
            url_ += "HasException=" + encodeURIComponent("" + hasException) + "&";
                if (minExecutionDuration !== undefined)
            url_ += "MinExecutionDuration=" + encodeURIComponent("" + minExecutionDuration) + "&";
                if (maxExecutionDuration !== undefined)
            url_ += "MaxExecutionDuration=" + encodeURIComponent("" + maxExecutionDuration) + "&";
                if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
                
        
        
        
         if (maxResultCount !== undefined && maxResultCount !== null)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
                
        
        
        
         if (skipCount !== undefined && skipCount !== null)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetAuditLogsToExcel2(_response));
        });
    }

    protected processGetAuditLogsToExcel2(response: AxiosResponse): Promise<AuditLogListDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AuditLogListDto.fromJS(item, _mappings));
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AuditLogListDto[]>(<any>null);
    }

    /**
    * @param startDate (optional) 
    * @param endDate (optional) 
    * @param userName (optional) 
    * @param serviceName (optional) 
    * @param methodName (optional) 
    * @param browserInfo (optional) 
    * @param hasException (optional) 
    * @param minExecutionDuration (optional) 
    * @param maxExecutionDuration (optional) 
    * @param sorting (optional) 
    * @param maxResultCount (optional) 
    * @param skipCount (optional) 
    * @return Success
    */
    getAuditLogsToExcel(startDate: Date | undefined, endDate: Date | undefined, userName: string | null | undefined, serviceName: string | null | undefined, methodName: string | null | undefined, browserInfo: string | null | undefined, hasException: boolean | null | undefined, minExecutionDuration: number | null | undefined, maxExecutionDuration: number | null | undefined, sorting: string | null | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Promise<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/AuditLog/GetAuditLogsToExcel?";
        
        
        
        
         if (startDate !== undefined && startDate !== null)
            url_ += "StartDate=" + encodeURIComponent(startDate ? "" +
            startDate.toJSON() : "") + "&";
                
        
        
        
         if (endDate !== undefined && endDate !== null)
            url_ += "EndDate=" + encodeURIComponent(endDate ? "" +
            endDate.toJSON() : "") + "&";
                if (userName !== undefined)
            url_ += "UserName=" + encodeURIComponent("" + userName) + "&";
                if (serviceName !== undefined)
            url_ += "ServiceName=" + encodeURIComponent("" + serviceName) + "&";
                if (methodName !== undefined)
            url_ += "MethodName=" + encodeURIComponent("" + methodName) + "&";
                if (browserInfo !== undefined)
            url_ += "BrowserInfo=" + encodeURIComponent("" + browserInfo) + "&";
                if (hasException !== undefined)
            url_ += "HasException=" + encodeURIComponent("" + hasException) + "&";
                if (minExecutionDuration !== undefined)
            url_ += "MinExecutionDuration=" + encodeURIComponent("" + minExecutionDuration) + "&";
                if (maxExecutionDuration !== undefined)
            url_ += "MaxExecutionDuration=" + encodeURIComponent("" + maxExecutionDuration) + "&";
                if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
                
        
        
        
         if (maxResultCount !== undefined && maxResultCount !== null)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
                
        
        
        
         if (skipCount !== undefined && skipCount !== null)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetAuditLogsToExcel(_response));
        });
    }

    protected processGetAuditLogsToExcel(response: AxiosResponse): Promise<FileDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = FileDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileDto>(<any>null);
    }

    /**
    * @return Success
    */
    getEntityHistoryObjectTypes(): Promise<NameValueDto[]> {
        let url_ = this.baseUrl + "/api/services/app/AuditLog/GetEntityHistoryObjectTypes";
            url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetEntityHistoryObjectTypes(_response));
        });
    }

    protected processGetEntityHistoryObjectTypes(response: AxiosResponse): Promise<NameValueDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(NameValueDto.fromJS(item, _mappings));
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<NameValueDto[]>(<any>null);
    }

    /**
    * @param startDate (optional) 
    * @param endDate (optional) 
    * @param userName (optional) 
    * @param entityTypeFullName (optional) 
    * @param sorting (optional) 
    * @param maxResultCount (optional) 
    * @param skipCount (optional) 
    * @return Success
    */
    getEntityChanges(startDate: Date | undefined, endDate: Date | undefined, userName: string | null | undefined, entityTypeFullName: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Promise<PagedResultDtoOfEntityChangeListDto> {
        let url_ = this.baseUrl + "/api/services/app/AuditLog/GetEntityChanges?";
        
        
        
        
         if (startDate !== undefined && startDate !== null)
            url_ += "StartDate=" + encodeURIComponent(startDate ? "" +
            startDate.toJSON() : "") + "&";
                
        
        
        
         if (endDate !== undefined && endDate !== null)
            url_ += "EndDate=" + encodeURIComponent(endDate ? "" +
            endDate.toJSON() : "") + "&";
                if (userName !== undefined)
            url_ += "UserName=" + encodeURIComponent("" + userName) + "&";
                if (entityTypeFullName !== undefined)
            url_ += "EntityTypeFullName=" + encodeURIComponent("" + entityTypeFullName) + "&";
                if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
                
        
        
        
         if (maxResultCount !== undefined && maxResultCount !== null)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
                
        
        
        
         if (skipCount !== undefined && skipCount !== null)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetEntityChanges(_response));
        });
    }

    protected processGetEntityChanges(response: AxiosResponse): Promise<PagedResultDtoOfEntityChangeListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = PagedResultDtoOfEntityChangeListDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfEntityChangeListDto>(<any>null);
    }

    /**
    * @param entityTypeFullName (optional) 
    * @param entityId (optional) 
    * @param sorting (optional) 
    * @param maxResultCount (optional) 
    * @param skipCount (optional) 
    * @return Success
    */
    getEntityTypeChanges(entityTypeFullName: string | null | undefined, entityId: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Promise<PagedResultDtoOfEntityChangeListDto> {
        let url_ = this.baseUrl + "/api/services/app/AuditLog/GetEntityTypeChanges?";
        if (entityTypeFullName !== undefined)
            url_ += "EntityTypeFullName=" + encodeURIComponent("" + entityTypeFullName) + "&";
                if (entityId !== undefined)
            url_ += "EntityId=" + encodeURIComponent("" + entityId) + "&";
                if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
                
        
        
        
         if (maxResultCount !== undefined && maxResultCount !== null)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
                
        
        
        
         if (skipCount !== undefined && skipCount !== null)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetEntityTypeChanges(_response));
        });
    }

    protected processGetEntityTypeChanges(response: AxiosResponse): Promise<PagedResultDtoOfEntityChangeListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = PagedResultDtoOfEntityChangeListDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfEntityChangeListDto>(<any>null);
    }

    /**
    * @param startDate (optional) 
    * @param endDate (optional) 
    * @param userName (optional) 
    * @param entityTypeFullName (optional) 
    * @param sorting (optional) 
    * @param maxResultCount (optional) 
    * @param skipCount (optional) 
    * @return Success
    */
    getEntityChangesToExcel(startDate: Date | undefined, endDate: Date | undefined, userName: string | null | undefined, entityTypeFullName: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Promise<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/AuditLog/GetEntityChangesToExcel?";
        
        
        
        
         if (startDate !== undefined && startDate !== null)
            url_ += "StartDate=" + encodeURIComponent(startDate ? "" +
            startDate.toJSON() : "") + "&";
                
        
        
        
         if (endDate !== undefined && endDate !== null)
            url_ += "EndDate=" + encodeURIComponent(endDate ? "" +
            endDate.toJSON() : "") + "&";
                if (userName !== undefined)
            url_ += "UserName=" + encodeURIComponent("" + userName) + "&";
                if (entityTypeFullName !== undefined)
            url_ += "EntityTypeFullName=" + encodeURIComponent("" + entityTypeFullName) + "&";
                if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
                
        
        
        
         if (maxResultCount !== undefined && maxResultCount !== null)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
                
        
        
        
         if (skipCount !== undefined && skipCount !== null)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetEntityChangesToExcel(_response));
        });
    }

    protected processGetEntityChangesToExcel(response: AxiosResponse): Promise<FileDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = FileDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileDto>(<any>null);
    }

    /**
    * @param startDate (optional) 
    * @param endDate (optional) 
    * @param userName (optional) 
    * @param entityTypeFullName (optional) 
    * @param sorting (optional) 
    * @param maxResultCount (optional) 
    * @param skipCount (optional) 
    * @return Success
    */
    getEntityChangesToExcel2(startDate: Date | undefined, endDate: Date | undefined, userName: string | null | undefined, entityTypeFullName: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Promise<EntityChangeListDto[]> {
        let url_ = this.baseUrl + "/api/services/app/AuditLog/GetEntityChangesToExcel2?";
        
        
        
        
         if (startDate !== undefined && startDate !== null)
            url_ += "StartDate=" + encodeURIComponent(startDate ? "" +
            startDate.toJSON() : "") + "&";
                
        
        
        
         if (endDate !== undefined && endDate !== null)
            url_ += "EndDate=" + encodeURIComponent(endDate ? "" +
            endDate.toJSON() : "") + "&";
                if (userName !== undefined)
            url_ += "UserName=" + encodeURIComponent("" + userName) + "&";
                if (entityTypeFullName !== undefined)
            url_ += "EntityTypeFullName=" + encodeURIComponent("" + entityTypeFullName) + "&";
                if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
                
        
        
        
         if (maxResultCount !== undefined && maxResultCount !== null)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
                
        
        
        
         if (skipCount !== undefined && skipCount !== null)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetEntityChangesToExcel2(_response));
        });
    }

    protected processGetEntityChangesToExcel2(response: AxiosResponse): Promise<EntityChangeListDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(EntityChangeListDto.fromJS(item, _mappings));
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EntityChangeListDto[]>(<any>null);
    }

    /**
    * @param entityChangeId (optional) 
    * @return Success
    */
    getEntityPropertyChanges(entityChangeId: number | undefined): Promise<EntityPropertyChangeDto[]> {
        let url_ = this.baseUrl + "/api/services/app/AuditLog/GetEntityPropertyChanges?";
        
        
        
        
         if (entityChangeId !== undefined && entityChangeId !== null)
            url_ += "entityChangeId=" + encodeURIComponent("" + entityChangeId) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetEntityPropertyChanges(_response));
        });
    }

    protected processGetEntityPropertyChanges(response: AxiosResponse): Promise<EntityPropertyChangeDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(EntityPropertyChangeDto.fromJS(item, _mappings));
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EntityPropertyChangeDto[]>(<any>null);
    }
}

export class AuditLogListExcelExporterServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    exportToFile(body: AuditLogListDto[] | null | undefined): Promise<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/AuditLogListExcelExporter/ExportToFile";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportToFile(_response));
        });
    }

    protected processExportToFile(response: AxiosResponse): Promise<FileDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = FileDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileDto>(<any>null);
    }
}

export class CommonServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @param functionType (optional) 
    * @param languageId (optional) 
    * @param incloudeEmptyLine (optional) 
    * @return Success
    */
    getDropdownListPost(functionType: string[] | null | undefined, languageId: string | null | undefined, incloudeEmptyLine: boolean | undefined): Promise<DropDownList[]> {
        let url_ = this.baseUrl + "/api/Common/GetDropdownList?";
        if (functionType !== undefined)
            functionType && functionType.forEach(item => { url_ += "functionType=" +
            encodeURIComponent("" + item) + "&"; });
                if (languageId !== undefined)
            url_ += "languageId=" + encodeURIComponent("" + languageId) + "&";
                
        
        
        
         if (incloudeEmptyLine !== undefined && incloudeEmptyLine !== null)
            url_ += "incloudeEmptyLine=" + encodeURIComponent("" + incloudeEmptyLine) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetDropdownListPost(_response));
        });
    }

    protected processGetDropdownListPost(response: AxiosResponse): Promise<DropDownList[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DropDownList.fromJS(item, _mappings));
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DropDownList[]>(<any>null);
    }

    /**
    * @param functionType (optional) 
    * @param languageId (optional) 
    * @param incloudeEmptyLine (optional) 
    * @return Success
    */
    getDropdownListGet(functionType: string | null | undefined, languageId: string | null | undefined, incloudeEmptyLine: boolean | undefined): Promise<DropDownList[]> {
        let url_ = this.baseUrl + "/api/Common/GetDropdownList?";
        if (functionType !== undefined)
            url_ += "functionType=" + encodeURIComponent("" + functionType) + "&";
                if (languageId !== undefined)
            url_ += "languageId=" + encodeURIComponent("" + languageId) + "&";
                
        
        
        
         if (incloudeEmptyLine !== undefined && incloudeEmptyLine !== null)
            url_ += "incloudeEmptyLine=" + encodeURIComponent("" + incloudeEmptyLine) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetDropdownListGet(_response));
        });
    }

    protected processGetDropdownListGet(response: AxiosResponse): Promise<DropDownList[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DropDownList.fromJS(item, _mappings));
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DropDownList[]>(<any>null);
    }

    /**
    * @return Success
    */
    getShapeOptions(): Promise<any[]> {
        let url_ = this.baseUrl + "/api/Common/getShapeOptions";
            url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetShapeOptions(_response));
        });
    }

    protected processGetShapeOptions(response: AxiosResponse): Promise<any[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<any[]>(<any>null);
    }

    /**
    * @param id (optional) 
    * @return Success
    */
    uploadFile(id: number | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Common/UploadFile?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUploadFile(_response));
        });
    }

    protected processUploadFile(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param moduleName (optional) 
    * @param fKName (optional) 
    * @param fkValue (optional) 
    * @return Success
    */
    uploadPlexusFile(moduleName: string | null | undefined, fKName: string | null | undefined, fkValue: string | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Common/UploadPlexusFile?";
        if (moduleName !== undefined)
            url_ += "moduleName=" + encodeURIComponent("" + moduleName) + "&";
                if (fKName !== undefined)
            url_ += "FKName=" + encodeURIComponent("" + fKName) + "&";
                if (fkValue !== undefined)
            url_ += "fkValue=" + encodeURIComponent("" + fkValue) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUploadPlexusFile(_response));
        });
    }

    protected processUploadPlexusFile(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param moduleName (optional) 
    * @param fKName (optional) 
    * @param fkValue (optional) 
    * @return Success
    */
    getPlexusFiles(moduleName: string | null | undefined, fKName: string | null | undefined, fkValue: string | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Common/GetPlexusFiles?";
        if (moduleName !== undefined)
            url_ += "moduleName=" + encodeURIComponent("" + moduleName) + "&";
                if (fKName !== undefined)
            url_ += "FKName=" + encodeURIComponent("" + fKName) + "&";
                if (fkValue !== undefined)
            url_ += "fkValue=" + encodeURIComponent("" + fkValue) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetPlexusFiles(_response));
        });
    }

    protected processGetPlexusFiles(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param moduleName (optional) 
    * @param ids (optional) 
    * @param fKName (optional) 
    * @param fkValue (optional) 
    * @return Success
    */
    deletePlexusFiles(moduleName: string | null | undefined, ids: string | null | undefined, fKName: string | null | undefined, fkValue: string | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Common/DeletePlexusFiles?";
        if (moduleName !== undefined)
            url_ += "moduleName=" + encodeURIComponent("" + moduleName) + "&";
                if (ids !== undefined)
            url_ += "ids=" + encodeURIComponent("" + ids) + "&";
                if (fKName !== undefined)
            url_ += "FKName=" + encodeURIComponent("" + fKName) + "&";
                if (fkValue !== undefined)
            url_ += "fkValue=" + encodeURIComponent("" + fkValue) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeletePlexusFiles(_response));
        });
    }

    protected processDeletePlexusFiles(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    updatePlexusFilesFK(body: PlexusFileData | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Common/UpdatePlexusFilesFK";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpdatePlexusFilesFK(_response));
        });
    }

    protected processUpdatePlexusFilesFK(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param moduleName (optional) 
    * @param id (optional) 
    * @return Success
    */
    downloadPlexusFile(moduleName: string | null | undefined, id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Common/DownloadPlexusFile?";
        if (moduleName !== undefined)
            url_ += "moduleName=" + encodeURIComponent("" + moduleName) + "&";
                
        
        
        
         if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDownloadPlexusFile(_response));
        });
    }

    protected processDownloadPlexusFile(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class ConfigurationServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    changeUiTheme(body: ChangeUiThemeInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Configuration/ChangeUiTheme";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processChangeUiTheme(_response));
        });
    }

    protected processChangeUiTheme(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class CustomerServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @param loadAll (optional) 
    * @return Success
    */
    getLeadsAll(loadAll: boolean | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/Customer/GetLeadsAll?";
        
        
        
        
         if (loadAll !== undefined && loadAll !== null)
            url_ += "loadAll=" + encodeURIComponent("" + loadAll) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetLeadsAll(_response));
        });
    }

    protected processGetLeadsAll(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param custType (optional) 
    * @param showAll (optional) 
    * @return Success
    */
    getCustomerAll(custType: string | null | undefined, showAll: boolean | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/Customer/GetCustomerAll?";
        if (custType !== undefined)
            url_ += "CustType=" + encodeURIComponent("" + custType) + "&";
                
        
        
        
         if (showAll !== undefined && showAll !== null)
            url_ += "showAll=" + encodeURIComponent("" + showAll) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetCustomerAll(_response));
        });
    }

    protected processGetCustomerAll(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    searchCustomer(body: SearchCustomerInput | undefined): Promise<SearcCustResult[]> {
        let url_ = this.baseUrl + "/api/services/app/Customer/SearchCustomer";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSearchCustomer(_response));
        });
    }

    protected processSearchCustomer(response: AxiosResponse): Promise<SearcCustResult[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SearcCustResult.fromJS(item, _mappings));
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SearcCustResult[]>(<any>null);
    }

    /**
    * @param lead_Id (optional) 
    * @return Success
    */
    getLeadsDetails(lead_Id: string | null | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/services/app/Customer/GetLeadsDetails?";
        if (lead_Id !== undefined)
            url_ += "lead_Id=" + encodeURIComponent("" + lead_Id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetLeadsDetails(_response));
        });
    }

    protected processGetLeadsDetails(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param custNum (optional) 
    * @return Success
    */
    getCustomerDetails(custNum: string | null | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/services/app/Customer/GetCustomerDetails?";
        if (custNum !== undefined)
            url_ += "custNum=" + encodeURIComponent("" + custNum) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetCustomerDetails(_response));
        });
    }

    protected processGetCustomerDetails(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param sLead_ID (optional) 
    * @return Success
    */
    getSingleLeads(sLead_ID: string | null | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/services/app/Customer/GetSingleLeads?";
        if (sLead_ID !== undefined)
            url_ += "sLead_ID=" + encodeURIComponent("" + sLead_ID) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetSingleLeads(_response));
        });
    }

    protected processGetSingleLeads(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }
}

export class CustomerSalseMappingServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    getAll(body: QueryCustomerSalesParams | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/CustomerSalseMapping/GetAll";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetAll(_response));
        });
    }

    protected processGetAll(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    update(body: Customer_Salse_Mapping | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/CustomerSalseMapping/Update";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpdate(_response));
        });
    }

    protected processUpdate(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param list (optional) 
    * @return Success
    */
    checkCustomerSalesMapping(list: ImportCustomerSalesMapping[] | null | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/CustomerSalseMapping/CheckCustomerSalesMapping?";
        if (list !== undefined)
        list && list.forEach((item, index) => {
        for (let attr in item)
        if (item.hasOwnProperty(attr)) {
        url_ += "list[" + index + "]." + attr + "=" + encodeURIComponent("" + (<any>item)[attr]) + "&";
            }
            });
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCheckCustomerSalesMapping(_response));
        });
    }

    protected processCheckCustomerSalesMapping(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param list (optional) 
    * @return Success
    */
    bacthUpdateSalesMapping(list: ImportCustomerSalesMapping[] | null | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/CustomerSalseMapping/BacthUpdateSalesMapping?";
        if (list !== undefined)
        list && list.forEach((item, index) => {
        for (let attr in item)
        if (item.hasOwnProperty(attr)) {
        url_ += "list[" + index + "]." + attr + "=" + encodeURIComponent("" + (<any>item)[attr]) + "&";
            }
            });
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBacthUpdateSalesMapping(_response));
        });
    }

    protected processBacthUpdateSalesMapping(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param markFor (optional) 
    * @return Success
    */
    queryCustomerHistorySales(markFor: string | null | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/CustomerSalseMapping/QueryCustomerHistorySales?";
        if (markFor !== undefined)
            url_ += "markFor=" + encodeURIComponent("" + markFor) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryCustomerHistorySales(_response));
        });
    }

    protected processQueryCustomerHistorySales(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    add(body: Customer_Salse_Mapping | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/CustomerSalseMapping/Add";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processAdd(_response));
        });
    }

    protected processAdd(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param keyWords (optional) 
    * @return Success
    */
    getCustomer(keyWords: string | null | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/CustomerSalseMapping/GetCustomer?";
        if (keyWords !== undefined)
            url_ += "keyWords=" + encodeURIComponent("" + keyWords) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetCustomer(_response));
        });
    }

    protected processGetCustomer(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param keywords (optional) 
    * @return Success
    */
    getSales(keywords: string | null | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/CustomerSalseMapping/GetSales?";
        if (keywords !== undefined)
            url_ += "keywords=" + encodeURIComponent("" + keywords) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetSales(_response));
        });
    }

    protected processGetSales(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param id (optional) 
    * @return Success
    */
    delete(id: number | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/CustomerSalseMapping/Delete?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete(_response));
        });
    }

    protected processDelete(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param id (optional) 
    * @param validFrom (optional) 
    * @return Success
    */
    setEnable(id: number | undefined, validFrom: Date | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/CustomerSalseMapping/SetEnable?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
                
        
        
        
         if (validFrom !== undefined && validFrom !== null)
            url_ += "validFrom=" + encodeURIComponent(validFrom ? "" +
            validFrom.toJSON() : "") + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSetEnable(_response));
        });
    }

    protected processSetEnable(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param id (optional) 
    * @return Success
    */
    setDisable(id: number | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/CustomerSalseMapping/SetDisable?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSetDisable(_response));
        });
    }

    protected processSetDisable(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @return Success
    */
    exportCustomerSalesMappingDataPost(): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/CustomerSalseMapping/ExportCustomerSalesMappingData";
            url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportCustomerSalesMappingDataPost(_response));
        });
    }

    protected processExportCustomerSalesMappingDataPost(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param date (optional) 
    * @param keyWord (optional) 
    * @return Success
    */
    exportCustomerSalesMappingDataGet(date: string | null | undefined, keyWord: string | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/CustomerSalseMapping/ExportCustomerSalesMappingData?";
        if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
                if (keyWord !== undefined)
            url_ += "keyWord=" + encodeURIComponent("" + keyWord) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportCustomerSalesMappingDataGet(_response));
        });
    }

    protected processExportCustomerSalesMappingDataGet(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param date (optional) 
    * @param keyWord (optional) 
    * @return Success
    */
    exportCustomerSalesMappingDataTemplate(date: string | null | undefined, keyWord: string | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/CustomerSalseMapping/ExportCustomerSalesMappingDataTemplate?";
        if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
                if (keyWord !== undefined)
            url_ += "keyWord=" + encodeURIComponent("" + keyWord) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportCustomerSalesMappingDataTemplate(_response));
        });
    }

    protected processExportCustomerSalesMappingDataTemplate(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class CustomerScreeningServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @param queryStr (optional) 
    * @param enableStatus (optional) 
    * @param startTime (optional) 
    * @param endTime (optional) 
    * @param keyWord (optional) 
    * @param publiseStatusFilter (optional) 
    * @param pageIndex (optional) 
    * @param pageSize (optional) 
    * @return Success
    */
    getAll(queryStr: string | null | undefined, enableStatus: string | null | undefined, startTime: string | null | undefined, endTime: string | null | undefined, keyWord: string | null | undefined, publiseStatusFilter: number[] | null | undefined, pageIndex: number | undefined, pageSize: number | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/CustomerScreening/GetAll?";
        if (queryStr !== undefined)
            url_ += "QueryStr=" + encodeURIComponent("" + queryStr) + "&";
                if (enableStatus !== undefined)
            url_ += "EnableStatus=" + encodeURIComponent("" + enableStatus) + "&";
                if (startTime !== undefined)
            url_ += "StartTime=" + encodeURIComponent("" + startTime) + "&";
                if (endTime !== undefined)
            url_ += "EndTime=" + encodeURIComponent("" + endTime) + "&";
                if (keyWord !== undefined)
            url_ += "KeyWord=" + encodeURIComponent("" + keyWord) + "&";
                if (publiseStatusFilter !== undefined)
            publiseStatusFilter && publiseStatusFilter.forEach(item => { url_ += "PubliseStatusFilter=" +
            encodeURIComponent("" + item) + "&"; });
                
        
        
        
         if (pageIndex !== undefined && pageIndex !== null)
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&";
                
        
        
        
         if (pageSize !== undefined && pageSize !== null)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetAll(_response));
        });
    }

    protected processGetAll(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param startTime (optional) 
    * @param endTime (optional) 
    * @return Success
    */
    queryNewCustomer(startTime: string | null | undefined, endTime: string | null | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/CustomerScreening/QueryNewCustomer?";
        if (startTime !== undefined)
            url_ += "startTime=" + encodeURIComponent("" + startTime) + "&";
                if (endTime !== undefined)
            url_ += "endTime=" + encodeURIComponent("" + endTime) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryNewCustomer(_response));
        });
    }

    protected processQueryNewCustomer(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param id (optional) 
    * @param customerFalg (optional) 
    * @param custNum (optional) 
    * @param name (optional) 
    * @param salesName (optional) 
    * @param period (optional) 
    * @param salesOffice (optional) 
    * @param verify (optional) 
    * @param changeBy (optional) 
    * @param validFrom (optional) 
    * @param developer (optional) 
    * @param assignedTo (optional) 
    * @param validTo (optional) 
    * @param salesRepNum (optional) 
    * @param salesValidFrom (optional) 
    * @param salesValidTo (optional) 
    * @param enableStatus (optional) 
    * @param isDeleted (optional) 
    * @return Success
    */
    update(id: number | undefined, customerFalg: string | null | undefined, custNum: string | null | undefined, name: string | null | undefined, salesName: string | null | undefined, period: number | undefined, salesOffice: string | null | undefined, verify: string | null | undefined, changeBy: string | null | undefined, validFrom: string | null | undefined, developer: string | null | undefined, assignedTo: string | null | undefined, validTo: string | null | undefined, salesRepNum: string | null | undefined, salesValidFrom: Date | undefined, salesValidTo: Date | undefined, enableStatus: boolean | undefined, isDeleted: boolean | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/CustomerScreening/Update?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
                if (customerFalg !== undefined)
            url_ += "CustomerFalg=" + encodeURIComponent("" + customerFalg) + "&";
                if (custNum !== undefined)
            url_ += "CustNum=" + encodeURIComponent("" + custNum) + "&";
                if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
                if (salesName !== undefined)
            url_ += "SalesName=" + encodeURIComponent("" + salesName) + "&";
                
        
        
        
         if (period !== undefined && period !== null)
            url_ += "Period=" + encodeURIComponent("" + period) + "&";
                if (salesOffice !== undefined)
            url_ += "SalesOffice=" + encodeURIComponent("" + salesOffice) + "&";
                if (verify !== undefined)
            url_ += "Verify=" + encodeURIComponent("" + verify) + "&";
                if (changeBy !== undefined)
            url_ += "ChangeBy=" + encodeURIComponent("" + changeBy) + "&";
                if (validFrom !== undefined)
            url_ += "ValidFrom=" + encodeURIComponent("" + validFrom) + "&";
                if (developer !== undefined)
            url_ += "Developer=" + encodeURIComponent("" + developer) + "&";
                if (assignedTo !== undefined)
            url_ += "AssignedTo=" + encodeURIComponent("" + assignedTo) + "&";
                if (validTo !== undefined)
            url_ += "ValidTo=" + encodeURIComponent("" + validTo) + "&";
                if (salesRepNum !== undefined)
            url_ += "SalesRepNum=" + encodeURIComponent("" + salesRepNum) + "&";
                
        
        
        
         if (salesValidFrom !== undefined && salesValidFrom !== null)
            url_ += "SalesValidFrom=" + encodeURIComponent(salesValidFrom ? "" +
            salesValidFrom.toJSON() : "") + "&";
                
        
        
        
         if (salesValidTo !== undefined && salesValidTo !== null)
            url_ += "SalesValidTo=" + encodeURIComponent(salesValidTo ? "" +
            salesValidTo.toJSON() : "") + "&";
                
        
        
        
         if (enableStatus !== undefined && enableStatus !== null)
            url_ += "EnableStatus=" + encodeURIComponent("" + enableStatus) + "&";
                
        
        
        
         if (isDeleted !== undefined && isDeleted !== null)
            url_ += "IsDeleted=" + encodeURIComponent("" + isDeleted) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpdate(_response));
        });
    }

    protected processUpdate(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    updateEnableStatus(body: UpdateNewCustomerInput | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/CustomerScreening/UpdateEnableStatus";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpdateEnableStatus(_response));
        });
    }

    protected processUpdateEnableStatus(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param customerFalg (optional) 
    * @param custNum (optional) 
    * @return Success
    */
    getSalesHistory(customerFalg: string | null | undefined, custNum: string | null | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/CustomerScreening/GetSalesHistory?";
        if (customerFalg !== undefined)
            url_ += "customerFalg=" + encodeURIComponent("" + customerFalg) + "&";
                if (custNum !== undefined)
            url_ += "custNum=" + encodeURIComponent("" + custNum) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetSalesHistory(_response));
        });
    }

    protected processGetSalesHistory(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param custNum (optional) 
    * @return Success
    */
    getCustomer(custNum: string | null | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/CustomerScreening/GetCustomer?";
        if (custNum !== undefined)
            url_ += "custNum=" + encodeURIComponent("" + custNum) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetCustomer(_response));
        });
    }

    protected processGetCustomer(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param name (optional) 
    * @return Success
    */
    getSales(name: string | null | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/CustomerScreening/GetSales?";
        if (name !== undefined)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetSales(_response));
        });
    }

    protected processGetSales(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param id (optional) 
    * @return Success
    */
    delete(id: number | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/CustomerScreening/Delete?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete(_response));
        });
    }

    protected processDelete(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }
}

export class CustomerUnionMappingServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @param unionFlag (optional) 
    * @param keyWords (optional) 
    * @param remark (optional) 
    * @param condition (optional) 
    * @param pageIndex (optional) 
    * @param pageSize (optional) 
    * @return Success
    */
    getAll(unionFlag: string | null | undefined, keyWords: string | null | undefined, remark: string | null | undefined, condition: string | null | undefined, pageIndex: number | undefined, pageSize: number | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/CustomerUnionMapping/GetAll?";
        if (unionFlag !== undefined)
            url_ += "UnionFlag=" + encodeURIComponent("" + unionFlag) + "&";
                if (keyWords !== undefined)
            url_ += "KeyWords=" + encodeURIComponent("" + keyWords) + "&";
                if (remark !== undefined)
            url_ += "Remark=" + encodeURIComponent("" + remark) + "&";
                if (condition !== undefined)
            url_ += "Condition=" + encodeURIComponent("" + condition) + "&";
                
        
        
        
         if (pageIndex !== undefined && pageIndex !== null)
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&";
                
        
        
        
         if (pageSize !== undefined && pageSize !== null)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetAll(_response));
        });
    }

    protected processGetAll(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param custNum (optional) 
    * @return Success
    */
    getCustomer(custNum: string | null | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/CustomerUnionMapping/GetCustomer?";
        if (custNum !== undefined)
            url_ += "custNum=" + encodeURIComponent("" + custNum) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetCustomer(_response));
        });
    }

    protected processGetCustomer(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param list (optional) 
    * @return Success
    */
    bacthUpdateCustomerUnion(list: CustomerUnionDto[] | null | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/CustomerUnionMapping/BacthUpdateCustomerUnion?";
        if (list !== undefined)
        list && list.forEach((item, index) => {
        for (let attr in item)
        if (item.hasOwnProperty(attr)) {
        url_ += "list[" + index + "]." + attr + "=" + encodeURIComponent("" + (<any>item)[attr]) + "&";
            }
            });
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBacthUpdateCustomerUnion(_response));
        });
    }

    protected processBacthUpdateCustomerUnion(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param list (optional) 
    * @return Success
    */
    batchQueryCustomerUnion(list: CustomerUnionDto[] | null | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/CustomerUnionMapping/BatchQueryCustomerUnion?";
        if (list !== undefined)
        list && list.forEach((item, index) => {
        for (let attr in item)
        if (item.hasOwnProperty(attr)) {
        url_ += "list[" + index + "]." + attr + "=" + encodeURIComponent("" + (<any>item)[attr]) + "&";
            }
            });
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBatchQueryCustomerUnion(_response));
        });
    }

    protected processBatchQueryCustomerUnion(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    add(body: CustomerMasterData_UnionMapping | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/CustomerUnionMapping/Add";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processAdd(_response));
        });
    }

    protected processAdd(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    update(body: CustomerMasterData_UnionMapping | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/CustomerUnionMapping/Update";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpdate(_response));
        });
    }

    protected processUpdate(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param id (optional) 
    * @return Success
    */
    delete(id: number | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/CustomerUnionMapping/Delete?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete(_response));
        });
    }

    protected processDelete(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }
}

export class CuttingToolsPriceListServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @param sorting (optional) 
    * @param skipCount (optional) 
    * @param maxResultCount (optional) 
    * @return Success
    */
    getAll(sorting: string | null | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Promise<PagedResultDtoOfCuttingToolsPriceLists> {
        let url_ = this.baseUrl + "/api/services/app/CuttingToolsPriceList/GetAll?";
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
                
        
        
        
         if (skipCount !== undefined && skipCount !== null)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
                
        
        
        
         if (maxResultCount !== undefined && maxResultCount !== null)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetAll(_response));
        });
    }

    protected processGetAll(response: AxiosResponse): Promise<PagedResultDtoOfCuttingToolsPriceLists> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = PagedResultDtoOfCuttingToolsPriceLists.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfCuttingToolsPriceLists>(<any>null);
    }
}

export class DashboardTargetServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @param version (optional) 
    * @param isActive (optional) 
    * @param year (optional) 
    * @return Success
    */
    getDashboardTargetAll(version: string | null | undefined, isActive: boolean | null | undefined, year: number | undefined): Promise<DashboardTargetDto[]> {
        let url_ = this.baseUrl + "/api/services/app/DashboardTarget/GetDashboardTargetAll?";
        if (version !== undefined)
            url_ += "Version=" + encodeURIComponent("" + version) + "&";
                if (isActive !== undefined)
            url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&";
                
        
        
        
         if (year !== undefined && year !== null)
            url_ += "Year=" + encodeURIComponent("" + year) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetDashboardTargetAll(_response));
        });
    }

    protected processGetDashboardTargetAll(response: AxiosResponse): Promise<DashboardTargetDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DashboardTargetDto.fromJS(item, _mappings));
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DashboardTargetDto[]>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    createOrEdit(body: CreateOrEditDashboardTargetDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/DashboardTarget/CreateOrEdit";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCreateOrEdit(_response));
        });
    }

    protected processCreateOrEdit(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    bathUpdate(body: CreateOrEditDashboardTargetDto[] | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/DashboardTarget/BathUpdate";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBathUpdate(_response));
        });
    }

    protected processBathUpdate(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param year (optional) 
    * @return Success
    */
    getVersionList(year: number | undefined): Promise<VersionDto> {
        let url_ = this.baseUrl + "/api/services/app/DashboardTarget/GetVersionList?";
        
        
        
        
         if (year !== undefined && year !== null)
            url_ += "year=" + encodeURIComponent("" + year) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetVersionList(_response));
        });
    }

    protected processGetVersionList(response: AxiosResponse): Promise<VersionDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = VersionDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<VersionDto>(<any>null);
    }

    /**
    * @return Success
    */
    getChannelMapping(): Promise<Channel[]> {
        let url_ = this.baseUrl + "/api/services/app/DashboardTarget/GetChannelMapping";
            url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetChannelMapping(_response));
        });
    }

    protected processGetChannelMapping(response: AxiosResponse): Promise<Channel[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Channel.fromJS(item, _mappings));
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Channel[]>(<any>null);
    }
}

export class ExcelDataCollecteSettingsServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    getJoinedList(body: ExcelToolQueryParams | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/ExcelDataCollecteSettings/GetJoinedList";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetJoinedList(_response));
        });
    }

    protected processGetJoinedList(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    getList(body: ExcelToolQueryParams | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/ExcelDataCollecteSettings/GetList";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetList(_response));
        });
    }

    protected processGetList(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param id (optional) 
    * @param pagePath (optional) 
    * @return Success
    */
    publishExcel(id: number | undefined, pagePath: string | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/ExcelDataCollecteSettings/PublishExcel?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
                if (pagePath !== undefined)
            url_ += "pagePath=" + encodeURIComponent("" + pagePath) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPublishExcel(_response));
        });
    }

    protected processPublishExcel(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param id (optional) 
    * @return Success
    */
    getExcelDataCollecteSettings(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/ExcelDataCollecteSettings/GetExcelDataCollecteSettings?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetExcelDataCollecteSettings(_response));
        });
    }

    protected processGetExcelDataCollecteSettings(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    putExcelDataCollecteSettings(body: ExcelDataCollecteSettings | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/ExcelDataCollecteSettings/PutExcelDataCollecteSettings";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPutExcelDataCollecteSettings(_response));
        });
    }

    protected processPutExcelDataCollecteSettings(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    postExcelDataCollecteSettings(body: ExcelDataCollecteSettings | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/ExcelDataCollecteSettings/PostExcelDataCollecteSettings";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPostExcelDataCollecteSettings(_response));
        });
    }

    protected processPostExcelDataCollecteSettings(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param id (optional) 
    * @return Success
    */
    delete(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/ExcelDataCollecteSettings/Delete?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete(_response));
        });
    }

    protected processDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class ExcelDataCollectRecrodsServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @param tplId (optional) 
    * @return Success
    */
    getExcelDataCollectRecrod(tplId: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/ExcelDataCollectRecrods/GetExcelDataCollectRecrod?";
        
        
        
        
         if (tplId !== undefined && tplId !== null)
            url_ += "tplId=" + encodeURIComponent("" + tplId) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetExcelDataCollectRecrod(_response));
        });
    }

    protected processGetExcelDataCollectRecrod(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    createOrUpdateRecrod(body: ExcelDataCollectRecrod | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/ExcelDataCollectRecrods/CreateOrUpdateRecrod";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCreateOrUpdateRecrod(_response));
        });
    }

    protected processCreateOrUpdateRecrod(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param id (optional) 
    * @return Success
    */
    deleteExcelDataCollectRecrod(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/ExcelDataCollectRecrods/DeleteExcelDataCollectRecrod?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeleteExcelDataCollectRecrod(_response));
        });
    }

    protected processDeleteExcelDataCollectRecrod(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param id (optional) 
    * @return Success
    */
    mergeFile(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/ExcelDataCollectRecrods/MergeFile?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMergeFile(_response));
        });
    }

    protected processMergeFile(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param id (optional) 
    * @return Success
    */
    downloadFile(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/ExcelDataCollectRecrods/DownloadFile?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDownloadFile(_response));
        });
    }

    protected processDownloadFile(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class ExportAuditLogsExcelServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @param startDate (optional) 
    * @param endDate (optional) 
    * @param userName (optional) 
    * @param serviceName (optional) 
    * @param methodName (optional) 
    * @param browserInfo (optional) 
    * @param hasException (optional) 
    * @param minExecutionDuration (optional) 
    * @param maxExecutionDuration (optional) 
    * @param sorting (optional) 
    * @param maxResultCount (optional) 
    * @param skipCount (optional) 
    * @return Success
    */
    getAuditLogsToExcel(startDate: Date | undefined, endDate: Date | undefined, userName: string | null | undefined, serviceName: string | null | undefined, methodName: string | null | undefined, browserInfo: string | null | undefined, hasException: boolean | null | undefined, minExecutionDuration: number | null | undefined, maxExecutionDuration: number | null | undefined, sorting: string | null | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/ExportAuditLogsExcel/GetAuditLogsToExcel?";
        
        
        
        
         if (startDate !== undefined && startDate !== null)
            url_ += "StartDate=" + encodeURIComponent(startDate ? "" +
            startDate.toJSON() : "") + "&";
                
        
        
        
         if (endDate !== undefined && endDate !== null)
            url_ += "EndDate=" + encodeURIComponent(endDate ? "" +
            endDate.toJSON() : "") + "&";
                if (userName !== undefined)
            url_ += "UserName=" + encodeURIComponent("" + userName) + "&";
                if (serviceName !== undefined)
            url_ += "ServiceName=" + encodeURIComponent("" + serviceName) + "&";
                if (methodName !== undefined)
            url_ += "MethodName=" + encodeURIComponent("" + methodName) + "&";
                if (browserInfo !== undefined)
            url_ += "BrowserInfo=" + encodeURIComponent("" + browserInfo) + "&";
                if (hasException !== undefined)
            url_ += "HasException=" + encodeURIComponent("" + hasException) + "&";
                if (minExecutionDuration !== undefined)
            url_ += "MinExecutionDuration=" + encodeURIComponent("" + minExecutionDuration) + "&";
                if (maxExecutionDuration !== undefined)
            url_ += "MaxExecutionDuration=" + encodeURIComponent("" + maxExecutionDuration) + "&";
                if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
                
        
        
        
         if (maxResultCount !== undefined && maxResultCount !== null)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
                
        
        
        
         if (skipCount !== undefined && skipCount !== null)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetAuditLogsToExcel(_response));
        });
    }

    protected processGetAuditLogsToExcel(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param startDate (optional) 
    * @param endDate (optional) 
    * @param userName (optional) 
    * @param entityTypeFullName (optional) 
    * @param sorting (optional) 
    * @param maxResultCount (optional) 
    * @param skipCount (optional) 
    * @return Success
    */
    getEntityChangesToExcel(startDate: Date | undefined, endDate: Date | undefined, userName: string | null | undefined, entityTypeFullName: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/ExportAuditLogsExcel/GetEntityChangesToExcel?";
        
        
        
        
         if (startDate !== undefined && startDate !== null)
            url_ += "StartDate=" + encodeURIComponent(startDate ? "" +
            startDate.toJSON() : "") + "&";
                
        
        
        
         if (endDate !== undefined && endDate !== null)
            url_ += "EndDate=" + encodeURIComponent(endDate ? "" +
            endDate.toJSON() : "") + "&";
                if (userName !== undefined)
            url_ += "UserName=" + encodeURIComponent("" + userName) + "&";
                if (entityTypeFullName !== undefined)
            url_ += "EntityTypeFullName=" + encodeURIComponent("" + entityTypeFullName) + "&";
                if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
                
        
        
        
         if (maxResultCount !== undefined && maxResultCount !== null)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
                
        
        
        
         if (skipCount !== undefined && skipCount !== null)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetEntityChangesToExcel(_response));
        });
    }

    protected processGetEntityChangesToExcel(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class LanguageServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @return Success
    */
    getLanguages(): Promise<GetLanguagesOutput> {
        let url_ = this.baseUrl + "/api/services/app/Language/GetLanguages";
            url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetLanguages(_response));
        });
    }

    protected processGetLanguages(response: AxiosResponse): Promise<GetLanguagesOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = GetLanguagesOutput.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetLanguagesOutput>(<any>null);
    }

    /**
    * @param id (optional) 
    * @return Success
    */
    getLanguageForEdit(id: number | null | undefined): Promise<GetLanguageForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/Language/GetLanguageForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetLanguageForEdit(_response));
        });
    }

    protected processGetLanguageForEdit(response: AxiosResponse): Promise<GetLanguageForEditOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = GetLanguageForEditOutput.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetLanguageForEditOutput>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    createOrUpdateLanguage(body: CreateOrUpdateLanguageInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Language/CreateOrUpdateLanguage";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCreateOrUpdateLanguage(_response));
        });
    }

    protected processCreateOrUpdateLanguage(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param id (optional) 
    * @return Success
    */
    deleteLanguage(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Language/DeleteLanguage?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeleteLanguage(_response));
        });
    }

    protected processDeleteLanguage(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    setDefaultLanguage(body: SetDefaultLanguageInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Language/SetDefaultLanguage";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSetDefaultLanguage(_response));
        });
    }

    protected processSetDefaultLanguage(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param maxResultCount (optional) 
    * @param skipCount (optional) 
    * @param sorting (optional) 
    * @param baseLanguageName (optional) 
    * @param targetValueFilter (optional) 
    * @param filterText (optional) 
    * @return Success
    */
    getLanguageTexts(maxResultCount: number | undefined, skipCount: number | undefined, sorting: string | null | undefined, sourceName: string, baseLanguageName: string | null | undefined, targetLanguageName: string, targetValueFilter: string | null | undefined, filterText: string | null | undefined): Promise<PagedResultDtoOfLanguageTextListDto> {
        let url_ = this.baseUrl + "/api/services/app/Language/GetLanguageTexts?";
        
        
        
        
         if (maxResultCount !== undefined && maxResultCount !== null)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
                
        
        
        
         if (skipCount !== undefined && skipCount !== null)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
                if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
                if (sourceName === undefined || sourceName === null)
        throw new Error("The parameter 'sourceName' must be defined and cannot be null.");
        else
            url_ += "SourceName=" + encodeURIComponent("" + sourceName) + "&";
                if (baseLanguageName !== undefined)
            url_ += "BaseLanguageName=" + encodeURIComponent("" + baseLanguageName) + "&";
                if (targetLanguageName === undefined || targetLanguageName === null)
        throw new Error("The parameter 'targetLanguageName' must be defined and cannot be null.");
        else
            url_ += "TargetLanguageName=" + encodeURIComponent("" + targetLanguageName) + "&";
                if (targetValueFilter !== undefined)
            url_ += "TargetValueFilter=" + encodeURIComponent("" + targetValueFilter) + "&";
                if (filterText !== undefined)
            url_ += "FilterText=" + encodeURIComponent("" + filterText) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetLanguageTexts(_response));
        });
    }

    protected processGetLanguageTexts(response: AxiosResponse): Promise<PagedResultDtoOfLanguageTextListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = PagedResultDtoOfLanguageTextListDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfLanguageTextListDto>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    updateLanguageText(body: UpdateLanguageTextInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Language/UpdateLanguageText";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpdateLanguageText(_response));
        });
    }

    protected processUpdateLanguageText(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class OpenOrderServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @param salesOffice (optional) 
    * @param sMR (optional) 
    * @param custClass (optional) 
    * @param customerSize (optional) 
    * @param startTime (optional) 
    * @param endTime (optional) 
    * @param repNum (optional) 
    * @param filter (optional) 
    * @param tableColumn (optional) 
    * @param sorting (optional) 
    * @param skipCount (optional) 
    * @param maxResultCount (optional) 
    * @return Success
    */
    getAll(salesOffice: string | null | undefined, sMR: string | null | undefined, custClass: string | null | undefined, customerSize: string | null | undefined, startTime: Date | null | undefined, endTime: Date | null | undefined, repNum: string[] | null | undefined, filter: string | null | undefined, tableColumn: string | null | undefined, sorting: string | null | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Promise<PagedResultDtoOfTempOpenOrderDto> {
        let url_ = this.baseUrl + "/api/services/app/OpenOrder/GetAll?";
        if (salesOffice !== undefined)
            url_ += "SalesOffice=" + encodeURIComponent("" + salesOffice) + "&";
                if (sMR !== undefined)
            url_ += "SMR=" + encodeURIComponent("" + sMR) + "&";
                if (custClass !== undefined)
            url_ += "CustClass=" + encodeURIComponent("" + custClass) + "&";
                if (customerSize !== undefined)
            url_ += "CustomerSize=" + encodeURIComponent("" + customerSize) + "&";
                if (startTime !== undefined)
            url_ += "StartTime=" + encodeURIComponent(startTime ? "" +
            startTime.toJSON() : "") + "&";
                if (endTime !== undefined)
            url_ += "EndTime=" + encodeURIComponent(endTime ? "" +
            endTime.toJSON() : "") + "&";
                if (repNum !== undefined)
            repNum && repNum.forEach(item => { url_ += "RepNum=" +
            encodeURIComponent("" + item) + "&"; });
                if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
                if (tableColumn !== undefined)
            url_ += "TableColumn=" + encodeURIComponent("" + tableColumn) + "&";
                if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
                
        
        
        
         if (skipCount !== undefined && skipCount !== null)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
                
        
        
        
         if (maxResultCount !== undefined && maxResultCount !== null)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetAll(_response));
        });
    }

    protected processGetAll(response: AxiosResponse): Promise<PagedResultDtoOfTempOpenOrderDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = PagedResultDtoOfTempOpenOrderDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfTempOpenOrderDto>(<any>null);
    }

    /**
    * @return Success
    */
    getCustClass(): Promise<string[]> {
        let url_ = this.baseUrl + "/api/services/app/OpenOrder/GetCustClass";
            url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetCustClass(_response));
        });
    }

    protected processGetCustClass(response: AxiosResponse): Promise<string[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string[]>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    exportExcel(body: TempOpenOrderInputDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/OpenOrder/ExportExcel";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportExcel(_response));
        });
    }

    protected processExportExcel(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    exportOpenOrders(body: TempOpenOrderInputDto | undefined): Promise<MemoryStream> {
        let url_ = this.baseUrl + "/api/services/app/OpenOrder/ExportOpenOrders";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportOpenOrders(_response));
        });
    }

    protected processExportOpenOrders(response: AxiosResponse): Promise<MemoryStream> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = MemoryStream.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MemoryStream>(<any>null);
    }

    /**
    * @param sGID (optional) 
    * @return Success
    */
    getRepNumList(sGID: string | null | undefined): Promise<string[]> {
        let url_ = this.baseUrl + "/api/services/app/OpenOrder/GetRepNumList?";
        if (sGID !== undefined)
            url_ += "SGID=" + encodeURIComponent("" + sGID) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetRepNumList(_response));
        });
    }

    protected processGetRepNumList(response: AxiosResponse): Promise<string[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string[]>(<any>null);
    }

    /**
    * @param sGIDList (optional) 
    * @return Success
    */
    getInputRepNumMappingCustNum(sGIDList: string[] | null | undefined): Promise<string[]> {
        let url_ = this.baseUrl + "/api/services/app/OpenOrder/GetInputRepNumMappingCustNum?";
        if (sGIDList !== undefined)
            sGIDList && sGIDList.forEach(item => { url_ += "SGIDList=" +
            encodeURIComponent("" + item) + "&"; });
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetInputRepNumMappingCustNum(_response));
        });
    }

    protected processGetInputRepNumMappingCustNum(response: AxiosResponse): Promise<string[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string[]>(<any>null);
    }

    /**
    * @param sGID (optional) 
    * @return Success
    */
    getUserSubReps(sGID: string | null | undefined): Promise<RepNumName[]> {
        let url_ = this.baseUrl + "/api/services/app/OpenOrder/GetUserSubReps?";
        if (sGID !== undefined)
            url_ += "SGID=" + encodeURIComponent("" + sGID) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetUserSubReps(_response));
        });
    }

    protected processGetUserSubReps(response: AxiosResponse): Promise<RepNumName[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(RepNumName.fromJS(item, _mappings));
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RepNumName[]>(<any>null);
    }

    /**
    * @param dateTimeMonth (optional) 
    * @return Success
    */
    getCurrentQuarter(dateTimeMonth: Date | null | undefined): Promise<number> {
        let url_ = this.baseUrl + "/api/services/app/OpenOrder/GetCurrentQuarter?";
        if (dateTimeMonth !== undefined)
            url_ += "DateTimeMonth=" + encodeURIComponent(dateTimeMonth ? "" +
            dateTimeMonth.toJSON() : "") + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetCurrentQuarter(_response));
        });
    }

    protected processGetCurrentQuarter(response: AxiosResponse): Promise<number> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = resultData200 !== undefined ? resultData200 : <any>null;
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<number>(<any>null);
    }

    /**
    * @param sGID (optional) 
    * @return Success
    */
    selectCRMSales(sGID: string | null | undefined): Promise<SalesRepMapping[]> {
        let url_ = this.baseUrl + "/api/services/app/OpenOrder/SelectCRMSales?";
        if (sGID !== undefined)
            url_ += "SGID=" + encodeURIComponent("" + sGID) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSelectCRMSales(_response));
        });
    }

    protected processSelectCRMSales(response: AxiosResponse): Promise<SalesRepMapping[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SalesRepMapping.fromJS(item, _mappings));
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SalesRepMapping[]>(<any>null);
    }

    /**
    * @return Success
    */
    getCustomerSize(): Promise<string[]> {
        let url_ = this.baseUrl + "/api/services/app/OpenOrder/GetCustomerSize";
            url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetCustomerSize(_response));
        });
    }

    protected processGetCustomerSize(response: AxiosResponse): Promise<string[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string[]>(<any>null);
    }

    /**
    * @return Success
    */
    getSalesOffice(): Promise<string[]> {
        let url_ = this.baseUrl + "/api/services/app/OpenOrder/GetSalesOffice";
            url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetSalesOffice(_response));
        });
    }

    protected processGetSalesOffice(response: AxiosResponse): Promise<string[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string[]>(<any>null);
    }

    /**
    * @return Success
    */
    getSMR(): Promise<string[]> {
        let url_ = this.baseUrl + "/api/services/app/OpenOrder/GetSMR";
            url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetSMR(_response));
        });
    }

    protected processGetSMR(response: AxiosResponse): Promise<string[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string[]>(<any>null);
    }
}

export class OrdersMonthlyServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @param salesOffice (optional) 
    * @param sMR_Group (optional) 
    * @param custClass (optional) 
    * @param customerSize (optional) 
    * @param startTime (optional) 
    * @param endTime (optional) 
    * @param repNum (optional) 
    * @param filter (optional) 
    * @param tableColumn (optional) 
    * @param sorting (optional) 
    * @param skipCount (optional) 
    * @param maxResultCount (optional) 
    * @return Success
    */
    getAll(salesOffice: string | null | undefined, sMR_Group: string | null | undefined, custClass: string | null | undefined, customerSize: string | null | undefined, startTime: number | null | undefined, endTime: number | null | undefined, repNum: string[] | null | undefined, filter: string | null | undefined, tableColumn: string | null | undefined, sorting: string | null | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Promise<PagedResultDtoOfTempOrdersMonthly> {
        let url_ = this.baseUrl + "/api/services/app/OrdersMonthly/GetAll?";
        if (salesOffice !== undefined)
            url_ += "SalesOffice=" + encodeURIComponent("" + salesOffice) + "&";
                if (sMR_Group !== undefined)
            url_ += "SMR_Group=" + encodeURIComponent("" + sMR_Group) + "&";
                if (custClass !== undefined)
            url_ += "CustClass=" + encodeURIComponent("" + custClass) + "&";
                if (customerSize !== undefined)
            url_ += "CustomerSize=" + encodeURIComponent("" + customerSize) + "&";
                if (startTime !== undefined)
            url_ += "StartTime=" + encodeURIComponent("" + startTime) + "&";
                if (endTime !== undefined)
            url_ += "EndTime=" + encodeURIComponent("" + endTime) + "&";
                if (repNum !== undefined)
            repNum && repNum.forEach(item => { url_ += "RepNum=" +
            encodeURIComponent("" + item) + "&"; });
                if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
                if (tableColumn !== undefined)
            url_ += "TableColumn=" + encodeURIComponent("" + tableColumn) + "&";
                if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
                
        
        
        
         if (skipCount !== undefined && skipCount !== null)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
                
        
        
        
         if (maxResultCount !== undefined && maxResultCount !== null)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetAll(_response));
        });
    }

    protected processGetAll(response: AxiosResponse): Promise<PagedResultDtoOfTempOrdersMonthly> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = PagedResultDtoOfTempOrdersMonthly.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfTempOrdersMonthly>(<any>null);
    }

    /**
    * @return Success
    */
    getCustClass(): Promise<string[]> {
        let url_ = this.baseUrl + "/api/services/app/OrdersMonthly/GetCustClass";
            url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetCustClass(_response));
        });
    }

    protected processGetCustClass(response: AxiosResponse): Promise<string[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string[]>(<any>null);
    }

    /**
    * @return Success
    */
    getSalesOffice(): Promise<string[]> {
        let url_ = this.baseUrl + "/api/services/app/OrdersMonthly/GetSalesOffice";
            url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetSalesOffice(_response));
        });
    }

    protected processGetSalesOffice(response: AxiosResponse): Promise<string[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string[]>(<any>null);
    }

    /**
    * @return Success
    */
    getSMR_Group(): Promise<string[]> {
        let url_ = this.baseUrl + "/api/services/app/OrdersMonthly/GetSMR_Group";
            url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetSMR_Group(_response));
        });
    }

    protected processGetSMR_Group(response: AxiosResponse): Promise<string[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string[]>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    exportExcel(body: TempOrdersMonthlyInputDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/OrdersMonthly/ExportExcel";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportExcel(_response));
        });
    }

    protected processExportExcel(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    exportOrdersMonthly(body: TempOrdersMonthlyInputDto | undefined): Promise<MemoryStream> {
        let url_ = this.baseUrl + "/api/services/app/OrdersMonthly/ExportOrdersMonthly";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportOrdersMonthly(_response));
        });
    }

    protected processExportOrdersMonthly(response: AxiosResponse): Promise<MemoryStream> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = MemoryStream.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MemoryStream>(<any>null);
    }
}

export class OrganizationUnitServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @return Success
    */
    getOrganizationUnits(): Promise<ListResultDtoOfOrganizationUnitDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/GetOrganizationUnits";
            url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetOrganizationUnits(_response));
        });
    }

    protected processGetOrganizationUnits(response: AxiosResponse): Promise<ListResultDtoOfOrganizationUnitDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = ListResultDtoOfOrganizationUnitDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ListResultDtoOfOrganizationUnitDto>(<any>null);
    }

    /**
    * @param id (optional) 
    * @param sorting (optional) 
    * @param maxResultCount (optional) 
    * @param skipCount (optional) 
    * @return Success
    */
    getOrganizationUnitUsers(id: number | undefined, sorting: string | null | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Promise<PagedResultDtoOfOrganizationUnitUserListDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/GetOrganizationUnitUsers?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
                if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
                
        
        
        
         if (maxResultCount !== undefined && maxResultCount !== null)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
                
        
        
        
         if (skipCount !== undefined && skipCount !== null)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetOrganizationUnitUsers(_response));
        });
    }

    protected processGetOrganizationUnitUsers(response: AxiosResponse): Promise<PagedResultDtoOfOrganizationUnitUserListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = PagedResultDtoOfOrganizationUnitUserListDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfOrganizationUnitUserListDto>(<any>null);
    }

    /**
    * @param id (optional) 
    * @param sorting (optional) 
    * @param maxResultCount (optional) 
    * @param skipCount (optional) 
    * @return Success
    */
    getOrganizationUnitRoles(id: number | undefined, sorting: string | null | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Promise<PagedResultDtoOfOrganizationUnitRoleListDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/GetOrganizationUnitRoles?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
                if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
                
        
        
        
         if (maxResultCount !== undefined && maxResultCount !== null)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
                
        
        
        
         if (skipCount !== undefined && skipCount !== null)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetOrganizationUnitRoles(_response));
        });
    }

    protected processGetOrganizationUnitRoles(response: AxiosResponse): Promise<PagedResultDtoOfOrganizationUnitRoleListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = PagedResultDtoOfOrganizationUnitRoleListDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfOrganizationUnitRoleListDto>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    createOrganizationUnit(body: CreateOrganizationUnitInput | undefined): Promise<OrganizationUnitDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/CreateOrganizationUnit";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCreateOrganizationUnit(_response));
        });
    }

    protected processCreateOrganizationUnit(response: AxiosResponse): Promise<OrganizationUnitDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = OrganizationUnitDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<OrganizationUnitDto>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    updateOrganizationUnit(body: UpdateOrganizationUnitInput | undefined): Promise<OrganizationUnitDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/UpdateOrganizationUnit";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpdateOrganizationUnit(_response));
        });
    }

    protected processUpdateOrganizationUnit(response: AxiosResponse): Promise<OrganizationUnitDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = OrganizationUnitDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<OrganizationUnitDto>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    moveOrganizationUnit(body: MoveOrganizationUnitInput | undefined): Promise<OrganizationUnitDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/MoveOrganizationUnit";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMoveOrganizationUnit(_response));
        });
    }

    protected processMoveOrganizationUnit(response: AxiosResponse): Promise<OrganizationUnitDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = OrganizationUnitDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<OrganizationUnitDto>(<any>null);
    }

    /**
    * @param id (optional) 
    * @return Success
    */
    deleteOrganizationUnit(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/DeleteOrganizationUnit?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeleteOrganizationUnit(_response));
        });
    }

    protected processDeleteOrganizationUnit(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param userId (optional) 
    * @param organizationUnitId (optional) 
    * @return Success
    */
    removeUserFromOrganizationUnit(userId: number | undefined, organizationUnitId: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/RemoveUserFromOrganizationUnit?";
        
        
        
        
         if (userId !== undefined && userId !== null)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
                
        
        
        
         if (organizationUnitId !== undefined && organizationUnitId !== null)
            url_ += "OrganizationUnitId=" + encodeURIComponent("" + organizationUnitId) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRemoveUserFromOrganizationUnit(_response));
        });
    }

    protected processRemoveUserFromOrganizationUnit(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param roleId (optional) 
    * @param organizationUnitId (optional) 
    * @return Success
    */
    removeRoleFromOrganizationUnit(roleId: number | undefined, organizationUnitId: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/RemoveRoleFromOrganizationUnit?";
        
        
        
        
         if (roleId !== undefined && roleId !== null)
            url_ += "RoleId=" + encodeURIComponent("" + roleId) + "&";
                
        
        
        
         if (organizationUnitId !== undefined && organizationUnitId !== null)
            url_ += "OrganizationUnitId=" + encodeURIComponent("" + organizationUnitId) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRemoveRoleFromOrganizationUnit(_response));
        });
    }

    protected processRemoveRoleFromOrganizationUnit(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    addUsersToOrganizationUnit(body: UsersToOrganizationUnitInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/AddUsersToOrganizationUnit";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processAddUsersToOrganizationUnit(_response));
        });
    }

    protected processAddUsersToOrganizationUnit(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    addRolesToOrganizationUnit(body: RolesToOrganizationUnitInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/AddRolesToOrganizationUnit";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processAddRolesToOrganizationUnit(_response));
        });
    }

    protected processAddRolesToOrganizationUnit(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    findUsers(body: FindOrganizationUnitUsersInput | undefined): Promise<PagedResultDtoOfNameValueDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/FindUsers";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFindUsers(_response));
        });
    }

    protected processFindUsers(response: AxiosResponse): Promise<PagedResultDtoOfNameValueDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = PagedResultDtoOfNameValueDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfNameValueDto>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    findRoles(body: FindOrganizationUnitRolesInput | undefined): Promise<PagedResultDtoOfNameValueDto> {
        let url_ = this.baseUrl + "/api/services/app/OrganizationUnit/FindRoles";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFindRoles(_response));
        });
    }

    protected processFindRoles(response: AxiosResponse): Promise<PagedResultDtoOfNameValueDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = PagedResultDtoOfNameValueDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfNameValueDto>(<any>null);
    }
}

export class PdfHelperServiceServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @param url (optional) 
    * @param pdfFilePath (optional) 
    * @return Success
    */
    convertUrlToPdf(url: string | null | undefined, pdfFilePath: string | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/PdfHelperService/ConvertUrlToPdf?";
        if (url !== undefined)
            url_ += "url=" + encodeURIComponent("" + url) + "&";
                if (pdfFilePath !== undefined)
            url_ += "pdfFilePath=" + encodeURIComponent("" + pdfFilePath) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processConvertUrlToPdf(_response));
        });
    }

    protected processConvertUrlToPdf(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class PermissionServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @return Success
    */
    getAllPermissions(): Promise<ListResultDtoOfFlatPermissionWithLevelDto> {
        let url_ = this.baseUrl + "/api/services/app/Permission/GetAllPermissions";
            url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetAllPermissions(_response));
        });
    }

    protected processGetAllPermissions(response: AxiosResponse): Promise<ListResultDtoOfFlatPermissionWithLevelDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = ListResultDtoOfFlatPermissionWithLevelDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ListResultDtoOfFlatPermissionWithLevelDto>(<any>null);
    }

    /**
    * @return Success
    */
    getPermissionDescription(name: PermissionEnums): Promise<string> {
        let url_ = this.baseUrl + "/api/services/app/Permission/GetPermissionDescription?";
        if (name === undefined || name === null)
        throw new Error("The parameter 'name' must be defined and cannot be null.");
        else
            url_ += "name=" + encodeURIComponent("" + name) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetPermissionDescription(_response));
        });
    }

    protected processGetPermissionDescription(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = resultData200 !== undefined ? resultData200 : <any>null;
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(<any>null);
    }

    /**
    * @return Success
    */
    getPermissionName(name: PermissionEnums): Promise<string> {
        let url_ = this.baseUrl + "/api/services/app/Permission/GetPermissionName?";
        if (name === undefined || name === null)
        throw new Error("The parameter 'name' must be defined and cannot be null.");
        else
            url_ += "name=" + encodeURIComponent("" + name) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetPermissionName(_response));
        });
    }

    protected processGetPermissionName(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = resultData200 !== undefined ? resultData200 : <any>null;
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(<any>null);
    }
}

export class PlexusAccountServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @return Success
    */
    getUserRights(): Promise<SP_List_SGI_ForPartnerLink_CN_Result[]> {
        let url_ = this.baseUrl + "/api/services/app/PlexusAccount/GetUserRights";
            url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetUserRights(_response));
        });
    }

    protected processGetUserRights(response: AxiosResponse): Promise<SP_List_SGI_ForPartnerLink_CN_Result[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SP_List_SGI_ForPartnerLink_CN_Result.fromJS(item, _mappings));
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SP_List_SGI_ForPartnerLink_CN_Result[]>(<any>null);
    }
}

export class PlexusMaillToolServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @param subject (optional) 
    * @param bodyQuery (optional) 
    * @param to (optional) 
    * @param cc (optional) 
    * @param type (optional) 
    * @param bodyBody (optional) 
    * @return Success
    */
    sendMailBySMTP(subject: string | null | undefined, bodyQuery: string | null | undefined, to: string | null | undefined, cc: string | null | undefined, type: string | null | undefined, bodyBody: Action | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/api/services/app/PlexusMaillTool/SendMailBySMTP?";
        if (subject !== undefined)
            url_ += "subject=" + encodeURIComponent("" + subject) + "&";
                if (bodyQuery !== undefined)
            url_ += "body=" + encodeURIComponent("" + bodyQuery) + "&";
                if (to !== undefined)
            url_ += "to=" + encodeURIComponent("" + to) + "&";
                if (cc !== undefined)
            url_ += "cc=" + encodeURIComponent("" + cc) + "&";
                if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(bodyBody);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSendMailBySMTP(_response));
        });
    }

    protected processSendMailBySMTP(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = resultData200 !== undefined ? resultData200 : <any>null;
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    /**
    * @param templatePath (optional) 
    * @param subject (optional) 
    * @param to (optional) 
    * @param cc (optional) 
    * @param type (optional) 
    * @param body (optional) 
    * @return Success
    */
    sendEmailByTemplate(templatePath: string | null | undefined, subject: string | null | undefined, to: string | null | undefined, cc: string | null | undefined, type: string | null | undefined, body: { [key: string]: string; } | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/PlexusMaillTool/SendEmailByTemplate?";
        if (templatePath !== undefined)
            url_ += "templatePath=" + encodeURIComponent("" + templatePath) + "&";
                if (subject !== undefined)
            url_ += "subject=" + encodeURIComponent("" + subject) + "&";
                if (to !== undefined)
            url_ += "to=" + encodeURIComponent("" + to) + "&";
                if (cc !== undefined)
            url_ += "cc=" + encodeURIComponent("" + cc) + "&";
                if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSendEmailByTemplate(_response));
        });
    }

    protected processSendEmailByTemplate(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class QuotationServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @param quotationId (optional) 
    * @return Success
    */
    uploadQuotationFile(quotationId: number | null | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/Quotation/UploadQuotationFile?";
        if (quotationId !== undefined)
            url_ += "quotationId=" + encodeURIComponent("" + quotationId) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUploadQuotationFile(_response));
        });
    }

    protected processUploadQuotationFile(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param idList (optional) 
    * @param quotationId (optional) 
    * @return Success
    */
    updateQuotationFile(idList: number[] | null | undefined, quotationId: number | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/Quotation/UpdateQuotationFile?";
        if (idList !== undefined)
            idList && idList.forEach(item => { url_ += "idList=" +
            encodeURIComponent("" + item) + "&"; });
                
        
        
        
         if (quotationId !== undefined && quotationId !== null)
            url_ += "quotationId=" + encodeURIComponent("" + quotationId) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpdateQuotationFile(_response));
        });
    }

    protected processUpdateQuotationFile(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param id (optional) 
    * @return Success
    */
    downloadQuotationFile(id: number | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Quotation/DownloadQuotationFile?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDownloadQuotationFile(_response));
        });
    }

    protected processDownloadQuotationFile(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param quotationId (optional) 
    * @return Success
    */
    getQuotationFileList(quotationId: number | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/Quotation/GetQuotationFileList?";
        
        
        
        
         if (quotationId !== undefined && quotationId !== null)
            url_ += "quotationId=" + encodeURIComponent("" + quotationId) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetQuotationFileList(_response));
        });
    }

    protected processGetQuotationFileList(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param id (optional) 
    * @return Success
    */
    quotationFileDelete(id: number | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/Quotation/QuotationFileDelete?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQuotationFileDelete(_response));
        });
    }

    protected processQuotationFileDelete(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    tryGetPrice(body: BAUPCParams | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/Quotation/TryGetPrice";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processTryGetPrice(_response));
        });
    }

    protected processTryGetPrice(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param upc (optional) 
    * @param soa (optional) 
    * @param outerUPCDesc (optional) 
    * @return Success
    */
    seachUpcDesc(upc: string | null | undefined, soa: string | null | undefined, outerUPCDesc: string | null | undefined): Promise<UPCDescribe> {
        let url_ = this.baseUrl + "/api/Quotation/seachUpcDesc?";
        if (upc !== undefined)
            url_ += "upc=" + encodeURIComponent("" + upc) + "&";
                if (soa !== undefined)
            url_ += "soa=" + encodeURIComponent("" + soa) + "&";
                if (outerUPCDesc !== undefined)
            url_ += "outerUPCDesc=" + encodeURIComponent("" + outerUPCDesc) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSeachUpcDesc(_response));
        });
    }

    protected processSeachUpcDesc(response: AxiosResponse): Promise<UPCDescribe> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = UPCDescribe.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UPCDescribe>(<any>null);
    }

    /**
    * @param uPC (optional) 
    * @return Success
    */
    uPCparameter(uPC: string | null | undefined): Promise<BAUPCParams> {
        let url_ = this.baseUrl + "/api/Quotation/UPCparameter?";
        if (uPC !== undefined)
            url_ += "UPC=" + encodeURIComponent("" + uPC) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUPCparameter(_response));
        });
    }

    protected processUPCparameter(response: AxiosResponse): Promise<BAUPCParams> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = BAUPCParams.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BAUPCParams>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    uPCceshi(body: UPCTest[] | null | undefined): Promise<UPCPrice[]> {
        let url_ = this.baseUrl + "/api/Quotation/UPCceshi";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUPCceshi(_response));
        });
    }

    protected processUPCceshi(response: AxiosResponse): Promise<UPCPrice[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UPCPrice.fromJS(item, _mappings));
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UPCPrice[]>(<any>null);
    }

    /**
    * @param soldto (optional) 
    * @param rCB_YNImportedProducts (optional) 
    * @param shape (optional) 
    * @param finalUse (optional) 
    * @param externaldiameter (optional) 
    * @param thickness (optional) 
    * @param aperture (optional) 
    * @param abrasivMaterials (optional) 
    * @param binder (optional) 
    * @param granularity (optional) 
    * @param hardness (optional) 
    * @param organizationNumber (optional) 
    * @param lineSpeed (optional) 
    * @param externalStandard (optional) 
    * @param isFromADW (optional) 
    * @param errmsg (optional) 
    * @return Success
    */
    findCnTy(soldto: string | null | undefined, rCB_YNImportedProducts: string | null | undefined, shape: string | null | undefined, finalUse: string | null | undefined, externaldiameter: number | undefined, thickness: number | undefined, aperture: number | undefined, abrasivMaterials: string | null | undefined, binder: string | null | undefined, granularity: number | undefined, hardness: string | null | undefined, organizationNumber: string | null | undefined, lineSpeed: string | null | undefined, externalStandard: string | null | undefined, isFromADW: boolean | null | undefined, errmsg: string | null | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/Quotation/FindCnTy?";
        if (soldto !== undefined)
            url_ += "soldto=" + encodeURIComponent("" + soldto) + "&";
                if (rCB_YNImportedProducts !== undefined)
            url_ += "rCB_YNImportedProducts=" + encodeURIComponent("" + rCB_YNImportedProducts) + "&";
                if (shape !== undefined)
            url_ += "Shape=" + encodeURIComponent("" + shape) + "&";
                if (finalUse !== undefined)
            url_ += "FinalUse=" + encodeURIComponent("" + finalUse) + "&";
                
        
        
        
         if (externaldiameter !== undefined && externaldiameter !== null)
            url_ += "Externaldiameter=" + encodeURIComponent("" + externaldiameter) + "&";
                
        
        
        
         if (thickness !== undefined && thickness !== null)
            url_ += "Thickness=" + encodeURIComponent("" + thickness) + "&";
                
        
        
        
         if (aperture !== undefined && aperture !== null)
            url_ += "Aperture=" + encodeURIComponent("" + aperture) + "&";
                if (abrasivMaterials !== undefined)
            url_ += "AbrasivMaterials=" + encodeURIComponent("" + abrasivMaterials) + "&";
                if (binder !== undefined)
            url_ += "Binder=" + encodeURIComponent("" + binder) + "&";
                
        
        
        
         if (granularity !== undefined && granularity !== null)
            url_ += "Granularity=" + encodeURIComponent("" + granularity) + "&";
                if (hardness !== undefined)
            url_ += "Hardness=" + encodeURIComponent("" + hardness) + "&";
                if (organizationNumber !== undefined)
            url_ += "OrganizationNumber=" + encodeURIComponent("" + organizationNumber) + "&";
                if (lineSpeed !== undefined)
            url_ += "LineSpeed=" + encodeURIComponent("" + lineSpeed) + "&";
                if (externalStandard !== undefined)
            url_ += "ExternalStandard=" + encodeURIComponent("" + externalStandard) + "&";
                if (isFromADW !== undefined)
            url_ += "IsFromADW=" + encodeURIComponent("" + isFromADW) + "&";
                if (errmsg !== undefined)
            url_ += "errmsg=" + encodeURIComponent("" + errmsg) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processFindCnTy(_response));
        });
    }

    protected processFindCnTy(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param pricingType (optional) 
    * @param subPlatform (optional) 
    * @param uPC (optional) 
    * @return Success
    */
    getThCM(pricingType: string | null | undefined, subPlatform: string | null | undefined, uPC: string | null | undefined): Promise<QuotationThCMPrice> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/GetThCM?";
        if (pricingType !== undefined)
            url_ += "PricingType=" + encodeURIComponent("" + pricingType) + "&";
                if (subPlatform !== undefined)
            url_ += "SubPlatform=" + encodeURIComponent("" + subPlatform) + "&";
                if (uPC !== undefined)
            url_ += "UPC=" + encodeURIComponent("" + uPC) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetThCM(_response));
        });
    }

    protected processGetThCM(response: AxiosResponse): Promise<QuotationThCMPrice> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = QuotationThCMPrice.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QuotationThCMPrice>(<any>null);
    }

    /**
    * @param priceType (optional) 
    * @param subPlatform (optional) 
    * @param uPC (optional) 
    * @return Success
    */
    getFiftyThPrice(priceType: string | null | undefined, subPlatform: string | null | undefined, uPC: string | null | undefined): Promise<QuotationFiftyThPrice> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/GetFiftyThPrice?";
        if (priceType !== undefined)
            url_ += "PriceType=" + encodeURIComponent("" + priceType) + "&";
                if (subPlatform !== undefined)
            url_ += "SubPlatform=" + encodeURIComponent("" + subPlatform) + "&";
                if (uPC !== undefined)
            url_ += "UPC=" + encodeURIComponent("" + uPC) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetFiftyThPrice(_response));
        });
    }

    protected processGetFiftyThPrice(response: AxiosResponse): Promise<QuotationFiftyThPrice> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = QuotationFiftyThPrice.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QuotationFiftyThPrice>(<any>null);
    }

    /**
    * @param quotationOfPricesListId (optional) 
    * @param custNum (optional) 
    * @param createBy (optional) 
    * @param sorting (optional) 
    * @param skipCount (optional) 
    * @param maxResultCount (optional) 
    * @return Success
    */
    getQuotationList(quotationOfPricesListId: number | null | undefined, custNum: string | null | undefined, createBy: string | null | undefined, sorting: string | null | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Promise<PagedResultDtoOfQuotationOfPricesListDto> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/GetQuotationList?";
        if (quotationOfPricesListId !== undefined)
            url_ += "QuotationOfPricesListId=" + encodeURIComponent("" + quotationOfPricesListId) + "&";
                if (custNum !== undefined)
            url_ += "CustNum=" + encodeURIComponent("" + custNum) + "&";
                if (createBy !== undefined)
            url_ += "CreateBy=" + encodeURIComponent("" + createBy) + "&";
                if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
                
        
        
        
         if (skipCount !== undefined && skipCount !== null)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
                
        
        
        
         if (maxResultCount !== undefined && maxResultCount !== null)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetQuotationList(_response));
        });
    }

    protected processGetQuotationList(response: AxiosResponse): Promise<PagedResultDtoOfQuotationOfPricesListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = PagedResultDtoOfQuotationOfPricesListDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfQuotationOfPricesListDto>(<any>null);
    }

    /**
    * @param id (optional) 
    * @param custNum (optional) 
    * @param sOA (optional) 
    * @param uPC (optional) 
    * @param email (optional) 
    * @param sorting (optional) 
    * @param skipCount (optional) 
    * @param maxResultCount (optional) 
    * @return Success
    */
    getSideQuotationDetails(id: number | null | undefined, custNum: string | null | undefined, sOA: string | null | undefined, uPC: string | null | undefined, email: string | null | undefined, sorting: string | null | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Promise<PagedResultDtoOfvw_QuotationDetails> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/GetSideQuotationDetails?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
                if (custNum !== undefined)
            url_ += "CustNum=" + encodeURIComponent("" + custNum) + "&";
                if (sOA !== undefined)
            url_ += "SOA=" + encodeURIComponent("" + sOA) + "&";
                if (uPC !== undefined)
            url_ += "UPC=" + encodeURIComponent("" + uPC) + "&";
                if (email !== undefined)
            url_ += "Email=" + encodeURIComponent("" + email) + "&";
                if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
                
        
        
        
         if (skipCount !== undefined && skipCount !== null)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
                
        
        
        
         if (maxResultCount !== undefined && maxResultCount !== null)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetSideQuotationDetails(_response));
        });
    }

    protected processGetSideQuotationDetails(response: AxiosResponse): Promise<PagedResultDtoOfvw_QuotationDetails> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = PagedResultDtoOfvw_QuotationDetails.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfvw_QuotationDetails>(<any>null);
    }

    /**
    * @return Success
    */
    getCustomerList(): Promise<CustomerDropDownDto[]> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/GetCustomerList";
            url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetCustomerList(_response));
        });
    }

    protected processGetCustomerList(response: AxiosResponse): Promise<CustomerDropDownDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CustomerDropDownDto.fromJS(item, _mappings));
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CustomerDropDownDto[]>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    createOrEditQuotation(body: CreateQuotationInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/CreateOrEditQuotation";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCreateOrEditQuotation(_response));
        });
    }

    protected processCreateOrEditQuotation(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param quotationOfPricesListID (optional) 
    * @return Success
    */
    getQuotationInquiryPriceView(quotationOfPricesListID: number | undefined): Promise<NewQuotationUPCApplication[]> {
        let url_ = this.baseUrl + "/api/services/app/Quotation/GetQuotationInquiryPriceView?";
        
        
        
        
         if (quotationOfPricesListID !== undefined && quotationOfPricesListID !== null)
            url_ += "quotationOfPricesListID=" + encodeURIComponent("" + quotationOfPricesListID) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetQuotationInquiryPriceView(_response));
        });
    }

    protected processGetQuotationInquiryPriceView(response: AxiosResponse): Promise<NewQuotationUPCApplication[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(NewQuotationUPCApplication.fromJS(item, _mappings));
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<NewQuotationUPCApplication[]>(<any>null);
    }
}

export class QuotationApprovalMatrixServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @param filter (optional) 
    * @param subPlatformCode (optional) 
    * @param subPlatformDescription (optional) 
    * @param priceType (optional) 
    * @param validFrom (optional) 
    * @param validTo (optional) 
    * @param sorting (optional) 
    * @param skipCount (optional) 
    * @param maxResultCount (optional) 
    * @return Success
    */
    getAll(filter: string | null | undefined, subPlatformCode: string | null | undefined, subPlatformDescription: string | null | undefined, priceType: string | null | undefined, validFrom: Date | null | undefined, validTo: Date | null | undefined, sorting: string | null | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Promise<PagedResultDtoOfQuotationApprovalMatrixDto> {
        let url_ = this.baseUrl + "/api/services/app/QuotationApprovalMatrix/GetAll?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
                if (subPlatformCode !== undefined)
            url_ += "SubPlatformCode=" + encodeURIComponent("" + subPlatformCode) + "&";
                if (subPlatformDescription !== undefined)
            url_ += "SubPlatformDescription=" + encodeURIComponent("" + subPlatformDescription) + "&";
                if (priceType !== undefined)
            url_ += "PriceType=" + encodeURIComponent("" + priceType) + "&";
                if (validFrom !== undefined)
            url_ += "ValidFrom=" + encodeURIComponent(validFrom ? "" +
            validFrom.toJSON() : "") + "&";
                if (validTo !== undefined)
            url_ += "ValidTo=" + encodeURIComponent(validTo ? "" +
            validTo.toJSON() : "") + "&";
                if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
                
        
        
        
         if (skipCount !== undefined && skipCount !== null)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
                
        
        
        
         if (maxResultCount !== undefined && maxResultCount !== null)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetAll(_response));
        });
    }

    protected processGetAll(response: AxiosResponse): Promise<PagedResultDtoOfQuotationApprovalMatrixDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = PagedResultDtoOfQuotationApprovalMatrixDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfQuotationApprovalMatrixDto>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    createOrEdit(body: CreateOrEditQuotationApprovalMatrixDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationApprovalMatrix/CreateOrEdit";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCreateOrEdit(_response));
        });
    }

    protected processCreateOrEdit(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    create(body: CreateOrEditQuotationApprovalMatrixDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationApprovalMatrix/Create";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCreate(_response));
        });
    }

    protected processCreate(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    update(body: CreateOrEditQuotationApprovalMatrixDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationApprovalMatrix/Update";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpdate(_response));
        });
    }

    protected processUpdate(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param id (optional) 
    * @return Success
    */
    delete(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationApprovalMatrix/Delete?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete(_response));
        });
    }

    protected processDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class QuotationCSMaintainPriceServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @param type (optional) 
    * @param pageSize (optional) 
    * @param pageIndex (optional) 
    * @return Success
    */
    getQuotationDetailsAll(type: string | null | undefined, pageSize: number | undefined, pageIndex: number | undefined): Promise<PagedResultDtoOfvw_QuotationDetails> {
        let url_ = this.baseUrl + "/api/services/app/QuotationCSMaintainPrice/GetQuotationDetailsAll?";
        if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
                
        
        
        
         if (pageSize !== undefined && pageSize !== null)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
                
        
        
        
         if (pageIndex !== undefined && pageIndex !== null)
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetQuotationDetailsAll(_response));
        });
    }

    protected processGetQuotationDetailsAll(response: AxiosResponse): Promise<PagedResultDtoOfvw_QuotationDetails> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = PagedResultDtoOfvw_QuotationDetails.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfvw_QuotationDetails>(<any>null);
    }

    /**
    * @param id (optional) 
    * @param reason (optional) 
    * @return Success
    */
    returnSale(id: number | undefined, reason: string | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationCSMaintainPrice/ReturnSale?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
                if (reason !== undefined)
            url_ += "reason=" + encodeURIComponent("" + reason) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processReturnSale(_response));
        });
    }

    protected processReturnSale(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param cnty (optional) 
    * @param body (optional) 
    * @return Success
    */
    completeSale(cnty: string | null | undefined, body: Vw_QuotationDetails | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationCSMaintainPrice/CompleteSale?";
        if (cnty !== undefined)
            url_ += "cnty=" + encodeURIComponent("" + cnty) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCompleteSale(_response));
        });
    }

    protected processCompleteSale(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param cnty (optional) 
    * @param body (optional) 
    * @return Success
    */
    batchSubmit(cnty: string | null | undefined, body: Vw_QuotationDetails[] | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationCSMaintainPrice/BatchSubmit?";
        if (cnty !== undefined)
            url_ += "cnty=" + encodeURIComponent("" + cnty) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBatchSubmit(_response));
        });
    }

    protected processBatchSubmit(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class QuotationLogsServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    create(body: CreateOrEditBAQuotation_ApplicationLog | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationLogs/Create";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCreate(_response));
        });
    }

    protected processCreate(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    addLogs(body: PESubmitPriceInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationLogs/AddLogs";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processAddLogs(_response));
        });
    }

    protected processAddLogs(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class QuotationMailServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @param str (optional) 
    * @return Success
    */
    getOtherInfo(str: string | null | undefined): Promise<QuotationOtherInfo> {
        let url_ = this.baseUrl + "/api/services/app/QuotationMail/GetOtherInfo?";
        if (str !== undefined)
            url_ += "str=" + encodeURIComponent("" + str) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetOtherInfo(_response));
        });
    }

    protected processGetOtherInfo(response: AxiosResponse): Promise<QuotationOtherInfo> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = QuotationOtherInfo.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QuotationOtherInfo>(<any>null);
    }

    /**
    * @param qId (optional) 
    * @return Success
    */
    sendSalesSubmitMail(qId: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationMail/SendSalesSubmitMail?";
        
        
        
        
         if (qId !== undefined && qId !== null)
            url_ += "qId=" + encodeURIComponent("" + qId) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSendSalesSubmitMail(_response));
        });
    }

    protected processSendSalesSubmitMail(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param id (optional) 
    * @param remark (optional) 
    * @return Success
    */
    pEReturnSalse(id: number | undefined, remark: string | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationMail/PEReturnSalse?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
                if (remark !== undefined)
            url_ += "Remark=" + encodeURIComponent("" + remark) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPEReturnSalse(_response));
        });
    }

    protected processPEReturnSalse(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param id (optional) 
    * @return Success
    */
    pESendPrice(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationMail/PESendPrice?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPESendPrice(_response));
        });
    }

    protected processPESendPrice(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param id (optional) 
    * @return Success
    */
    salseReturnPE(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationMail/SalseReturnPE?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSalseReturnPE(_response));
        });
    }

    protected processSalseReturnPE(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param id (optional) 
    * @return Success
    */
    pEAssignedTo(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationMail/PEAssignedTo?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPEAssignedTo(_response));
        });
    }

    protected processPEAssignedTo(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param id (optional) 
    * @return Success
    */
    priceApproval(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationMail/PriceApproval?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPriceApproval(_response));
        });
    }

    protected processPriceApproval(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param id (optional) 
    * @return Success
    */
    priceApprovalNext(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationMail/PriceApprovalNext?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPriceApprovalNext(_response));
        });
    }

    protected processPriceApprovalNext(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param id (optional) 
    * @return Success
    */
    priceApprovalPassToSales(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationMail/PriceApprovalPassToSales?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPriceApprovalPassToSales(_response));
        });
    }

    protected processPriceApprovalPassToSales(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param id (optional) 
    * @return Success
    */
    priceApprovalReturnToSales(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationMail/PriceApprovalReturnToSales?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPriceApprovalReturnToSales(_response));
        });
    }

    protected processPriceApprovalReturnToSales(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    maintainPrice(body: Vw_QuotationDetails | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationMail/MaintainPrice";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMaintainPrice(_response));
        });
    }

    protected processMaintainPrice(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @return Success
    */
    remindCreatedUPCAnync(): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationMail/RemindCreatedUPCAnync";
            url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRemindCreatedUPCAnync(_response));
        });
    }

    protected processRemindCreatedUPCAnync(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    subPlatFormError(body: SubPlatformErrorInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationMail/SubPlatFormError";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSubPlatFormError(_response));
        });
    }

    protected processSubPlatFormError(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class QuotationParamsServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    create(body: CreateOrEditNewQuotationParams | undefined): Promise<number> {
        let url_ = this.baseUrl + "/api/services/app/QuotationParams/Create";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCreate(_response));
        });
    }

    protected processCreate(response: AxiosResponse): Promise<number> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = resultData200 !== undefined ? resultData200 : <any>null;
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<number>(<any>null);
    }

    /**
    * @param quotationApplicationID (optional) 
    * @return Success
    */
    delete(quotationApplicationID: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationParams/Delete?";
        
        
        
        
         if (quotationApplicationID !== undefined && quotationApplicationID !== null)
            url_ += "quotationApplicationID=" + encodeURIComponent("" + quotationApplicationID) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete(_response));
        });
    }

    protected processDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param quotationApplicationID (optional) 
    * @param priceFrom (optional) 
    * @return Success
    */
    getNewQuotationParams(quotationApplicationID: number | undefined, priceFrom: QuotationPriceFrom | undefined): Promise<NewQuotationParams[]> {
        let url_ = this.baseUrl + "/api/services/app/QuotationParams/GetNewQuotationParams?";
        
        
        
        
         if (quotationApplicationID !== undefined && quotationApplicationID !== null)
            url_ += "QuotationApplicationID=" + encodeURIComponent("" + quotationApplicationID) + "&";
                
        
        
        
         if (priceFrom !== undefined && priceFrom !== null)
            url_ += "PriceFrom=" + encodeURIComponent("" + priceFrom) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetNewQuotationParams(_response));
        });
    }

    protected processGetNewQuotationParams(response: AxiosResponse): Promise<NewQuotationParams[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(NewQuotationParams.fromJS(item, _mappings));
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<NewQuotationParams[]>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    validatePrice(body: CreateOrEditNewQuotationParams[] | null | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/api/services/app/QuotationParams/ValidatePrice";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processValidatePrice(_response));
        });
    }

    protected processValidatePrice(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = resultData200 !== undefined ? resultData200 : <any>null;
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }
}

export class QuotationPEPriceServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @param searchType (optional) 
    * @return Success
    */
    getPEAssignedTo(searchType: string | null | undefined): Promise<SelectDto[]> {
        let url_ = this.baseUrl + "/api/services/app/QuotationPEPrice/GetPEAssignedTo?";
        if (searchType !== undefined)
            url_ += "searchType=" + encodeURIComponent("" + searchType) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetPEAssignedTo(_response));
        });
    }

    protected processGetPEAssignedTo(response: AxiosResponse): Promise<SelectDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SelectDto.fromJS(item, _mappings));
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SelectDto[]>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    savePePrice(body: SavePePriceInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationPEPrice/SavePePrice";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSavePePrice(_response));
        });
    }

    protected processSavePePrice(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class QuotationPriceServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @param filter (optional) 
    * @param cnTy (optional) 
    * @param listPriceType (optional) 
    * @param soldto (optional) 
    * @param markFor (optional) 
    * @param material (optional) 
    * @param sOA (optional) 
    * @param validFrom (optional) 
    * @param validTo (optional) 
    * @param importData (optional) 
    * @param remark (optional) 
    * @param isDelete (optional) 
    * @param sorting (optional) 
    * @param skipCount (optional) 
    * @param maxResultCount (optional) 
    * @return Success
    */
    getAll(filter: string | null | undefined, cnTy: string | null | undefined, listPriceType: string | null | undefined, soldto: string | null | undefined, markFor: string | null | undefined, material: string | null | undefined, sOA: string | null | undefined, validFrom: Date | null | undefined, validTo: Date | null | undefined, importData: Date | null | undefined, remark: string | null | undefined, isDelete: boolean | undefined, sorting: string | null | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Promise<PagedResultDtoOfNewQuotationPriceDto> {
        let url_ = this.baseUrl + "/api/services/app/QuotationPrice/GetAll?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
                if (cnTy !== undefined)
            url_ += "CnTy=" + encodeURIComponent("" + cnTy) + "&";
                if (listPriceType !== undefined)
            url_ += "ListPriceType=" + encodeURIComponent("" + listPriceType) + "&";
                if (soldto !== undefined)
            url_ += "Soldto=" + encodeURIComponent("" + soldto) + "&";
                if (markFor !== undefined)
            url_ += "MarkFor=" + encodeURIComponent("" + markFor) + "&";
                if (material !== undefined)
            url_ += "Material=" + encodeURIComponent("" + material) + "&";
                if (sOA !== undefined)
            url_ += "SOA=" + encodeURIComponent("" + sOA) + "&";
                if (validFrom !== undefined)
            url_ += "ValidFrom=" + encodeURIComponent(validFrom ? "" +
            validFrom.toJSON() : "") + "&";
                if (validTo !== undefined)
            url_ += "ValidTo=" + encodeURIComponent(validTo ? "" +
            validTo.toJSON() : "") + "&";
                if (importData !== undefined)
            url_ += "ImportData=" + encodeURIComponent(importData ? "" +
            importData.toJSON() : "") + "&";
                if (remark !== undefined)
            url_ += "Remark=" + encodeURIComponent("" + remark) + "&";
                
        
        
        
         if (isDelete !== undefined && isDelete !== null)
            url_ += "IsDelete=" + encodeURIComponent("" + isDelete) + "&";
                if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
                
        
        
        
         if (skipCount !== undefined && skipCount !== null)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
                
        
        
        
         if (maxResultCount !== undefined && maxResultCount !== null)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetAll(_response));
        });
    }

    protected processGetAll(response: AxiosResponse): Promise<PagedResultDtoOfNewQuotationPriceDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = PagedResultDtoOfNewQuotationPriceDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfNewQuotationPriceDto>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    createList(body: CreateOrEditNewQuotationPrice[] | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationPrice/CreateList";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCreateList(_response));
        });
    }

    protected processCreateList(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    createOrEdit(body: CreateOrEditNewQuotationPrice | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationPrice/CreateOrEdit";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCreateOrEdit(_response));
        });
    }

    protected processCreateOrEdit(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    create(body: CreateOrEditNewQuotationPrice | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationPrice/Create";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCreate(_response));
        });
    }

    protected processCreate(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    update(body: CreateOrEditNewQuotationPrice | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationPrice/Update";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpdate(_response));
        });
    }

    protected processUpdate(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param id (optional) 
    * @return Success
    */
    delete(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationPrice/Delete?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete(_response));
        });
    }

    protected processDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param uPC (optional) 
    * @param soldTo (optional) 
    * @return Success
    */
    materialOrderRecord(uPC: string | null | undefined, soldTo: string | null | undefined): Promise<MaterialOrderRecordDto[]> {
        let url_ = this.baseUrl + "/api/services/app/QuotationPrice/MaterialOrderRecord?";
        if (uPC !== undefined)
            url_ += "UPC=" + encodeURIComponent("" + uPC) + "&";
                if (soldTo !== undefined)
            url_ += "SoldTo=" + encodeURIComponent("" + soldTo) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processMaterialOrderRecord(_response));
        });
    }

    protected processMaterialOrderRecord(response: AxiosResponse): Promise<MaterialOrderRecordDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MaterialOrderRecordDto.fromJS(item, _mappings));
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MaterialOrderRecordDto[]>(<any>null);
    }

    /**
    * @param upc (optional) 
    * @return Success
    */
    getFFCPrice(upc: string | null | undefined): Promise<MaterialFFC> {
        let url_ = this.baseUrl + "/api/services/app/QuotationPrice/GetFFCPrice?";
        if (upc !== undefined)
            url_ += "upc=" + encodeURIComponent("" + upc) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetFFCPrice(_response));
        });
    }

    protected processGetFFCPrice(response: AxiosResponse): Promise<MaterialFFC> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = MaterialFFC.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MaterialFFC>(<any>null);
    }

    /**
    * @param sOA (optional) 
    * @return Success
    */
    getSubPlatForm(sOA: string | null | undefined): Promise<PricingLogisticsExcel[]> {
        let url_ = this.baseUrl + "/api/services/app/QuotationPrice/GetSubPlatForm?";
        if (sOA !== undefined)
            url_ += "SOA=" + encodeURIComponent("" + sOA) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetSubPlatForm(_response));
        });
    }

    protected processGetSubPlatForm(response: AxiosResponse): Promise<PricingLogisticsExcel[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PricingLogisticsExcel.fromJS(item, _mappings));
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PricingLogisticsExcel[]>(<any>null);
    }

    /**
    * @param upc (optional) 
    * @param sOA (optional) 
    * @return Success
    */
    uPCIsDelete(upc: string | null | undefined, sOA: string | null | undefined): Promise<number> {
        let url_ = this.baseUrl + "/api/services/app/QuotationPrice/UPCIsDelete?";
        if (upc !== undefined)
            url_ += "upc=" + encodeURIComponent("" + upc) + "&";
                if (sOA !== undefined)
            url_ += "SOA=" + encodeURIComponent("" + sOA) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUPCIsDelete(_response));
        });
    }

    protected processUPCIsDelete(response: AxiosResponse): Promise<number> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = resultData200 !== undefined ? resultData200 : <any>null;
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<number>(<any>null);
    }

    /**
    * @param soldto (optional) 
    * @return Success
    */
    querySoldtoGroupPrice(soldto: string | null | undefined): Promise<SoldToGroupPrice> {
        let url_ = this.baseUrl + "/api/services/app/QuotationPrice/QuerySoldtoGroupPrice?";
        if (soldto !== undefined)
            url_ += "soldto=" + encodeURIComponent("" + soldto) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQuerySoldtoGroupPrice(_response));
        });
    }

    protected processQuerySoldtoGroupPrice(response: AxiosResponse): Promise<SoldToGroupPrice> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = SoldToGroupPrice.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SoldToGroupPrice>(<any>null);
    }

    /**
    * @return Success
    */
    getSAResinBond(): Promise<SAResinBondDto> {
        let url_ = this.baseUrl + "/api/services/app/QuotationPrice/GetSAResinBond";
            url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetSAResinBond(_response));
        });
    }

    protected processGetSAResinBond(response: AxiosResponse): Promise<SAResinBondDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = SAResinBondDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SAResinBondDto>(<any>null);
    }

    /**
    * @param bond (optional) 
    * @return Success
    */
    getSAResinSize(bond: string | null | undefined): Promise<SAResinSizeDto> {
        let url_ = this.baseUrl + "/api/services/app/QuotationPrice/GetSAResinSize?";
        if (bond !== undefined)
            url_ += "Bond=" + encodeURIComponent("" + bond) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetSAResinSize(_response));
        });
    }

    protected processGetSAResinSize(response: AxiosResponse): Promise<SAResinSizeDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = SAResinSizeDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SAResinSizeDto>(<any>null);
    }

    /**
    * @param upc (optional) 
    * @param soldTo (optional) 
    * @return Success
    */
    getSAResinBondPrice(upc: string | null | undefined, soldTo: string | null | undefined): Promise<SubPlatform_SAResinBond> {
        let url_ = this.baseUrl + "/api/services/app/QuotationPrice/GetSAResinBondPrice?";
        if (upc !== undefined)
            url_ += "upc=" + encodeURIComponent("" + upc) + "&";
                if (soldTo !== undefined)
            url_ += "SoldTo=" + encodeURIComponent("" + soldTo) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetSAResinBondPrice(_response));
        });
    }

    protected processGetSAResinBondPrice(response: AxiosResponse): Promise<SubPlatform_SAResinBond> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = SubPlatform_SAResinBond.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SubPlatform_SAResinBond>(<any>null);
    }

    /**
    * @param size (optional) 
    * @param bond (optional) 
    * @param soldto (optional) 
    * @return Success
    */
    getNotUPCQueryResinBondPrice(size: string | null | undefined, bond: string | null | undefined, soldto: string | null | undefined): Promise<SubPlatform_SAResinBond> {
        let url_ = this.baseUrl + "/api/services/app/QuotationPrice/GetNotUPCQueryResinBondPrice?";
        if (size !== undefined)
            url_ += "size=" + encodeURIComponent("" + size) + "&";
                if (bond !== undefined)
            url_ += "bond=" + encodeURIComponent("" + bond) + "&";
                if (soldto !== undefined)
            url_ += "soldto=" + encodeURIComponent("" + soldto) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetNotUPCQueryResinBondPrice(_response));
        });
    }

    protected processGetNotUPCQueryResinBondPrice(response: AxiosResponse): Promise<SubPlatform_SAResinBond> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = SubPlatform_SAResinBond.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SubPlatform_SAResinBond>(<any>null);
    }

    /**
    * @param soldto (optional) 
    * @param markfor (optional) 
    * @param upc (optional) 
    * @param soa (optional) 
    * @return Success
    */
    queryPrice(soldto: string | null | undefined, markfor: string | null | undefined, upc: string | null | undefined, soa: string | null | undefined): Promise<PriceInfo> {
        let url_ = this.baseUrl + "/api/services/app/QuotationPrice/QueryPrice?";
        if (soldto !== undefined)
            url_ += "soldto=" + encodeURIComponent("" + soldto) + "&";
                if (markfor !== undefined)
            url_ += "markfor=" + encodeURIComponent("" + markfor) + "&";
                if (upc !== undefined)
            url_ += "upc=" + encodeURIComponent("" + upc) + "&";
                if (soa !== undefined)
            url_ += "soa=" + encodeURIComponent("" + soa) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQueryPrice(_response));
        });
    }

    protected processQueryPrice(response: AxiosResponse): Promise<PriceInfo> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = PriceInfo.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PriceInfo>(<any>null);
    }

    /**
    * @param soldTo (optional) 
    * @param soa (optional) 
    * @param upcPriceGrp (optional) 
    * @return Success
    */
    custDiscontByUPCPriceGrp(soldTo: string | null | undefined, soa: string | null | undefined, upcPriceGrp: string | null | undefined): Promise<number> {
        let url_ = this.baseUrl + "/api/services/app/QuotationPrice/CustDiscontByUPCPriceGrp?";
        if (soldTo !== undefined)
            url_ += "soldTo=" + encodeURIComponent("" + soldTo) + "&";
                if (soa !== undefined)
            url_ += "soa=" + encodeURIComponent("" + soa) + "&";
                if (upcPriceGrp !== undefined)
            url_ += "upcPriceGrp=" + encodeURIComponent("" + upcPriceGrp) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCustDiscontByUPCPriceGrp(_response));
        });
    }

    protected processCustDiscontByUPCPriceGrp(response: AxiosResponse): Promise<number> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = resultData200 !== undefined ? resultData200 : <any>null;
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<number>(<any>null);
    }

    /**
    * @param soldTo (optional) 
    * @param soa (optional) 
    * @param upc (optional) 
    * @return Success
    */
    custDiscontByUPC(soldTo: string | null | undefined, soa: string | null | undefined, upc: string | null | undefined): Promise<number> {
        let url_ = this.baseUrl + "/api/services/app/QuotationPrice/CustDiscontByUPC?";
        if (soldTo !== undefined)
            url_ += "soldTo=" + encodeURIComponent("" + soldTo) + "&";
                if (soa !== undefined)
            url_ += "soa=" + encodeURIComponent("" + soa) + "&";
                if (upc !== undefined)
            url_ += "upc=" + encodeURIComponent("" + upc) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCustDiscontByUPC(_response));
        });
    }

    protected processCustDiscontByUPC(response: AxiosResponse): Promise<number> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = resultData200 !== undefined ? resultData200 : <any>null;
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<number>(<any>null);
    }

    /**
    * @param soa (optional) 
    * @param upc (optional) 
    * @return Success
    */
    getMaterialListType(soa: string | null | undefined, upc: string | null | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/services/app/QuotationPrice/GetMaterialListType?";
        if (soa !== undefined)
            url_ += "soa=" + encodeURIComponent("" + soa) + "&";
                if (upc !== undefined)
            url_ += "upc=" + encodeURIComponent("" + upc) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetMaterialListType(_response));
        });
    }

    protected processGetMaterialListType(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = resultData200 !== undefined ? resultData200 : <any>null;
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(<any>null);
    }
}

export class QuotationPriceGroupServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @param custNum (optional) 
    * @return Success
    */
    getCustomerPriceGroup(custNum: string | null | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/services/app/QuotationPriceGroup/GetCustomerPriceGroup?";
        if (custNum !== undefined)
            url_ += "custNum=" + encodeURIComponent("" + custNum) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetCustomerPriceGroup(_response));
        });
    }

    protected processGetCustomerPriceGroup(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = resultData200 !== undefined ? resultData200 : <any>null;
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(<any>null);
    }

    /**
    * @param newPriceGrout (optional) 
    * @param custNum (optional) 
    * @return Success
    */
    updateCustomerPriceGroup(newPriceGrout: string | null | undefined, custNum: string | null | undefined): Promise<number> {
        let url_ = this.baseUrl + "/api/services/app/QuotationPriceGroup/UpdateCustomerPriceGroup?";
        if (newPriceGrout !== undefined)
            url_ += "newPriceGrout=" + encodeURIComponent("" + newPriceGrout) + "&";
                if (custNum !== undefined)
            url_ += "custNum=" + encodeURIComponent("" + custNum) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "PUT",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpdateCustomerPriceGroup(_response));
        });
    }

    protected processUpdateCustomerPriceGroup(response: AxiosResponse): Promise<number> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = resultData200 !== undefined ? resultData200 : <any>null;
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<number>(<any>null);
    }

    /**
    * @param upc (optional) 
    * @return Success
    */
    getMaterialPricingGrp(upc: string | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationPriceGroup/GetMaterialPricingGrp?";
        if (upc !== undefined)
            url_ += "upc=" + encodeURIComponent("" + upc) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetMaterialPricingGrp(_response));
        });
    }

    protected processGetMaterialPricingGrp(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param upc (optional) 
    * @param materialPricingGrp (optional) 
    * @return Success
    */
    updateMaterialPricingGrp(upc: string | null | undefined, materialPricingGrp: string | null | undefined): Promise<number> {
        let url_ = this.baseUrl + "/api/services/app/QuotationPriceGroup/UpdateMaterialPricingGrp?";
        if (upc !== undefined)
            url_ += "upc=" + encodeURIComponent("" + upc) + "&";
                if (materialPricingGrp !== undefined)
            url_ += "materialPricingGrp=" + encodeURIComponent("" + materialPricingGrp) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "PUT",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpdateMaterialPricingGrp(_response));
        });
    }

    protected processUpdateMaterialPricingGrp(response: AxiosResponse): Promise<number> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = resultData200 !== undefined ? resultData200 : <any>null;
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<number>(<any>null);
    }
}

export class QuotationToolsServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @param startDate (optional) 
    * @param endDate (optional) 
    * @param pendingForMe (optional) 
    * @param applicationStatus (optional) 
    * @param filter (optional) 
    * @param quotationIdList (optional) 
    * @param sorting (optional) 
    * @param skipCount (optional) 
    * @param maxResultCount (optional) 
    * @return Success
    */
    getAll(startDate: string | null | undefined, endDate: string | null | undefined, pendingForMe: number | undefined, applicationStatus: string | null | undefined, filter: string | null | undefined, quotationIdList: number[] | null | undefined, sorting: string | null | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/services/app/QuotationTools/GetAll?";
        if (startDate !== undefined)
            url_ += "StartDate=" + encodeURIComponent("" + startDate) + "&";
                if (endDate !== undefined)
            url_ += "EndDate=" + encodeURIComponent("" + endDate) + "&";
                
        
        
        
         if (pendingForMe !== undefined && pendingForMe !== null)
            url_ += "PendingForMe=" + encodeURIComponent("" + pendingForMe) + "&";
                if (applicationStatus !== undefined)
            url_ += "ApplicationStatus=" + encodeURIComponent("" + applicationStatus) + "&";
                if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
                if (quotationIdList !== undefined)
            quotationIdList && quotationIdList.forEach(item => { url_ += "QuotationIdList=" +
            encodeURIComponent("" + item) + "&"; });
                if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
                
        
        
        
         if (skipCount !== undefined && skipCount !== null)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
                
        
        
        
         if (maxResultCount !== undefined && maxResultCount !== null)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetAll(_response));
        });
    }

    protected processGetAll(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param startDate (optional) 
    * @param endDate (optional) 
    * @param filterCase (optional) 
    * @param filter (optional) 
    * @param quotationIdList (optional) 
    * @param queryStatus (optional) 
    * @param querySOA (optional) 
    * @param pageName (optional) 
    * @param sorting (optional) 
    * @param skipCount (optional) 
    * @param maxResultCount (optional) 
    * @return Success
    */
    getPEAll(startDate: string | null | undefined, endDate: string | null | undefined, filterCase: number | undefined, filter: string | null | undefined, quotationIdList: number[] | null | undefined, queryStatus: number[] | null | undefined, querySOA: string[] | null | undefined, pageName: string | null | undefined, sorting: string | null | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/services/app/QuotationTools/GetPEAll?";
        if (startDate !== undefined)
            url_ += "StartDate=" + encodeURIComponent("" + startDate) + "&";
                if (endDate !== undefined)
            url_ += "EndDate=" + encodeURIComponent("" + endDate) + "&";
                
        
        
        
         if (filterCase !== undefined && filterCase !== null)
            url_ += "FilterCase=" + encodeURIComponent("" + filterCase) + "&";
                if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
                if (quotationIdList !== undefined)
            quotationIdList && quotationIdList.forEach(item => { url_ += "QuotationIdList=" +
            encodeURIComponent("" + item) + "&"; });
                if (queryStatus !== undefined)
            queryStatus && queryStatus.forEach(item => { url_ += "QueryStatus=" +
            encodeURIComponent("" + item) + "&"; });
                if (querySOA !== undefined)
            querySOA && querySOA.forEach(item => { url_ += "QuerySOA=" +
            encodeURIComponent("" + item) + "&"; });
                if (pageName !== undefined)
            url_ += "PageName=" + encodeURIComponent("" + pageName) + "&";
                if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
                
        
        
        
         if (skipCount !== undefined && skipCount !== null)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
                
        
        
        
         if (maxResultCount !== undefined && maxResultCount !== null)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetPEAll(_response));
        });
    }

    protected processGetPEAll(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param quotiationId (optional) 
    * @param loginedSgi (optional) 
    * @return Success
    */
    getOperationLog(quotiationId: number | undefined, loginedSgi: string | null | undefined): Promise<OperationLogDto[]> {
        let url_ = this.baseUrl + "/api/services/app/QuotationTools/GetOperationLog?";
        
        
        
        
         if (quotiationId !== undefined && quotiationId !== null)
            url_ += "quotiationId=" + encodeURIComponent("" + quotiationId) + "&";
                if (loginedSgi !== undefined)
            url_ += "loginedSgi=" + encodeURIComponent("" + loginedSgi) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetOperationLog(_response));
        });
    }

    protected processGetOperationLog(response: AxiosResponse): Promise<OperationLogDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(OperationLogDto.fromJS(item, _mappings));
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<OperationLogDto[]>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    exportPRAExcel(body: QuotationListInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationTools/ExportPRAExcel";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportPRAExcel(_response));
        });
    }

    protected processExportPRAExcel(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    exportPRA(body: QuotationListInput | undefined): Promise<MemoryStream> {
        let url_ = this.baseUrl + "/api/services/app/QuotationTools/ExportPRA";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportPRA(_response));
        });
    }

    protected processExportPRA(response: AxiosResponse): Promise<MemoryStream> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = MemoryStream.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MemoryStream>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    updateUPC(body: UpdateUPCInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationTools/UpdateUPC";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpdateUPC(_response));
        });
    }

    protected processUpdateUPC(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @return Success
    */
    getQuotationPricePE(): Promise<QuotationPeDto[]> {
        let url_ = this.baseUrl + "/api/services/app/QuotationTools/GetQuotationPricePE";
            url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetQuotationPricePE(_response));
        });
    }

    protected processGetQuotationPricePE(response: AxiosResponse): Promise<QuotationPeDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(QuotationPeDto.fromJS(item, _mappings));
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QuotationPeDto[]>(<any>null);
    }

    /**
    * @param id (optional) 
    * @param remark (optional) 
    * @return Success
    */
    updateRemark(id: number | undefined, remark: string | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationTools/UpdateRemark?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
                if (remark !== undefined)
            url_ += "remark=" + encodeURIComponent("" + remark) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "PUT",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpdateRemark(_response));
        });
    }

    protected processUpdateRemark(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param soa (optional) 
    * @return Success
    */
    getPeSubPlatFormMapping(soa: string | null | undefined): Promise<PeSubPlatFormMapping[]> {
        let url_ = this.baseUrl + "/api/services/app/QuotationTools/GetPeSubPlatFormMapping?";
        if (soa !== undefined)
            url_ += "soa=" + encodeURIComponent("" + soa) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetPeSubPlatFormMapping(_response));
        });
    }

    protected processGetPeSubPlatFormMapping(response: AxiosResponse): Promise<PeSubPlatFormMapping[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PeSubPlatFormMapping.fromJS(item, _mappings));
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PeSubPlatFormMapping[]>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    exportApplicationXLS(body: ExportApplicationXLSInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationTools/ExportApplicationXLS";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportApplicationXLS(_response));
        });
    }

    protected processExportApplicationXLS(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    pEExportList(body: ExportApplicationXLSInput | undefined): Promise<QuotationApplicationExportDto[]> {
        let url_ = this.baseUrl + "/api/services/app/QuotationTools/PEExportList";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processPEExportList(_response));
        });
    }

    protected processPEExportList(response: AxiosResponse): Promise<QuotationApplicationExportDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(QuotationApplicationExportDto.fromJS(item, _mappings));
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QuotationApplicationExportDto[]>(<any>null);
    }

    /**
    * @param data (optional) 
    * @return Success
    */
    getExportSalesApplicationXLS(data: QuotationApplicationExportDto[] | null | undefined): Promise<MemoryStream> {
        let url_ = this.baseUrl + "/api/services/app/QuotationTools/GetExportSalesApplicationXLS?";
        if (data !== undefined)
        data && data.forEach((item, index) => {
        for (let attr in item)
        if (item.hasOwnProperty(attr)) {
        url_ += "data[" + index + "]." + attr + "=" + encodeURIComponent("" + (<any>item)[attr]) + "&";
            }
            });
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetExportSalesApplicationXLS(_response));
        });
    }

    protected processGetExportSalesApplicationXLS(response: AxiosResponse): Promise<MemoryStream> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = MemoryStream.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MemoryStream>(<any>null);
    }

    /**
    * @param data (optional) 
    * @return Success
    */
    getExportApplicationXLS(data: QuotationApplicationExportDto[] | null | undefined): Promise<MemoryStream> {
        let url_ = this.baseUrl + "/api/services/app/QuotationTools/GetExportApplicationXLS?";
        if (data !== undefined)
        data && data.forEach((item, index) => {
        for (let attr in item)
        if (item.hasOwnProperty(attr)) {
        url_ += "data[" + index + "]." + attr + "=" + encodeURIComponent("" + (<any>item)[attr]) + "&";
            }
            });
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetExportApplicationXLS(_response));
        });
    }

    protected processGetExportApplicationXLS(response: AxiosResponse): Promise<MemoryStream> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = MemoryStream.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MemoryStream>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    exportSalesApplicationXLS(body: QuotationListInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationTools/ExportSalesApplicationXLS";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportSalesApplicationXLS(_response));
        });
    }

    protected processExportSalesApplicationXLS(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    exportMaterialMaintenanceXLS(body: ExportApplicationXLSInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationTools/ExportMaterialMaintenanceXLS";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportMaterialMaintenanceXLS(_response));
        });
    }

    protected processExportMaterialMaintenanceXLS(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class QuotationUPCApplicationServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
            console.log('defHttp12: ', this.defHttp12);
            console.log('instance: ', this.ajax);
        }
        this.baseUrl = ""
    }

    /**
    * @param id (optional) 
    * @return Success
    */
    getSearch(id: number | undefined): Promise<NewQuotationUPCApplication> {
        let url_ = this.baseUrl + "/api/services/app/QuotationUPCApplication/GetSearch?";
        console.log('this.baseUrl: ', this.baseUrl);
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };
        console.log('options_: ', options_);

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetSearch(_response));
        });
    }

    protected processGetSearch(response: AxiosResponse): Promise<NewQuotationUPCApplication> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = NewQuotationUPCApplication.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<NewQuotationUPCApplication>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    createOrEdit(body: CreateOrEditNewQuotationUPCApplication | undefined): Promise<number> {
        let url_ = this.baseUrl + "/api/services/app/QuotationUPCApplication/CreateOrEdit";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCreateOrEdit(_response));
        });
    }

    protected processCreateOrEdit(response: AxiosResponse): Promise<number> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = resultData200 !== undefined ? resultData200 : <any>null;
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<number>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    created(body: CreateOrEditNewQuotationUPCApplication | undefined): Promise<number> {
        let url_ = this.baseUrl + "/api/services/app/QuotationUPCApplication/Created";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCreated(_response));
        });
    }

    protected processCreated(response: AxiosResponse): Promise<number> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = resultData200 !== undefined ? resultData200 : <any>null;
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<number>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    newUpdate(body: CreateOrEditNewQuotationUPCApplication | undefined): Promise<number> {
        let url_ = this.baseUrl + "/api/services/app/QuotationUPCApplication/NewUpdate";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processNewUpdate(_response));
        });
    }

    protected processNewUpdate(response: AxiosResponse): Promise<number> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = resultData200 !== undefined ? resultData200 : <any>null;
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<number>(<any>null);
    }

    /**
    * @param id (optional) 
    * @return Success
    */
    delete(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationUPCApplication/Delete?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete(_response));
        });
    }

    protected processDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    createOrEditQuotationParams(body: CreateOrEditNewQuotationParams[] | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationUPCApplication/CreateOrEditQuotationParams";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCreateOrEditQuotationParams(_response));
        });
    }

    protected processCreateOrEditQuotationParams(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    createQuotationParams(body: CreateOrEditNewQuotationParams | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationUPCApplication/CreateQuotationParams";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCreateQuotationParams(_response));
        });
    }

    protected processCreateQuotationParams(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    updateQuotationParams(body: CreateOrEditNewQuotationParams | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationUPCApplication/UpdateQuotationParams";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpdateQuotationParams(_response));
        });
    }

    protected processUpdateQuotationParams(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param id (optional) 
    * @return Success
    */
    deleteQuotationParams(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationUPCApplication/DeleteQuotationParams?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeleteQuotationParams(_response));
        });
    }

    protected processDeleteQuotationParams(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param quotationId (optional) 
    * @return Success
    */
    batchDeleteQuotationParams(quotationId: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationUPCApplication/BatchDeleteQuotationParams?";
        
        
        
        
         if (quotationId !== undefined && quotationId !== null)
            url_ += "quotationId=" + encodeURIComponent("" + quotationId) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBatchDeleteQuotationParams(_response));
        });
    }

    protected processBatchDeleteQuotationParams(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param soldto (optional) 
    * @param upc (optional) 
    * @param soa (optional) 
    * @param sgid (optional) 
    * @param id (optional) 
    * @return Success
    */
    existsQuotationUpc(soldto: string | null | undefined, upc: string | null | undefined, soa: string | null | undefined, sgid: string | null | undefined, id: number | undefined): Promise<NewQuotationUPCApplication[]> {
        let url_ = this.baseUrl + "/api/services/app/QuotationUPCApplication/ExistsQuotationUpc?";
        if (soldto !== undefined)
            url_ += "soldto=" + encodeURIComponent("" + soldto) + "&";
                if (upc !== undefined)
            url_ += "upc=" + encodeURIComponent("" + upc) + "&";
                if (soa !== undefined)
            url_ += "soa=" + encodeURIComponent("" + soa) + "&";
                if (sgid !== undefined)
            url_ += "sgid=" + encodeURIComponent("" + sgid) + "&";
                
        
        
        
         if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExistsQuotationUpc(_response));
        });
    }

    protected processExistsQuotationUpc(response: AxiosResponse): Promise<NewQuotationUPCApplication[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(NewQuotationUPCApplication.fromJS(item, _mappings));
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<NewQuotationUPCApplication[]>(<any>null);
    }

    /**
    * @param soldto (optional) 
    * @param upc (optional) 
    * @param soa (optional) 
    * @param sgid (optional) 
    * @param id (optional) 
    * @return Success
    */
    getVW_QuotationDetails(soldto: string | null | undefined, upc: string | null | undefined, soa: string | null | undefined, sgid: string | null | undefined, id: number | undefined): Promise<Vw_QuotationDetails[]> {
        let url_ = this.baseUrl + "/api/services/app/QuotationUPCApplication/GetVW_QuotationDetails?";
        if (soldto !== undefined)
            url_ += "soldto=" + encodeURIComponent("" + soldto) + "&";
                if (upc !== undefined)
            url_ += "upc=" + encodeURIComponent("" + upc) + "&";
                if (soa !== undefined)
            url_ += "soa=" + encodeURIComponent("" + soa) + "&";
                if (sgid !== undefined)
            url_ += "sgid=" + encodeURIComponent("" + sgid) + "&";
                
        
        
        
         if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetVW_QuotationDetails(_response));
        });
    }

    protected processGetVW_QuotationDetails(response: AxiosResponse): Promise<Vw_QuotationDetails[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Vw_QuotationDetails.fromJS(item, _mappings));
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Vw_QuotationDetails[]>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    createUpc(body: AddUpcDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationUPCApplication/CreateUpc";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCreateUpc(_response));
        });
    }

    protected processCreateUpc(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    updateQuotationParamsPrice(body: CreateOrEditNewQuotationParams | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationUPCApplication/UpdateQuotationParamsPrice";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpdateQuotationParamsPrice(_response));
        });
    }

    protected processUpdateQuotationParamsPrice(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param iD (optional) 
    * @return Success
    */
    getQuotationParams(iD: number | undefined): Promise<NewQuotationParams[]> {
        let url_ = this.baseUrl + "/api/services/app/QuotationUPCApplication/GetQuotationParams?";
        
        
        
        
         if (iD !== undefined && iD !== null)
            url_ += "ID=" + encodeURIComponent("" + iD) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetQuotationParams(_response));
        });
    }

    protected processGetQuotationParams(response: AxiosResponse): Promise<NewQuotationParams[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(NewQuotationParams.fromJS(item, _mappings));
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<NewQuotationParams[]>(<any>null);
    }

    /**
    * @param sgid (optional) 
    * @return Success
    */
    getApproverBy(sgid: string | null | undefined): Promise<ApproverByDto[]> {
        let url_ = this.baseUrl + "/api/services/app/QuotationUPCApplication/GetApproverBy?";
        if (sgid !== undefined)
            url_ += "sgid=" + encodeURIComponent("" + sgid) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetApproverBy(_response));
        });
    }

    protected processGetApproverBy(response: AxiosResponse): Promise<ApproverByDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ApproverByDto.fromJS(item, _mappings));
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ApproverByDto[]>(<any>null);
    }

    /**
    * @param sgid (optional) 
    * @return Success
    */
    getApproverRole(sgid: string | null | undefined): Promise<ApproverByDto> {
        let url_ = this.baseUrl + "/api/services/app/QuotationUPCApplication/GetApproverRole?";
        if (sgid !== undefined)
            url_ += "sgid=" + encodeURIComponent("" + sgid) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetApproverRole(_response));
        });
    }

    protected processGetApproverRole(response: AxiosResponse): Promise<ApproverByDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = ApproverByDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ApproverByDto>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    searchUpcDesc(body: SearchUpcDescInput | undefined): Promise<UPCDescribeDto> {
        let url_ = this.baseUrl + "/api/services/app/QuotationUPCApplication/SearchUpcDesc";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSearchUpcDesc(_response));
        });
    }

    protected processSearchUpcDesc(response: AxiosResponse): Promise<UPCDescribeDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = UPCDescribeDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UPCDescribeDto>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    notifyCreatedUPC(body: number[] | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/QuotationUPCApplication/NotifyCreatedUPC";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processNotifyCreatedUPC(_response));
        });
    }

    protected processNotifyCreatedUPC(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @return Success
    */
    getAll(): Promise<NewQuotationUPCApplication[]> {
        let url_ = this.baseUrl + "/api/services/app/QuotationUPCApplication/GetAll";
            url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetAll(_response));
        });
    }

    protected processGetAll(response: AxiosResponse): Promise<NewQuotationUPCApplication[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(NewQuotationUPCApplication.fromJS(item, _mappings));
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<NewQuotationUPCApplication[]>(<any>null);
    }
}

export class RoleServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    create(body: CreateRoleDto | undefined): Promise<RoleDto> {
        let url_ = this.baseUrl + "/api/services/app/Role/Create";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCreate(_response));
        });
    }

    protected processCreate(response: AxiosResponse): Promise<RoleDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = RoleDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoleDto>(<any>null);
    }

    /**
    * @param permission (optional) 
    * @return Success
    */
    getRoles(permission: string | null | undefined): Promise<ListResultDtoOfRoleListDto> {
        let url_ = this.baseUrl + "/api/services/app/Role/GetRoles?";
        if (permission !== undefined)
            url_ += "Permission=" + encodeURIComponent("" + permission) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetRoles(_response));
        });
    }

    protected processGetRoles(response: AxiosResponse): Promise<ListResultDtoOfRoleListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = ListResultDtoOfRoleListDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ListResultDtoOfRoleListDto>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    update(body: RoleDto | undefined): Promise<RoleDto> {
        let url_ = this.baseUrl + "/api/services/app/Role/Update";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpdate(_response));
        });
    }

    protected processUpdate(response: AxiosResponse): Promise<RoleDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = RoleDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoleDto>(<any>null);
    }

    /**
    * @param id (optional) 
    * @return Success
    */
    delete(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Role/Delete?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete(_response));
        });
    }

    protected processDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @return Success
    */
    getAllPermissions(): Promise<ListResultDtoOfPermissionDto> {
        let url_ = this.baseUrl + "/api/services/app/Role/GetAllPermissions";
            url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetAllPermissions(_response));
        });
    }

    protected processGetAllPermissions(response: AxiosResponse): Promise<ListResultDtoOfPermissionDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = ListResultDtoOfPermissionDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ListResultDtoOfPermissionDto>(<any>null);
    }

    /**
    * @param id (optional) 
    * @return Success
    */
    getRoleForEdit(id: number | undefined): Promise<GetRoleForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/Role/GetRoleForEdit?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetRoleForEdit(_response));
        });
    }

    protected processGetRoleForEdit(response: AxiosResponse): Promise<GetRoleForEditOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = GetRoleForEditOutput.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetRoleForEditOutput>(<any>null);
    }

    /**
    * @param id (optional) 
    * @return Success
    */
    get(id: number | undefined): Promise<RoleDto> {
        let url_ = this.baseUrl + "/api/services/app/Role/Get?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGet(_response));
        });
    }

    protected processGet(response: AxiosResponse): Promise<RoleDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = RoleDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RoleDto>(<any>null);
    }

    /**
    * @param keyword (optional) 
    * @param skipCount (optional) 
    * @param maxResultCount (optional) 
    * @return Success
    */
    getAll(keyword: string | null | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Promise<PagedResultDtoOfRoleDto> {
        let url_ = this.baseUrl + "/api/services/app/Role/GetAll?";
        if (keyword !== undefined)
            url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&";
                
        
        
        
         if (skipCount !== undefined && skipCount !== null)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
                
        
        
        
         if (maxResultCount !== undefined && maxResultCount !== null)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetAll(_response));
        });
    }

    protected processGetAll(response: AxiosResponse): Promise<PagedResultDtoOfRoleDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = PagedResultDtoOfRoleDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfRoleDto>(<any>null);
    }
}

export class SalesDashboardTargetServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @param version (optional) 
    * @param isActive (optional) 
    * @param isQuit (optional) 
    * @param year (optional) 
    * @return Success
    */
    getSalesTargetAll(version: string | null | undefined, type: TargetType, isActive: boolean | null | undefined, isQuit: boolean | null | undefined, year: number | undefined): Promise<PagedResultDtoOfSalesDashboardTargetDto> {
        let url_ = this.baseUrl + "/api/services/app/SalesDashboardTarget/GetSalesTargetAll?";
        if (version !== undefined)
            url_ += "Version=" + encodeURIComponent("" + version) + "&";
                if (type === undefined || type === null)
        throw new Error("The parameter 'type' must be defined and cannot be null.");
        else
            url_ += "Type=" + encodeURIComponent("" + type) + "&";
                if (isActive !== undefined)
            url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&";
                if (isQuit !== undefined)
            url_ += "IsQuit=" + encodeURIComponent("" + isQuit) + "&";
                
        
        
        
         if (year !== undefined && year !== null)
            url_ += "Year=" + encodeURIComponent("" + year) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetSalesTargetAll(_response));
        });
    }

    protected processGetSalesTargetAll(response: AxiosResponse): Promise<PagedResultDtoOfSalesDashboardTargetDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = PagedResultDtoOfSalesDashboardTargetDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfSalesDashboardTargetDto>(<any>null);
    }

    /**
    * @param year (optional) 
    * @return Success
    */
    getSalesList(year: number | undefined): Promise<RepNumName[]> {
        let url_ = this.baseUrl + "/api/services/app/SalesDashboardTarget/GetSalesList?";
        
        
        
        
         if (year !== undefined && year !== null)
            url_ += "year=" + encodeURIComponent("" + year) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetSalesList(_response));
        });
    }

    protected processGetSalesList(response: AxiosResponse): Promise<RepNumName[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(RepNumName.fromJS(item, _mappings));
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RepNumName[]>(<any>null);
    }

    /**
    * @param year (optional) 
    * @return Success
    */
    getTeamBGT(year: number | undefined): Promise<SalesDashboardTargetDto[]> {
        let url_ = this.baseUrl + "/api/services/app/SalesDashboardTarget/GetTeamBGT?";
        
        
        
        
         if (year !== undefined && year !== null)
            url_ += "year=" + encodeURIComponent("" + year) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetTeamBGT(_response));
        });
    }

    protected processGetTeamBGT(response: AxiosResponse): Promise<SalesDashboardTargetDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SalesDashboardTargetDto.fromJS(item, _mappings));
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SalesDashboardTargetDto[]>(<any>null);
    }

    /**
    * @param year (optional) 
    * @return Success
    */
    getSalesBGT(year: number | undefined): Promise<SalesDashboardTargetDto> {
        let url_ = this.baseUrl + "/api/services/app/SalesDashboardTarget/GetSalesBGT?";
        
        
        
        
         if (year !== undefined && year !== null)
            url_ += "year=" + encodeURIComponent("" + year) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetSalesBGT(_response));
        });
    }

    protected processGetSalesBGT(response: AxiosResponse): Promise<SalesDashboardTargetDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = SalesDashboardTargetDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SalesDashboardTargetDto>(<any>null);
    }

    /**
    * @return Success
    */
    getChannelList(): Promise<string[]> {
        let url_ = this.baseUrl + "/api/services/app/SalesDashboardTarget/GetChannelList";
            url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetChannelList(_response));
        });
    }

    protected processGetChannelList(response: AxiosResponse): Promise<string[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string[]>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    createBGT(body: CreateOrEditSalesDashboardTargetDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/SalesDashboardTarget/CreateBGT";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCreateBGT(_response));
        });
    }

    protected processCreateBGT(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    createOrEdit(body: CreateOrEditSalesDashboardTargetDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/SalesDashboardTarget/CreateOrEdit";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCreateOrEdit(_response));
        });
    }

    protected processCreateOrEdit(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param id (optional) 
    * @return Success
    */
    delete(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/SalesDashboardTarget/Delete?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete(_response));
        });
    }

    protected processDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    bathUpdate(body: CreateOrEditSalesDashboardTargetDto[] | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/SalesDashboardTarget/BathUpdate";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBathUpdate(_response));
        });
    }

    protected processBathUpdate(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @return Success
    */
    getSGI(): Promise<SGIAndName[]> {
        let url_ = this.baseUrl + "/api/services/app/SalesDashboardTarget/GetSGI";
            url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetSGI(_response));
        });
    }

    protected processGetSGI(response: AxiosResponse): Promise<SGIAndName[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SGIAndName.fromJS(item, _mappings));
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SGIAndName[]>(<any>null);
    }

    /**
    * @return Success
    */
    getRepNumeAndName(): Promise<RepNumeAndName[]> {
        let url_ = this.baseUrl + "/api/services/app/SalesDashboardTarget/GetRepNumeAndName";
            url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetRepNumeAndName(_response));
        });
    }

    protected processGetRepNumeAndName(response: AxiosResponse): Promise<RepNumeAndName[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(RepNumeAndName.fromJS(item, _mappings));
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RepNumeAndName[]>(<any>null);
    }

    /**
    * @param sgid (optional) 
    * @return Success
    */
    getAllSGIDAndRep(sgid: string | null | undefined): Promise<SGIDZECodeMapping[]> {
        let url_ = this.baseUrl + "/api/services/app/SalesDashboardTarget/GetAllSGIDAndRep?";
        if (sgid !== undefined)
            url_ += "sgid=" + encodeURIComponent("" + sgid) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetAllSGIDAndRep(_response));
        });
    }

    protected processGetAllSGIDAndRep(response: AxiosResponse): Promise<SGIDZECodeMapping[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SGIDZECodeMapping.fromJS(item, _mappings));
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SGIDZECodeMapping[]>(<any>null);
    }

    /**
    * @param year (optional) 
    * @return Success
    */
    getVersionList(type: TargetType, year: number | undefined): Promise<VersionDto> {
        let url_ = this.baseUrl + "/api/services/app/SalesDashboardTarget/GetVersionList?";
        if (type === undefined || type === null)
        throw new Error("The parameter 'type' must be defined and cannot be null.");
        else
            url_ += "Type=" + encodeURIComponent("" + type) + "&";
                
        
        
        
         if (year !== undefined && year !== null)
            url_ += "Year=" + encodeURIComponent("" + year) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetVersionList(_response));
        });
    }

    protected processGetVersionList(response: AxiosResponse): Promise<VersionDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = VersionDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<VersionDto>(<any>null);
    }
}

export class SalesIncentive_DashboardChartServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @return Success
    */
    getNewPeriod(): Promise<number> {
        let url_ = this.baseUrl + "/api/SalesIncentive_DashboardChart/GetNewPeriod";
            url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetNewPeriod(_response));
        });
    }

    protected processGetNewPeriod(response: AxiosResponse): Promise<number> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = resultData200 !== undefined ? resultData200 : <any>null;
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<number>(<any>null);
    }

    /**
    * @param period (optional) 
    * @param channel (optional) 
    * @param isViewAll (optional) 
    * @return Success
    */
    getSGI(period: number | undefined, channel: string | null | undefined, isViewAll: boolean | undefined): Promise<ExportDashboardYTDValueTemplate[]> {
        let url_ = this.baseUrl + "/api/SalesIncentive_DashboardChart/GetSGI?";
        
        
        
        
         if (period !== undefined && period !== null)
            url_ += "period=" + encodeURIComponent("" + period) + "&";
                if (channel !== undefined)
            url_ += "channel=" + encodeURIComponent("" + channel) + "&";
                
        
        
        
         if (isViewAll !== undefined && isViewAll !== null)
            url_ += "isViewAll=" + encodeURIComponent("" + isViewAll) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetSGI(_response));
        });
    }

    protected processGetSGI(response: AxiosResponse): Promise<ExportDashboardYTDValueTemplate[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ExportDashboardYTDValueTemplate.fromJS(item, _mappings));
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ExportDashboardYTDValueTemplate[]>(<any>null);
    }

    /**
    * @param period (optional) 
    * @param channel (optional) 
    * @param isViewAll (optional) 
    * @return Success
    */
    getYTDValue(period: number | undefined, channel: string | null | undefined, isViewAll: boolean | undefined): Promise<ExportDashboardYTDValueTemplate[]> {
        let url_ = this.baseUrl + "/api/SalesIncentive_DashboardChart/GetYTDValue?";
        
        
        
        
         if (period !== undefined && period !== null)
            url_ += "period=" + encodeURIComponent("" + period) + "&";
                if (channel !== undefined)
            url_ += "channel=" + encodeURIComponent("" + channel) + "&";
                
        
        
        
         if (isViewAll !== undefined && isViewAll !== null)
            url_ += "isViewAll=" + encodeURIComponent("" + isViewAll) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetYTDValue(_response));
        });
    }

    protected processGetYTDValue(response: AxiosResponse): Promise<ExportDashboardYTDValueTemplate[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ExportDashboardYTDValueTemplate.fromJS(item, _mappings));
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ExportDashboardYTDValueTemplate[]>(<any>null);
    }

    /**
    * @param period (optional) 
    * @param isViewAll (optional) 
    * @return Success
    */
    getChannelList(period: number | undefined, isViewAll: boolean | undefined): Promise<string[]> {
        let url_ = this.baseUrl + "/api/SalesIncentive_DashboardChart/GetChannelList?";
        
        
        
        
         if (period !== undefined && period !== null)
            url_ += "period=" + encodeURIComponent("" + period) + "&";
                
        
        
        
         if (isViewAll !== undefined && isViewAll !== null)
            url_ += "isViewAll=" + encodeURIComponent("" + isViewAll) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetChannelList(_response));
        });
    }

    protected processGetChannelList(response: AxiosResponse): Promise<string[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string[]>(<any>null);
    }
}

export class SalesMonthlyServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @param salesOffice (optional) 
    * @param sMR (optional) 
    * @param custClass (optional) 
    * @param customerSize (optional) 
    * @param startTime (optional) 
    * @param endTime (optional) 
    * @param repNum (optional) 
    * @param filter (optional) 
    * @param tableColumn (optional) 
    * @param sorting (optional) 
    * @param skipCount (optional) 
    * @param maxResultCount (optional) 
    * @return Success
    */
    getAll(salesOffice: string | null | undefined, sMR: string | null | undefined, custClass: string | null | undefined, customerSize: string | null | undefined, startTime: number | null | undefined, endTime: number | null | undefined, repNum: string[] | null | undefined, filter: string | null | undefined, tableColumn: string | null | undefined, sorting: string | null | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Promise<PagedResultDtoOfTempSalesMonthly> {
        let url_ = this.baseUrl + "/api/services/app/SalesMonthly/GetAll?";
        if (salesOffice !== undefined)
            url_ += "SalesOffice=" + encodeURIComponent("" + salesOffice) + "&";
                if (sMR !== undefined)
            url_ += "SMR=" + encodeURIComponent("" + sMR) + "&";
                if (custClass !== undefined)
            url_ += "CustClass=" + encodeURIComponent("" + custClass) + "&";
                if (customerSize !== undefined)
            url_ += "CustomerSize=" + encodeURIComponent("" + customerSize) + "&";
                if (startTime !== undefined)
            url_ += "StartTime=" + encodeURIComponent("" + startTime) + "&";
                if (endTime !== undefined)
            url_ += "EndTime=" + encodeURIComponent("" + endTime) + "&";
                if (repNum !== undefined)
            repNum && repNum.forEach(item => { url_ += "RepNum=" +
            encodeURIComponent("" + item) + "&"; });
                if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
                if (tableColumn !== undefined)
            url_ += "TableColumn=" + encodeURIComponent("" + tableColumn) + "&";
                if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
                
        
        
        
         if (skipCount !== undefined && skipCount !== null)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
                
        
        
        
         if (maxResultCount !== undefined && maxResultCount !== null)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetAll(_response));
        });
    }

    protected processGetAll(response: AxiosResponse): Promise<PagedResultDtoOfTempSalesMonthly> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = PagedResultDtoOfTempSalesMonthly.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfTempSalesMonthly>(<any>null);
    }

    /**
    * @return Success
    */
    getCustClass(): Promise<string[]> {
        let url_ = this.baseUrl + "/api/services/app/SalesMonthly/GetCustClass";
            url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetCustClass(_response));
        });
    }

    protected processGetCustClass(response: AxiosResponse): Promise<string[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string[]>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    exportExcel(body: TempSalesMonthlyInputDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/SalesMonthly/ExportExcel";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportExcel(_response));
        });
    }

    protected processExportExcel(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    exportSalesMonthly(body: TempSalesMonthlyInputDto | undefined): Promise<MemoryStream> {
        let url_ = this.baseUrl + "/api/services/app/SalesMonthly/ExportSalesMonthly";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportSalesMonthly(_response));
        });
    }

    protected processExportSalesMonthly(response: AxiosResponse): Promise<MemoryStream> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = MemoryStream.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MemoryStream>(<any>null);
    }

    /**
    * @return Success
    */
    getSalesOffice(): Promise<string[]> {
        let url_ = this.baseUrl + "/api/services/app/SalesMonthly/GetSalesOffice";
            url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetSalesOffice(_response));
        });
    }

    protected processGetSalesOffice(response: AxiosResponse): Promise<string[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string[]>(<any>null);
    }

    /**
    * @return Success
    */
    getSMR(): Promise<string[]> {
        let url_ = this.baseUrl + "/api/services/app/SalesMonthly/GetSMR";
            url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetSMR(_response));
        });
    }

    protected processGetSMR(response: AxiosResponse): Promise<string[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string[]>(<any>null);
    }
}

export class SendQuotationServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @param priceid (optional) 
    * @return Success
    */
    saleSendQuotation(priceid: number | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/services/app/SendQuotation/SaleSendQuotation?";
        
        
        
        
         if (priceid !== undefined && priceid !== null)
            url_ += "priceid=" + encodeURIComponent("" + priceid) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSaleSendQuotation(_response));
        });
    }

    protected processSaleSendQuotation(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = resultData200 !== undefined ? resultData200 : <any>null;
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(<any>null);
    }

    /**
    * @return Success
    */
    syncQuotationADWInfo(): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/SendQuotation/SyncQuotationADWInfo";
            url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSyncQuotationADWInfo(_response));
        });
    }

    protected processSyncQuotationADWInfo(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param id (optional) 
    * @param path (optional) 
    * @return Success
    */
    salseToCuatomet(id: number | undefined, path: string | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/SendQuotation/SalseToCuatomet?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
                if (path !== undefined)
            url_ += "path=" + encodeURIComponent("" + path) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSalseToCuatomet(_response));
        });
    }

    protected processSalseToCuatomet(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class SessionServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @return Success
    */
    getCurrentLoginInformations(): Promise<GetCurrentLoginInformationsOutput> {
        let url_ = this.baseUrl + "/api/services/app/Session/GetCurrentLoginInformations";
            url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetCurrentLoginInformations(_response));
        });
    }

    protected processGetCurrentLoginInformations(response: AxiosResponse): Promise<GetCurrentLoginInformationsOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = GetCurrentLoginInformationsOutput.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetCurrentLoginInformationsOutput>(<any>null);
    }
}

export class SGAAccountServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @return Success
    */
    getUserInfo(): Promise<void> {
        let url_ = this.baseUrl + "/api/SGAAccount/GetUserInfo";
            url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetUserInfo(_response));
        });
    }

    protected processGetUserInfo(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class StandardProductServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @param keyWords (optional) 
    * @param pageIndex (optional) 
    * @param pageSize (optional) 
    * @return Success
    */
    getAllHierarchy(keyWords: string | null | undefined, pageIndex: number | undefined, pageSize: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/StandardProduct/GetAllHierarchy?";
        if (keyWords !== undefined)
            url_ += "KeyWords=" + encodeURIComponent("" + keyWords) + "&";
                
        
        
        
         if (pageIndex !== undefined && pageIndex !== null)
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&";
                
        
        
        
         if (pageSize !== undefined && pageSize !== null)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetAllHierarchy(_response));
        });
    }

    protected processGetAllHierarchy(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    creteHierarchy(body: StandardProHierarchy | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/StandardProduct/CreteHierarchy";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCreteHierarchy(_response));
        });
    }

    protected processCreteHierarchy(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    batchCreateHierarchyCheck(body: StandardProHierarchy[] | null | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/StandardProduct/BatchCreateHierarchyCheck";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBatchCreateHierarchyCheck(_response));
        });
    }

    protected processBatchCreateHierarchyCheck(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    batchCreateHierarchy(body: StandardProHierarchy[] | null | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/StandardProduct/BatchCreateHierarchy";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBatchCreateHierarchy(_response));
        });
    }

    protected processBatchCreateHierarchy(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    updateHierarchy(body: StandardProHierarchy | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/StandardProduct/UpdateHierarchy";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpdateHierarchy(_response));
        });
    }

    protected processUpdateHierarchy(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param id (optional) 
    * @return Success
    */
    deleteHierarchy(id: number | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/StandardProduct/DeleteHierarchy?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeleteHierarchy(_response));
        });
    }

    protected processDeleteHierarchy(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param keyWords (optional) 
    * @param pageIndex (optional) 
    * @param pageSize (optional) 
    * @return Success
    */
    getAllHierarchyProduct(keyWords: string | null | undefined, pageIndex: number | undefined, pageSize: number | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/StandardProduct/GetAllHierarchyProduct?";
        if (keyWords !== undefined)
            url_ += "KeyWords=" + encodeURIComponent("" + keyWords) + "&";
                
        
        
        
         if (pageIndex !== undefined && pageIndex !== null)
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&";
                
        
        
        
         if (pageSize !== undefined && pageSize !== null)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetAllHierarchyProduct(_response));
        });
    }

    protected processGetAllHierarchyProduct(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @return Success
    */
    getSOA(): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/StandardProduct/GetSOA";
            url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetSOA(_response));
        });
    }

    protected processGetSOA(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param soa (optional) 
    * @return Success
    */
    getAllHierarchy1(soa: string | null | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/StandardProduct/GetAllHierarchy1?";
        if (soa !== undefined)
            url_ += "soa=" + encodeURIComponent("" + soa) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetAllHierarchy1(_response));
        });
    }

    protected processGetAllHierarchy1(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param soa (optional) 
    * @param hierarchy1_Eshop_Code (optional) 
    * @return Success
    */
    getAllHierarchy2(soa: string | null | undefined, hierarchy1_Eshop_Code: string | null | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/StandardProduct/GetAllHierarchy2?";
        if (soa !== undefined)
            url_ += "soa=" + encodeURIComponent("" + soa) + "&";
                if (hierarchy1_Eshop_Code !== undefined)
            url_ += "hierarchy1_Eshop_Code=" + encodeURIComponent("" + hierarchy1_Eshop_Code) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetAllHierarchy2(_response));
        });
    }

    protected processGetAllHierarchy2(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    addHierarchyProduct(body: StandardProHierarchyProduct | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/StandardProduct/AddHierarchyProduct";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processAddHierarchyProduct(_response));
        });
    }

    protected processAddHierarchyProduct(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    batchAddHierarchyProduct(body: QueryHierarchyProductParameter[] | null | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/StandardProduct/BatchAddHierarchyProduct";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBatchAddHierarchyProduct(_response));
        });
    }

    protected processBatchAddHierarchyProduct(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    batchQueryHierarchyProduct(body: QueryHierarchyProductParameter[] | null | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/StandardProduct/BatchQueryHierarchyProduct";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBatchQueryHierarchyProduct(_response));
        });
    }

    protected processBatchQueryHierarchyProduct(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    updateHierarchyProduct(body: StandardProHierarchyProduct | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/StandardProduct/UpdateHierarchyProduct";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpdateHierarchyProduct(_response));
        });
    }

    protected processUpdateHierarchyProduct(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param id (optional) 
    * @return Success
    */
    deleteHierarchyProduct(id: number | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/StandardProduct/DeleteHierarchyProduct?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeleteHierarchyProduct(_response));
        });
    }

    protected processDeleteHierarchyProduct(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param title (optional) 
    * @param body (optional) 
    * @return Success
    */
    sendStandardProHierarchy(title: string | null | undefined, body: StandardProHierarchy | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/StandardProduct/SendStandardProHierarchy?";
        if (title !== undefined)
            url_ += "title=" + encodeURIComponent("" + title) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSendStandardProHierarchy(_response));
        });
    }

    protected processSendStandardProHierarchy(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    sendEmalBySOA(body: QueryHierarchyProductParameter[] | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/StandardProduct/SendEmalBySOA";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSendEmalBySOA(_response));
        });
    }

    protected processSendEmalBySOA(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param emialAddress (optional) 
    * @param body (optional) 
    * @return Success
    */
    sendStandarPro(emialAddress: string | null | undefined, body: QueryHierarchyProductParameter[] | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/StandardProduct/SendStandarPro?";
        if (emialAddress !== undefined)
            url_ += "emialAddress=" + encodeURIComponent("" + emialAddress) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processSendStandarPro(_response));
        });
    }

    protected processSendStandarPro(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class StrategicProductServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @param keyWords (optional) 
    * @param pageIndex (optional) 
    * @param pageSize (optional) 
    * @return Success
    */
    getAll(keyWords: string | null | undefined, pageIndex: number | undefined, pageSize: number | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/StrategicProduct/GetAll?";
        if (keyWords !== undefined)
            url_ += "KeyWords=" + encodeURIComponent("" + keyWords) + "&";
                
        
        
        
         if (pageIndex !== undefined && pageIndex !== null)
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&";
                
        
        
        
         if (pageSize !== undefined && pageSize !== null)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetAll(_response));
        });
    }

    protected processGetAll(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param keywords (optional) 
    * @return Success
    */
    getSingleProduct(keywords: string | null | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/StrategicProduct/GetSingleProduct?";
        if (keywords !== undefined)
            url_ += "keywords=" + encodeURIComponent("" + keywords) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetSingleProduct(_response));
        });
    }

    protected processGetSingleProduct(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param materialNum (optional) 
    * @return Success
    */
    getMaterialNum(materialNum: string | null | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/StrategicProduct/GetMaterialNum?";
        if (materialNum !== undefined)
            url_ += "materialNum=" + encodeURIComponent("" + materialNum) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetMaterialNum(_response));
        });
    }

    protected processGetMaterialNum(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    bacthQueryStrategicProduct(body: StrategicProductDto[] | null | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/StrategicProduct/BacthQueryStrategicProduct";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBacthQueryStrategicProduct(_response));
        });
    }

    protected processBacthQueryStrategicProduct(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    bacthUpdateStrategicProduct(body: StrategicProductDto[] | null | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/StrategicProduct/BacthUpdateStrategicProduct";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBacthUpdateStrategicProduct(_response));
        });
    }

    protected processBacthUpdateStrategicProduct(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param upc (optional) 
    * @return Success
    */
    getStrategicCategory(upc: string | null | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/StrategicProduct/GetStrategicCategory?";
        if (upc !== undefined)
            url_ += "upc=" + encodeURIComponent("" + upc) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetStrategicCategory(_response));
        });
    }

    protected processGetStrategicCategory(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @return Success
    */
    getChannel(): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/StrategicProduct/GetChannel";
            url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetChannel(_response));
        });
    }

    protected processGetChannel(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    add(body: StrategicProduct | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/StrategicProduct/Add";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processAdd(_response));
        });
    }

    protected processAdd(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    update(body: StrategicProduct | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/StrategicProduct/Update";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpdate(_response));
        });
    }

    protected processUpdate(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param id (optional) 
    * @return Success
    */
    delete(id: number | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/StrategicProduct/Delete?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete(_response));
        });
    }

    protected processDelete(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }
}

export class StrategicProductBacthQueryServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @return Success
    */
    batchQuery(): Promise<void> {
        let url_ = this.baseUrl + "/api/StrategicProductBacthQuery/BatchQuery";
            url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBatchQuery(_response));
        });
    }

    protected processBatchQuery(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param area (optional) 
    * @return Success
    */
    exportUnionData(area: string | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/StrategicProductBacthQuery/ExportUnionData?";
        if (area !== undefined)
            url_ += "area=" + encodeURIComponent("" + area) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportUnionData(_response));
        });
    }

    protected processExportUnionData(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @return Success
    */
    exportStrategicProductData(): Promise<void> {
        let url_ = this.baseUrl + "/api/StrategicProductBacthQuery/ExportStrategicProductData";
            url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportStrategicProductData(_response));
        });
    }

    protected processExportStrategicProductData(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param date (optional) 
    * @return Success
    */
    exportNewCustomerData(date: string | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/StrategicProductBacthQuery/ExportNewCustomerData?";
        if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportNewCustomerData(_response));
        });
    }

    protected processExportNewCustomerData(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param date (optional) 
    * @return Success
    */
    exportNewBusinessData(date: string | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/StrategicProductBacthQuery/ExportNewBusinessData?";
        if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportNewBusinessData(_response));
        });
    }

    protected processExportNewBusinessData(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param date (optional) 
    * @return Success
    */
    exportBillingCustomerBySalesData(date: string | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/StrategicProductBacthQuery/ExportBillingCustomerBySalesData?";
        if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportBillingCustomerBySalesData(_response));
        });
    }

    protected processExportBillingCustomerBySalesData(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param date (optional) 
    * @return Success
    */
    exportOpportunityTAP(date: string | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/StrategicProductBacthQuery/ExportOpportunityTAP?";
        if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportOpportunityTAP(_response));
        });
    }

    protected processExportOpportunityTAP(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param date (optional) 
    * @return Success
    */
    regenerateTAP(date: string | null | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/StrategicProductBacthQuery/RegenerateTAP?";
        if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processRegenerateTAP(_response));
        });
    }

    protected processRegenerateTAP(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param date (optional) 
    * @return Success
    */
    exportR04Collect(date: string | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/StrategicProductBacthQuery/ExportR04Collect?";
        if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportR04Collect(_response));
        });
    }

    protected processExportR04Collect(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param date (optional) 
    * @return Success
    */
    generateR04Collect(date: string | null | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/StrategicProductBacthQuery/GenerateR04Collect?";
        if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGenerateR04Collect(_response));
        });
    }

    protected processGenerateR04Collect(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param date (optional) 
    * @return Success
    */
    exportReverse(date: string | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/StrategicProductBacthQuery/ExportReverse?";
        if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportReverse(_response));
        });
    }

    protected processExportReverse(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param date (optional) 
    * @return Success
    */
    exportR20Collect(date: string | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/StrategicProductBacthQuery/ExportR20Collect?";
        if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportR20Collect(_response));
        });
    }

    protected processExportR20Collect(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param date (optional) 
    * @return Success
    */
    exportVisitCollect(date: string | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/StrategicProductBacthQuery/ExportVisitCollect?";
        if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportVisitCollect(_response));
        });
    }

    protected processExportVisitCollect(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param date (optional) 
    * @return Success
    */
    generateVisitCollect(date: string | null | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/StrategicProductBacthQuery/GenerateVisitCollect?";
        if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGenerateVisitCollect(_response));
        });
    }

    protected processGenerateVisitCollect(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param date (optional) 
    * @return Success
    */
    exportOpportunityCollect(date: string | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/StrategicProductBacthQuery/ExportOpportunityCollect?";
        if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportOpportunityCollect(_response));
        });
    }

    protected processExportOpportunityCollect(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param date (optional) 
    * @return Success
    */
    generateOpportunityCollect(date: string | null | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/StrategicProductBacthQuery/GenerateOpportunityCollect?";
        if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGenerateOpportunityCollect(_response));
        });
    }

    protected processGenerateOpportunityCollect(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param date (optional) 
    * @return Success
    */
    exportSalesWithTAPCollect(date: string | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/StrategicProductBacthQuery/ExportSalesWithTAPCollect?";
        if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportSalesWithTAPCollect(_response));
        });
    }

    protected processExportSalesWithTAPCollect(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param date (optional) 
    * @return Success
    */
    generateSalesWithTAPCollect(date: string | null | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/StrategicProductBacthQuery/GenerateSalesWithTAPCollect?";
        if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGenerateSalesWithTAPCollect(_response));
        });
    }

    protected processGenerateSalesWithTAPCollect(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param date (optional) 
    * @return Success
    */
    exportSalesWithStrategicProductsCollect(date: string | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/StrategicProductBacthQuery/ExportSalesWithStrategicProductsCollect?";
        if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportSalesWithStrategicProductsCollect(_response));
        });
    }

    protected processExportSalesWithStrategicProductsCollect(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param date (optional) 
    * @return Success
    */
    generateSalesWithStrategicProductsCollect(date: string | null | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/StrategicProductBacthQuery/GenerateSalesWithStrategicProductsCollect?";
        if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGenerateSalesWithStrategicProductsCollect(_response));
        });
    }

    protected processGenerateSalesWithStrategicProductsCollect(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param date (optional) 
    * @return Success
    */
    exportSalesWithNewCustomerCollect(date: string | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/StrategicProductBacthQuery/ExportSalesWithNewCustomerCollect?";
        if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportSalesWithNewCustomerCollect(_response));
        });
    }

    protected processExportSalesWithNewCustomerCollect(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param date (optional) 
    * @return Success
    */
    generateSalesWithNewCustomerCollect(date: string | null | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/StrategicProductBacthQuery/GenerateSalesWithNewCustomerCollect?";
        if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGenerateSalesWithNewCustomerCollect(_response));
        });
    }

    protected processGenerateSalesWithNewCustomerCollect(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param period (optional) 
    * @return Success
    */
    batchImportR04(period: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/StrategicProductBacthQuery/BatchImportR04?";
        
        
        
        
         if (period !== undefined && period !== null)
            url_ += "period=" + encodeURIComponent("" + period) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBatchImportR04(_response));
        });
    }

    protected processBatchImportR04(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param date (optional) 
    * @return Success
    */
    generateR20(date: string | null | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/StrategicProductBacthQuery/GenerateR20?";
        if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGenerateR20(_response));
        });
    }

    protected processGenerateR20(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param period (optional) 
    * @return Success
    */
    batchImportR20(period: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/StrategicProductBacthQuery/BatchImportR20?";
        
        
        
        
         if (period !== undefined && period !== null)
            url_ += "period=" + encodeURIComponent("" + period) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBatchImportR20(_response));
        });
    }

    protected processBatchImportR20(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param year (optional) 
    * @param month (optional) 
    * @return Success
    */
    batchImportQuotationConversion(year: number | undefined, month: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/StrategicProductBacthQuery/BatchImportQuotationConversion?";
        
        
        
        
         if (year !== undefined && year !== null)
            url_ += "year=" + encodeURIComponent("" + year) + "&";
                
        
        
        
         if (month !== undefined && month !== null)
            url_ += "month=" + encodeURIComponent("" + month) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBatchImportQuotationConversion(_response));
        });
    }

    protected processBatchImportQuotationConversion(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param date (optional) 
    * @param isViewAll (optional) 
    * @return Success
    */
    getDashboardList(date: string | null | undefined, isViewAll: boolean | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/StrategicProductBacthQuery/GetDashboardList?";
        if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
                
        
        
        
         if (isViewAll !== undefined && isViewAll !== null)
            url_ += "isViewAll=" + encodeURIComponent("" + isViewAll) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetDashboardList(_response));
        });
    }

    protected processGetDashboardList(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param date (optional) 
    * @param isViewAll (optional) 
    * @return Success
    */
    exportDashboardCollect(date: string | null | undefined, isViewAll: boolean | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/StrategicProductBacthQuery/ExportDashboardCollect?";
        if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
                
        
        
        
         if (isViewAll !== undefined && isViewAll !== null)
            url_ += "isViewAll=" + encodeURIComponent("" + isViewAll) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportDashboardCollect(_response));
        });
    }

    protected processExportDashboardCollect(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param date (optional) 
    * @param isViewAll (optional) 
    * @return Success
    */
    getDashboardCompletionList(date: string | null | undefined, isViewAll: boolean | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/StrategicProductBacthQuery/GetDashboardCompletionList?";
        if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
                
        
        
        
         if (isViewAll !== undefined && isViewAll !== null)
            url_ += "isViewAll=" + encodeURIComponent("" + isViewAll) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetDashboardCompletionList(_response));
        });
    }

    protected processGetDashboardCompletionList(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param date (optional) 
    * @param isViewAll (optional) 
    * @return Success
    */
    exportDashboardCompletion(date: string | null | undefined, isViewAll: boolean | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/StrategicProductBacthQuery/ExportDashboardCompletion?";
        if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
                
        
        
        
         if (isViewAll !== undefined && isViewAll !== null)
            url_ += "isViewAll=" + encodeURIComponent("" + isViewAll) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportDashboardCompletion(_response));
        });
    }

    protected processExportDashboardCompletion(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param date (optional) 
    * @return Success
    */
    generateDashboardList(date: string | null | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/StrategicProductBacthQuery/GenerateDashboardList?";
        if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGenerateDashboardList(_response));
        });
    }

    protected processGenerateDashboardList(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param date (optional) 
    * @param type (optional) 
    * @param isViewAll (optional) 
    * @return Success
    */
    getAllDashboardData(date: string | null | undefined, type: string | null | undefined, isViewAll: boolean | null | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/StrategicProductBacthQuery/GetAllDashboardData?";
        if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
                if (type !== undefined)
            url_ += "type=" + encodeURIComponent("" + type) + "&";
                if (isViewAll !== undefined)
            url_ += "isViewAll=" + encodeURIComponent("" + isViewAll) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetAllDashboardData(_response));
        });
    }

    protected processGetAllDashboardData(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @return Success
    */
    exportProductHierarchy(): Promise<void> {
        let url_ = this.baseUrl + "/api/StrategicProductBacthQuery/ExportProductHierarchy";
            url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportProductHierarchy(_response));
        });
    }

    protected processExportProductHierarchy(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class SubPlatFormServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    querySubPlatFormlist(body: SubPlatFormInput[] | null | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/SubPlatForm/QuerySubPlatFormlist";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQuerySubPlatFormlist(_response));
        });
    }

    protected processQuerySubPlatFormlist(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param uPC (optional) 
    * @param soldTo (optional) 
    * @param markfor (optional) 
    * @return Success
    */
    querySubPlatForm(uPC: string | null | undefined, soldTo: string | null | undefined, markfor: string | null | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/SubPlatForm/QuerySubPlatForm?";
        if (uPC !== undefined)
            url_ += "UPC=" + encodeURIComponent("" + uPC) + "&";
                if (soldTo !== undefined)
            url_ += "soldTo=" + encodeURIComponent("" + soldTo) + "&";
                if (markfor !== undefined)
            url_ += "markfor=" + encodeURIComponent("" + markfor) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processQuerySubPlatForm(_response));
        });
    }

    protected processQuerySubPlatForm(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }
}

export class SysDictsServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @param showAll (optional) 
    * @return Success
    */
    getSysDictByCategory(dataCategory: SysDictDataCategory, showAll: boolean | undefined): Promise<SysDictDto[]> {
        let url_ = this.baseUrl + "/api/services/app/SysDicts/GetSysDictByCategory?";
        if (dataCategory === undefined || dataCategory === null)
        throw new Error("The parameter 'dataCategory' must be defined and cannot be null.");
        else
            url_ += "DataCategory=" + encodeURIComponent("" + dataCategory) + "&";
                
        
        
        
         if (showAll !== undefined && showAll !== null)
            url_ += "ShowAll=" + encodeURIComponent("" + showAll) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetSysDictByCategory(_response));
        });
    }

    protected processGetSysDictByCategory(response: AxiosResponse): Promise<SysDictDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SysDictDto.fromJS(item, _mappings));
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SysDictDto[]>(<any>null);
    }

    /**
    * @param filter (optional) 
    * @param keyNameFilter (optional) 
    * @param dataValueFilter (optional) 
    * @param descriptionFilter (optional) 
    * @param disabledFilter (optional) 
    * @param jsonDataFilter (optional) 
    * @param dataCategoryFilter (optional) 
    * @param parentId (optional) 
    * @param sorting (optional) 
    * @param skipCount (optional) 
    * @param maxResultCount (optional) 
    * @return Success
    */
    getAll(filter: string | null | undefined, keyNameFilter: string | null | undefined, dataValueFilter: string | null | undefined, descriptionFilter: string | null | undefined, disabledFilter: number | undefined, jsonDataFilter: string | null | undefined, dataCategoryFilter: number | undefined, parentId: number | null | undefined, sorting: string | null | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Promise<PagedResultDtoOfGetSysDictForViewDto> {
        let url_ = this.baseUrl + "/api/services/app/SysDicts/GetAll?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
                if (keyNameFilter !== undefined)
            url_ += "KeyNameFilter=" + encodeURIComponent("" + keyNameFilter) + "&";
                if (dataValueFilter !== undefined)
            url_ += "DataValueFilter=" + encodeURIComponent("" + dataValueFilter) + "&";
                if (descriptionFilter !== undefined)
            url_ += "DescriptionFilter=" + encodeURIComponent("" + descriptionFilter) + "&";
                
        
        
        
         if (disabledFilter !== undefined && disabledFilter !== null)
            url_ += "DisabledFilter=" + encodeURIComponent("" + disabledFilter) + "&";
                if (jsonDataFilter !== undefined)
            url_ += "JsonDataFilter=" + encodeURIComponent("" + jsonDataFilter) + "&";
                
        
        
        
         if (dataCategoryFilter !== undefined && dataCategoryFilter !== null)
            url_ += "DataCategoryFilter=" + encodeURIComponent("" + dataCategoryFilter) + "&";
                if (parentId !== undefined)
            url_ += "ParentId=" + encodeURIComponent("" + parentId) + "&";
                if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
                
        
        
        
         if (skipCount !== undefined && skipCount !== null)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
                
        
        
        
         if (maxResultCount !== undefined && maxResultCount !== null)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetAll(_response));
        });
    }

    protected processGetAll(response: AxiosResponse): Promise<PagedResultDtoOfGetSysDictForViewDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = PagedResultDtoOfGetSysDictForViewDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfGetSysDictForViewDto>(<any>null);
    }

    /**
    * @param id (optional) 
    * @return Success
    */
    getSysDictForView(id: number | undefined): Promise<GetSysDictForViewDto> {
        let url_ = this.baseUrl + "/api/services/app/SysDicts/GetSysDictForView?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetSysDictForView(_response));
        });
    }

    protected processGetSysDictForView(response: AxiosResponse): Promise<GetSysDictForViewDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = GetSysDictForViewDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetSysDictForViewDto>(<any>null);
    }

    /**
    * @param dicName (optional) 
    * @param camelCase (optional) 
    * @param body (optional) 
    * @return Success
    */
    excuteDictValueGet(dicName: string | null | undefined, camelCase: boolean | undefined, body: { [key: string]: any; } | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/SysDicts/ExcuteDictValue?";
        if (dicName !== undefined)
            url_ += "dicName=" + encodeURIComponent("" + dicName) + "&";
                
        
        
        
         if (camelCase !== undefined && camelCase !== null)
            url_ += "camelCase=" + encodeURIComponent("" + camelCase) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExcuteDictValueGet(_response));
        });
    }

    protected processExcuteDictValueGet(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param dicName (optional) 
    * @param camelCase (optional) 
    * @param body (optional) 
    * @return Success
    */
    excuteDictValuePost(dicName: string | null | undefined, camelCase: boolean | undefined, body: { [key: string]: any; } | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/SysDicts/ExcuteDictValue?";
        if (dicName !== undefined)
            url_ += "dicName=" + encodeURIComponent("" + dicName) + "&";
                
        
        
        
         if (camelCase !== undefined && camelCase !== null)
            url_ += "camelCase=" + encodeURIComponent("" + camelCase) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExcuteDictValuePost(_response));
        });
    }

    protected processExcuteDictValuePost(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param id (optional) 
    * @return Success
    */
    getSysDictForEdit(id: number | undefined): Promise<GetSysDictForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/SysDicts/GetSysDictForEdit?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetSysDictForEdit(_response));
        });
    }

    protected processGetSysDictForEdit(response: AxiosResponse): Promise<GetSysDictForEditOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = GetSysDictForEditOutput.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetSysDictForEditOutput>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    createOrEdit(body: CreateOrEditSysDictDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/SysDicts/CreateOrEdit";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCreateOrEdit(_response));
        });
    }

    protected processCreateOrEdit(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param ids (optional) 
    * @param dataCategory (optional) 
    * @return Success
    */
    delete(ids: number[] | null | undefined, dataCategory: SysDictDataCategory | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/SysDicts/Delete?";
        if (ids !== undefined)
            ids && ids.forEach(item => { url_ += "Ids=" +
            encodeURIComponent("" + item) + "&"; });
                
        
        
        
         if (dataCategory !== undefined && dataCategory !== null)
            url_ += "DataCategory=" + encodeURIComponent("" + dataCategory) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete(_response));
        });
    }

    protected processDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param filter (optional) 
    * @param keyNameFilter (optional) 
    * @param dataValueFilter (optional) 
    * @param descriptionFilter (optional) 
    * @param parentId (optional) 
    * @param disabledFilter (optional) 
    * @param jsonDataFilter (optional) 
    * @param dataCategoryFilter (optional) 
    * @return Success
    */
    getSysDictsToExcel(filter: string | null | undefined, keyNameFilter: string | null | undefined, dataValueFilter: string | null | undefined, descriptionFilter: string | null | undefined, parentId: number | null | undefined, disabledFilter: number | undefined, jsonDataFilter: string | null | undefined, dataCategoryFilter: number | undefined): Promise<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/SysDicts/GetSysDictsToExcel?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
                if (keyNameFilter !== undefined)
            url_ += "KeyNameFilter=" + encodeURIComponent("" + keyNameFilter) + "&";
                if (dataValueFilter !== undefined)
            url_ += "DataValueFilter=" + encodeURIComponent("" + dataValueFilter) + "&";
                if (descriptionFilter !== undefined)
            url_ += "DescriptionFilter=" + encodeURIComponent("" + descriptionFilter) + "&";
                if (parentId !== undefined)
            url_ += "ParentId=" + encodeURIComponent("" + parentId) + "&";
                
        
        
        
         if (disabledFilter !== undefined && disabledFilter !== null)
            url_ += "DisabledFilter=" + encodeURIComponent("" + disabledFilter) + "&";
                if (jsonDataFilter !== undefined)
            url_ += "JsonDataFilter=" + encodeURIComponent("" + jsonDataFilter) + "&";
                
        
        
        
         if (dataCategoryFilter !== undefined && dataCategoryFilter !== null)
            url_ += "DataCategoryFilter=" + encodeURIComponent("" + dataCategoryFilter) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetSysDictsToExcel(_response));
        });
    }

    protected processGetSysDictsToExcel(response: AxiosResponse): Promise<FileDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = FileDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileDto>(<any>null);
    }
}

export class SysDictsExcelExporterServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    exportToFile(body: GetSysDictForViewDto[] | null | undefined): Promise<FileDto> {
        let url_ = this.baseUrl + "/api/services/app/SysDictsExcelExporter/ExportToFile";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExportToFile(_response));
        });
    }

    protected processExportToFile(response: AxiosResponse): Promise<FileDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = FileDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileDto>(<any>null);
    }
}

export class TenantServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    create(body: CreateTenantDto | undefined): Promise<TenantDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/Create";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCreate(_response));
        });
    }

    protected processCreate(response: AxiosResponse): Promise<TenantDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = TenantDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TenantDto>(<any>null);
    }

    /**
    * @param id (optional) 
    * @return Success
    */
    delete(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/Delete?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete(_response));
        });
    }

    protected processDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param id (optional) 
    * @return Success
    */
    get(id: number | undefined): Promise<TenantDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/Get?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGet(_response));
        });
    }

    protected processGet(response: AxiosResponse): Promise<TenantDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = TenantDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TenantDto>(<any>null);
    }

    /**
    * @param keyword (optional) 
    * @param isActive (optional) 
    * @param skipCount (optional) 
    * @param maxResultCount (optional) 
    * @return Success
    */
    getAll(keyword: string | null | undefined, isActive: boolean | null | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Promise<PagedResultDtoOfTenantDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/GetAll?";
        if (keyword !== undefined)
            url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&";
                if (isActive !== undefined)
            url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&";
                
        
        
        
         if (skipCount !== undefined && skipCount !== null)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
                
        
        
        
         if (maxResultCount !== undefined && maxResultCount !== null)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetAll(_response));
        });
    }

    protected processGetAll(response: AxiosResponse): Promise<PagedResultDtoOfTenantDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = PagedResultDtoOfTenantDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfTenantDto>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    update(body: TenantDto | undefined): Promise<TenantDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/Update";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpdate(_response));
        });
    }

    protected processUpdate(response: AxiosResponse): Promise<TenantDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = TenantDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TenantDto>(<any>null);
    }
}

export class TokenAuthServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    authenticate(body: AuthenticateModel | undefined): Promise<AuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/Authenticate";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processAuthenticate(_response));
        });
    }

    protected processAuthenticate(response: AxiosResponse): Promise<AuthenticateResultModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = AuthenticateResultModel.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AuthenticateResultModel>(<any>null);
    }

    /**
    * @return Success
    */
    getExternalAuthenticationProviders(): Promise<ExternalLoginProviderInfoModel[]> {
        let url_ = this.baseUrl + "/api/TokenAuth/GetExternalAuthenticationProviders";
            url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetExternalAuthenticationProviders(_response));
        });
    }

    protected processGetExternalAuthenticationProviders(response: AxiosResponse): Promise<ExternalLoginProviderInfoModel[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ExternalLoginProviderInfoModel.fromJS(item, _mappings));
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ExternalLoginProviderInfoModel[]>(<any>null);
    }

    /**
    * @return Success
    */
    bathCreateUser(): Promise<void> {
        let url_ = this.baseUrl + "/api/TokenAuth/BathCreateUser";
            url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processBathCreateUser(_response));
        });
    }

    protected processBathCreateUser(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    externalAuthenticate(body: ExternalAuthenticateModel | undefined): Promise<ExternalAuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/ExternalAuthenticate";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processExternalAuthenticate(_response));
        });
    }

    protected processExternalAuthenticate(response: AxiosResponse): Promise<ExternalAuthenticateResultModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = ExternalAuthenticateResultModel.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ExternalAuthenticateResultModel>(<any>null);
    }
}

export class UserServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @param filter (optional) 
    * @param permissions (optional) 
    * @param role (optional) 
    * @param onlyLockedUsers (optional) 
    * @param sorting (optional) 
    * @param maxResultCount (optional) 
    * @param skipCount (optional) 
    * @return Success
    */
    getUsers(filter: string | null | undefined, permissions: string[] | null | undefined, role: number | null | undefined, onlyLockedUsers: boolean | undefined, sorting: string | null | undefined, maxResultCount: number | undefined, skipCount: number | undefined): Promise<PagedResultDtoOfUserListDto> {
        let url_ = this.baseUrl + "/api/services/app/User/GetUsers?";
        if (filter !== undefined)
            url_ += "Filter=" + encodeURIComponent("" + filter) + "&";
                if (permissions !== undefined)
            permissions && permissions.forEach(item => { url_ += "Permissions=" +
            encodeURIComponent("" + item) + "&"; });
                if (role !== undefined)
            url_ += "Role=" + encodeURIComponent("" + role) + "&";
                
        
        
        
         if (onlyLockedUsers !== undefined && onlyLockedUsers !== null)
            url_ += "OnlyLockedUsers=" + encodeURIComponent("" + onlyLockedUsers) + "&";
                if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&";
                
        
        
        
         if (maxResultCount !== undefined && maxResultCount !== null)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
                
        
        
        
         if (skipCount !== undefined && skipCount !== null)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetUsers(_response));
        });
    }

    protected processGetUsers(response: AxiosResponse): Promise<PagedResultDtoOfUserListDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = PagedResultDtoOfUserListDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfUserListDto>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    create(body: CreateUserDto | undefined): Promise<UserDto> {
        let url_ = this.baseUrl + "/api/services/app/User/Create";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCreate(_response));
        });
    }

    protected processCreate(response: AxiosResponse): Promise<UserDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = UserDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserDto>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    update(body: UserDto | undefined): Promise<UserDto> {
        let url_ = this.baseUrl + "/api/services/app/User/Update";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpdate(_response));
        });
    }

    protected processUpdate(response: AxiosResponse): Promise<UserDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = UserDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserDto>(<any>null);
    }

    /**
    * @param id (optional) 
    * @return Success
    */
    delete(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/User/Delete?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete(_response));
        });
    }

    protected processDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @return Success
    */
    getRoles(): Promise<ListResultDtoOfRoleDto> {
        let url_ = this.baseUrl + "/api/services/app/User/GetRoles";
            url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetRoles(_response));
        });
    }

    protected processGetRoles(response: AxiosResponse): Promise<ListResultDtoOfRoleDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = ListResultDtoOfRoleDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ListResultDtoOfRoleDto>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    changeLanguage(body: ChangeUserLanguageDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/User/ChangeLanguage";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processChangeLanguage(_response));
        });
    }

    protected processChangeLanguage(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    changePassword(body: ChangePasswordDto | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/api/services/app/User/ChangePassword";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processChangePassword(_response));
        });
    }

    protected processChangePassword(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = resultData200 !== undefined ? resultData200 : <any>null;
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    resetPassword(body: ResetPasswordDto | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/api/services/app/User/ResetPassword";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processResetPassword(_response));
        });
    }

    protected processResetPassword(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = resultData200 !== undefined ? resultData200 : <any>null;
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    /**
    * @param id (optional) 
    * @return Success
    */
    deleteUser(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/User/DeleteUser?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDeleteUser(_response));
        });
    }

    protected processDeleteUser(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    createOrUpdateUser(body: CreateOrUpdateUserInput | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/User/CreateOrUpdateUser";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCreateOrUpdateUser(_response));
        });
    }

    protected processCreateOrUpdateUser(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param id (optional) 
    * @return Success
    */
    getUserForEdit(id: number | null | undefined): Promise<GetUserForEditOutput> {
        let url_ = this.baseUrl + "/api/services/app/User/GetUserForEdit?";
        if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetUserForEdit(_response));
        });
    }

    protected processGetUserForEdit(response: AxiosResponse): Promise<GetUserForEditOutput> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = GetUserForEditOutput.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetUserForEditOutput>(<any>null);
    }

    /**
    * @param key (optional) 
    * @return Success
    */
    getUserSetting(key: string | null | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/services/app/User/GetUserSetting?";
        if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetUserSetting(_response));
        });
    }

    protected processGetUserSetting(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = resultData200 !== undefined ? resultData200 : <any>null;
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(<any>null);
    }

    /**
    * @param permissions (optional) 
    * @param hasAdmin (optional) 
    * @return Success
    */
    getPermissionsUsers(permissions: string[] | null | undefined, hasAdmin: boolean | undefined): Promise<UserListDto[]> {
        let url_ = this.baseUrl + "/api/services/app/User/GetPermissionsUsers?";
        if (permissions !== undefined)
            permissions && permissions.forEach(item => { url_ += "permissions=" +
            encodeURIComponent("" + item) + "&"; });
                
        
        
        
         if (hasAdmin !== undefined && hasAdmin !== null)
            url_ += "hasAdmin=" + encodeURIComponent("" + hasAdmin) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetPermissionsUsers(_response));
        });
    }

    protected processGetPermissionsUsers(response: AxiosResponse): Promise<UserListDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UserListDto.fromJS(item, _mappings));
            }
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserListDto[]>(<any>null);
    }

    /**
    * @param key (optional) 
    * @param body (optional) 
    * @return Success
    */
    updateUserSetting(key: string | null | undefined, body: string | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/services/app/User/UpdateUserSetting?";
        if (key !== undefined)
            url_ += "key=" + encodeURIComponent("" + key) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processUpdateUserSetting(_response));
        });
    }

    protected processUpdateUserSetting(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @param id (optional) 
    * @return Success
    */
    get(id: number | undefined): Promise<UserDto> {
        let url_ = this.baseUrl + "/api/services/app/User/Get?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGet(_response));
        });
    }

    protected processGet(response: AxiosResponse): Promise<UserDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = UserDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserDto>(<any>null);
    }

    /**
    * @param keyword (optional) 
    * @param isActive (optional) 
    * @param skipCount (optional) 
    * @param maxResultCount (optional) 
    * @return Success
    */
    getAll(keyword: string | null | undefined, isActive: boolean | null | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Promise<PagedResultDtoOfUserDto> {
        let url_ = this.baseUrl + "/api/services/app/User/GetAll?";
        if (keyword !== undefined)
            url_ += "Keyword=" + encodeURIComponent("" + keyword) + "&";
                if (isActive !== undefined)
            url_ += "IsActive=" + encodeURIComponent("" + isActive) + "&";
                
        
        
        
         if (skipCount !== undefined && skipCount !== null)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&";
                
        
        
        
         if (maxResultCount !== undefined && maxResultCount !== null)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetAll(_response));
        });
    }

    protected processGetAll(response: AxiosResponse): Promise<PagedResultDtoOfUserDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = PagedResultDtoOfUserDto.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagedResultDtoOfUserDto>(<any>null);
    }
}

export class VisitServiceProxy extends AbpServiceBase {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(instance?:AxiosInstance) {
        super();
        if(instance) {
            this.instance = instance;
        } else {
            this.instance = this.ajax;
        }
        this.baseUrl = ""
    }

    /**
    * @return Success
    */
    getVisitAll(): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/Visit/GetVisitAll";
            url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetVisitAll(_response));
        });
    }

    protected processGetVisitAll(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param keyWords (optional) 
    * @param startDate (optional) 
    * @param endDate (optional) 
    * @param pageIndex (optional) 
    * @param pageSize (optional) 
    * @return Success
    */
    getAll(keyWords: string | null | undefined, startDate: Date | null | undefined, endDate: Date | null | undefined, pageIndex: number | undefined, pageSize: number | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/Visit/GetAll?";
        if (keyWords !== undefined)
            url_ += "KeyWords=" + encodeURIComponent("" + keyWords) + "&";
                if (startDate !== undefined)
            url_ += "StartDate=" + encodeURIComponent(startDate ? "" +
            startDate.toJSON() : "") + "&";
                if (endDate !== undefined)
            url_ += "EndDate=" + encodeURIComponent(endDate ? "" +
            endDate.toJSON() : "") + "&";
                
        
        
        
         if (pageIndex !== undefined && pageIndex !== null)
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&";
                
        
        
        
         if (pageSize !== undefined && pageSize !== null)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetAll(_response));
        });
    }

    protected processGetAll(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param body (optional) 
    * @return Success
    */
    createOrUpdateVisit(body: ScheduleModel | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/Visit/CreateOrUpdateVisit";
            url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json", 
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processCreateOrUpdateVisit(_response));
        });
    }

    protected processCreateOrUpdateVisit(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param schedule_ID (optional) 
    * @return Success
    */
    getSchedule(schedule_ID: number | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/Visit/GetSchedule?";
        
        
        
        
         if (schedule_ID !== undefined && schedule_ID !== null)
            url_ += "schedule_ID=" + encodeURIComponent("" + schedule_ID) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetSchedule(_response));
        });
    }

    protected processGetSchedule(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param schedule_ID (optional) 
    * @return Success
    */
    delete(schedule_ID: number | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/Visit/Delete?";
        
        
        
        
         if (schedule_ID !== undefined && schedule_ID !== null)
            url_ += "schedule_ID=" + encodeURIComponent("" + schedule_ID) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processDelete(_response));
        });
    }

    protected processDelete(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @return Success
    */
    getIndustry(): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/Visit/GetIndustry";
            url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetIndustry(_response));
        });
    }

    protected processGetIndustry(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param id (optional) 
    * @return Success
    */
    getVisit(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Visit/GetVisit?";
        
        
        
        
         if (id !== undefined && id !== null)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetVisit(_response));
        });
    }

    protected processGetVisit(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data.result;
                                                                                                                                                                                            return Promise.resolve
                                                                                    <void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
    * @return Success
    */
    getVisitType(): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/Visit/GetVisitType";
            url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetVisitType(_response));
        });
    }

    protected processGetVisitType(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @return Success
    */
    getSalesOrg(): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/Visit/GetSalesOrg";
            url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetSalesOrg(_response));
        });
    }

    protected processGetSalesOrg(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }

    /**
    * @param contact_LinkedTo (optional) 
    * @param contact_LinkedTo_Prefix (optional) 
    * @return Success
    */
    getContacts(contact_LinkedTo: string | null | undefined, contact_LinkedTo_Prefix: string | null | undefined): Promise<APIResult> {
        let url_ = this.baseUrl + "/api/Visit/GetContacts?";
        if (contact_LinkedTo !== undefined)
            url_ += "contact_LinkedTo=" + encodeURIComponent("" + contact_LinkedTo) + "&";
                if (contact_LinkedTo_Prefix !== undefined)
            url_ += "contact_LinkedTo_Prefix=" + encodeURIComponent("" + contact_LinkedTo_Prefix) + "&";
                    url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.processGetContacts(_response));
        });
    }

    protected processGetContacts(response: AxiosResponse): Promise<APIResult> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            const _responseText = response.data.result;
                                                    let result200: any = null;
                                                    let resultData200 = _responseText;
                                result200 = APIResult.fromJS(resultData200, _mappings);
                                                                                                                                        return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data.result;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<APIResult>(<any>null);
    }
}

export class ImpersonateInput {
    tenantId!: number | null;
    userId!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"] !== undefined ? _data["tenantId"] : <any>null;
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): ImpersonateInput {
        data = typeof data === 'object' ? data : {};
        return createInstance<ImpersonateInput>(data, _mappings, ImpersonateInput);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        return data; 
    }
}

export class ImpersonateOutput {
    impersonationToken!: string | null;
    tenancyName!: string | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.impersonationToken = _data["impersonationToken"] !== undefined ? _data["impersonationToken"] : <any>null;
            this.tenancyName = _data["tenancyName"] !== undefined ? _data["tenancyName"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): ImpersonateOutput {
        data = typeof data === 'object' ? data : {};
        return createInstance<ImpersonateOutput>(data, _mappings, ImpersonateOutput);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["impersonationToken"] = this.impersonationToken !== undefined ? this.impersonationToken : <any>null;
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : <any>null;
        return data; 
    }
}

export class IsTenantAvailableInput {
    tenancyName!: string;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.tenancyName = _data["tenancyName"] !== undefined ? _data["tenancyName"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): IsTenantAvailableInput {
        data = typeof data === 'object' ? data : {};
        return createInstance<IsTenantAvailableInput>(data, _mappings, IsTenantAvailableInput);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : <any>null;
        return data; 
    }
}

export enum TenantAvailabilityState {
    Available = 1,
    InActive = 2,
    NotFound = 3,
}

export class IsTenantAvailableOutput {
    state!: TenantAvailabilityState;
    tenantId!: number | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.state = _data["state"] !== undefined ? _data["state"] : <any>null;
            this.tenantId = _data["tenantId"] !== undefined ? _data["tenantId"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): IsTenantAvailableOutput {
        data = typeof data === 'object' ? data : {};
        return createInstance<IsTenantAvailableOutput>(data, _mappings, IsTenantAvailableOutput);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["state"] = this.state !== undefined ? this.state : <any>null;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : <any>null;
        return data; 
    }
}

export class RegisterInput {
    name!: string;
    surname!: string;
    userName!: string;
    emailAddress!: string;
    password!: string;
    captchaResponse!: string | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.surname = _data["surname"] !== undefined ? _data["surname"] : <any>null;
            this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
            this.emailAddress = _data["emailAddress"] !== undefined ? _data["emailAddress"] : <any>null;
            this.password = _data["password"] !== undefined ? _data["password"] : <any>null;
            this.captchaResponse = _data["captchaResponse"] !== undefined ? _data["captchaResponse"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): RegisterInput {
        data = typeof data === 'object' ? data : {};
        return createInstance<RegisterInput>(data, _mappings, RegisterInput);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["surname"] = this.surname !== undefined ? this.surname : <any>null;
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        data["captchaResponse"] = this.captchaResponse !== undefined ? this.captchaResponse : <any>null;
        return data; 
    }
}

export class RegisterOutput {
    canLogin!: boolean;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.canLogin = _data["canLogin"] !== undefined ? _data["canLogin"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): RegisterOutput {
        data = typeof data === 'object' ? data : {};
        return createInstance<RegisterOutput>(data, _mappings, RegisterOutput);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["canLogin"] = this.canLogin !== undefined ? this.canLogin : <any>null;
        return data; 
    }
}

export class ATPFFCPriceDto {
    vendorCode!: string | null;
    countryOfDeparture!: string | null;
    supplier!: string | null;
    importFreightRate!: number | null;
    declareFreightRate!: number | null;
    tariffRate!: number | null;
    additionalTariffRate!: number | null;
    validFrom!: Date | null;
    validTo!: Date | null;
    mark!: string | null;
    id!: number | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.vendorCode = _data["vendorCode"] !== undefined ? _data["vendorCode"] : <any>null;
            this.countryOfDeparture = _data["countryOfDeparture"] !== undefined ? _data["countryOfDeparture"] : <any>null;
            this.supplier = _data["supplier"] !== undefined ? _data["supplier"] : <any>null;
            this.importFreightRate = _data["importFreightRate"] !== undefined ? _data["importFreightRate"] : <any>null;
            this.declareFreightRate = _data["declareFreightRate"] !== undefined ? _data["declareFreightRate"] : <any>null;
            this.tariffRate = _data["tariffRate"] !== undefined ? _data["tariffRate"] : <any>null;
            this.additionalTariffRate = _data["additionalTariffRate"] !== undefined ? _data["additionalTariffRate"] : <any>null;
            this.validFrom = _data["validFrom"] ? new Date(_data["validFrom"].toString()) : <any>null;
            this.validTo = _data["validTo"] ? new Date(_data["validTo"].toString()) : <any>null;
            this.mark = _data["mark"] !== undefined ? _data["mark"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): ATPFFCPriceDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<ATPFFCPriceDto>(data, _mappings, ATPFFCPriceDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vendorCode"] = this.vendorCode !== undefined ? this.vendorCode : <any>null;
        data["countryOfDeparture"] = this.countryOfDeparture !== undefined ? this.countryOfDeparture : <any>null;
        data["supplier"] = this.supplier !== undefined ? this.supplier : <any>null;
        data["importFreightRate"] = this.importFreightRate !== undefined ? this.importFreightRate : <any>null;
        data["declareFreightRate"] = this.declareFreightRate !== undefined ? this.declareFreightRate : <any>null;
        data["tariffRate"] = this.tariffRate !== undefined ? this.tariffRate : <any>null;
        data["additionalTariffRate"] = this.additionalTariffRate !== undefined ? this.additionalTariffRate : <any>null;
        data["validFrom"] = this.validFrom ? this.validFrom.toISOString() : <any>null;
        data["validTo"] = this.validTo ? this.validTo.toISOString() : <any>null;
        data["mark"] = this.mark !== undefined ? this.mark : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class Currency {
    currencyName!: string | null;
    exchangeRate!: number;
    validFrom!: Date;
    validTo!: Date;
    tenantId!: number | null;
    isDeleted!: boolean;
    deleterUserId!: number | null;
    deletionTime!: Date | null;
    lastModificationTime!: Date | null;
    lastModifierUserId!: number | null;
    creationTime!: Date;
    creatorUserId!: number | null;
    id!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.currencyName = _data["currencyName"] !== undefined ? _data["currencyName"] : <any>null;
            this.exchangeRate = _data["exchangeRate"] !== undefined ? _data["exchangeRate"] : <any>null;
            this.validFrom = _data["validFrom"] ? new Date(_data["validFrom"].toString()) : <any>null;
            this.validTo = _data["validTo"] ? new Date(_data["validTo"].toString()) : <any>null;
            this.tenantId = _data["tenantId"] !== undefined ? _data["tenantId"] : <any>null;
            this.isDeleted = _data["isDeleted"] !== undefined ? _data["isDeleted"] : <any>null;
            this.deleterUserId = _data["deleterUserId"] !== undefined ? _data["deleterUserId"] : <any>null;
            this.deletionTime = _data["deletionTime"] ? new Date(_data["deletionTime"].toString()) : <any>null;
            this.lastModificationTime = _data["lastModificationTime"] ? new Date(_data["lastModificationTime"].toString()) : <any>null;
            this.lastModifierUserId = _data["lastModifierUserId"] !== undefined ? _data["lastModifierUserId"] : <any>null;
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>null;
            this.creatorUserId = _data["creatorUserId"] !== undefined ? _data["creatorUserId"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): Currency {
        data = typeof data === 'object' ? data : {};
        return createInstance<Currency>(data, _mappings, Currency);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["currencyName"] = this.currencyName !== undefined ? this.currencyName : <any>null;
        data["exchangeRate"] = this.exchangeRate !== undefined ? this.exchangeRate : <any>null;
        data["validFrom"] = this.validFrom ? this.validFrom.toISOString() : <any>null;
        data["validTo"] = this.validTo ? this.validTo.toISOString() : <any>null;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : <any>null;
        data["isDeleted"] = this.isDeleted !== undefined ? this.isDeleted : <any>null;
        data["deleterUserId"] = this.deleterUserId !== undefined ? this.deleterUserId : <any>null;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>null;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>null;
        data["lastModifierUserId"] = this.lastModifierUserId !== undefined ? this.lastModifierUserId : <any>null;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>null;
        data["creatorUserId"] = this.creatorUserId !== undefined ? this.creatorUserId : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class AuditLogListDto {
    userId!: number | null;
    userName!: string | null;
    impersonatorTenantId!: number | null;
    impersonatorUserId!: number | null;
    serviceName!: string | null;
    methodName!: string | null;
    parameters!: string | null;
    executionTime!: Date;
    executionDuration!: number;
    clientIpAddress!: string | null;
    clientName!: string | null;
    browserInfo!: string | null;
    exception!: string | null;
    customData!: string | null;
    id!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
            this.impersonatorTenantId = _data["impersonatorTenantId"] !== undefined ? _data["impersonatorTenantId"] : <any>null;
            this.impersonatorUserId = _data["impersonatorUserId"] !== undefined ? _data["impersonatorUserId"] : <any>null;
            this.serviceName = _data["serviceName"] !== undefined ? _data["serviceName"] : <any>null;
            this.methodName = _data["methodName"] !== undefined ? _data["methodName"] : <any>null;
            this.parameters = _data["parameters"] !== undefined ? _data["parameters"] : <any>null;
            this.executionTime = _data["executionTime"] ? new Date(_data["executionTime"].toString()) : <any>null;
            this.executionDuration = _data["executionDuration"] !== undefined ? _data["executionDuration"] : <any>null;
            this.clientIpAddress = _data["clientIpAddress"] !== undefined ? _data["clientIpAddress"] : <any>null;
            this.clientName = _data["clientName"] !== undefined ? _data["clientName"] : <any>null;
            this.browserInfo = _data["browserInfo"] !== undefined ? _data["browserInfo"] : <any>null;
            this.exception = _data["exception"] !== undefined ? _data["exception"] : <any>null;
            this.customData = _data["customData"] !== undefined ? _data["customData"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): AuditLogListDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<AuditLogListDto>(data, _mappings, AuditLogListDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["impersonatorTenantId"] = this.impersonatorTenantId !== undefined ? this.impersonatorTenantId : <any>null;
        data["impersonatorUserId"] = this.impersonatorUserId !== undefined ? this.impersonatorUserId : <any>null;
        data["serviceName"] = this.serviceName !== undefined ? this.serviceName : <any>null;
        data["methodName"] = this.methodName !== undefined ? this.methodName : <any>null;
        data["parameters"] = this.parameters !== undefined ? this.parameters : <any>null;
        data["executionTime"] = this.executionTime ? this.executionTime.toISOString() : <any>null;
        data["executionDuration"] = this.executionDuration !== undefined ? this.executionDuration : <any>null;
        data["clientIpAddress"] = this.clientIpAddress !== undefined ? this.clientIpAddress : <any>null;
        data["clientName"] = this.clientName !== undefined ? this.clientName : <any>null;
        data["browserInfo"] = this.browserInfo !== undefined ? this.browserInfo : <any>null;
        data["exception"] = this.exception !== undefined ? this.exception : <any>null;
        data["customData"] = this.customData !== undefined ? this.customData : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class PagedResultDtoOfAuditLogListDto {
    totalCount!: number;
    items!: AuditLogListDto[] | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"] !== undefined ? _data["totalCount"] : <any>null;
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(AuditLogListDto.fromJS(item, _mappings));
            }
        }
    }

    static fromJS(data: any, _mappings?: any): PagedResultDtoOfAuditLogListDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<PagedResultDtoOfAuditLogListDto>(data, _mappings, PagedResultDtoOfAuditLogListDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : <any>null;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export class FileDto {
    fileName!: string;
    fileType!: string | null;
    fileToken!: string;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.fileName = _data["fileName"] !== undefined ? _data["fileName"] : <any>null;
            this.fileType = _data["fileType"] !== undefined ? _data["fileType"] : <any>null;
            this.fileToken = _data["fileToken"] !== undefined ? _data["fileToken"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): FileDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<FileDto>(data, _mappings, FileDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileName"] = this.fileName !== undefined ? this.fileName : <any>null;
        data["fileType"] = this.fileType !== undefined ? this.fileType : <any>null;
        data["fileToken"] = this.fileToken !== undefined ? this.fileToken : <any>null;
        return data; 
    }
}

export class NameValueDto {
    name!: string | null;
    value!: string | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.value = _data["value"] !== undefined ? _data["value"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): NameValueDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<NameValueDto>(data, _mappings, NameValueDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        return data; 
    }
}

export enum EntityChangeType {
    Created = 0,
    Updated = 1,
    Deleted = 2,
}

export class EntityChangeListDto {
    userId!: number | null;
    userName!: string | null;
    changeTime!: Date;
    entityTypeFullName!: string | null;
    changeType!: EntityChangeType;
    readonly changeTypeName!: string | null;
    entityChangeSetId!: number;
    id!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
            this.changeTime = _data["changeTime"] ? new Date(_data["changeTime"].toString()) : <any>null;
            this.entityTypeFullName = _data["entityTypeFullName"] !== undefined ? _data["entityTypeFullName"] : <any>null;
            this.changeType = _data["changeType"] !== undefined ? _data["changeType"] : <any>null;
            (<any>this).changeTypeName = _data["changeTypeName"] !== undefined ? _data["changeTypeName"] : <any>null;
            this.entityChangeSetId = _data["entityChangeSetId"] !== undefined ? _data["entityChangeSetId"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): EntityChangeListDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<EntityChangeListDto>(data, _mappings, EntityChangeListDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["changeTime"] = this.changeTime ? this.changeTime.toISOString() : <any>null;
        data["entityTypeFullName"] = this.entityTypeFullName !== undefined ? this.entityTypeFullName : <any>null;
        data["changeType"] = this.changeType !== undefined ? this.changeType : <any>null;
        data["changeTypeName"] = this.changeTypeName !== undefined ? this.changeTypeName : <any>null;
        data["entityChangeSetId"] = this.entityChangeSetId !== undefined ? this.entityChangeSetId : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class PagedResultDtoOfEntityChangeListDto {
    totalCount!: number;
    items!: EntityChangeListDto[] | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"] !== undefined ? _data["totalCount"] : <any>null;
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(EntityChangeListDto.fromJS(item, _mappings));
            }
        }
    }

    static fromJS(data: any, _mappings?: any): PagedResultDtoOfEntityChangeListDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<PagedResultDtoOfEntityChangeListDto>(data, _mappings, PagedResultDtoOfEntityChangeListDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : <any>null;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export class EntityPropertyChangeDto {
    entityChangeId!: number;
    newValue!: string | null;
    originalValue!: string | null;
    propertyName!: string | null;
    propertyTypeFullName!: string | null;
    tenantId!: number | null;
    id!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.entityChangeId = _data["entityChangeId"] !== undefined ? _data["entityChangeId"] : <any>null;
            this.newValue = _data["newValue"] !== undefined ? _data["newValue"] : <any>null;
            this.originalValue = _data["originalValue"] !== undefined ? _data["originalValue"] : <any>null;
            this.propertyName = _data["propertyName"] !== undefined ? _data["propertyName"] : <any>null;
            this.propertyTypeFullName = _data["propertyTypeFullName"] !== undefined ? _data["propertyTypeFullName"] : <any>null;
            this.tenantId = _data["tenantId"] !== undefined ? _data["tenantId"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): EntityPropertyChangeDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<EntityPropertyChangeDto>(data, _mappings, EntityPropertyChangeDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["entityChangeId"] = this.entityChangeId !== undefined ? this.entityChangeId : <any>null;
        data["newValue"] = this.newValue !== undefined ? this.newValue : <any>null;
        data["originalValue"] = this.originalValue !== undefined ? this.originalValue : <any>null;
        data["propertyName"] = this.propertyName !== undefined ? this.propertyName : <any>null;
        data["propertyTypeFullName"] = this.propertyTypeFullName !== undefined ? this.propertyTypeFullName : <any>null;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class DropDownList {
    id!: number;
    language_Id!: string | null;
    dropdown_Type!: number | null;
    dropdown_Desc!: string | null;
    selecT_Index!: number | null;
    selecT_Value!: string | null;
    selecT_Text!: string | null;
    extData!: string | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.language_Id = _data["language_Id"] !== undefined ? _data["language_Id"] : <any>null;
            this.dropdown_Type = _data["dropdown_Type"] !== undefined ? _data["dropdown_Type"] : <any>null;
            this.dropdown_Desc = _data["dropdown_Desc"] !== undefined ? _data["dropdown_Desc"] : <any>null;
            this.selecT_Index = _data["selecT_Index"] !== undefined ? _data["selecT_Index"] : <any>null;
            this.selecT_Value = _data["selecT_Value"] !== undefined ? _data["selecT_Value"] : <any>null;
            this.selecT_Text = _data["selecT_Text"] !== undefined ? _data["selecT_Text"] : <any>null;
            this.extData = _data["extData"] !== undefined ? _data["extData"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): DropDownList {
        data = typeof data === 'object' ? data : {};
        return createInstance<DropDownList>(data, _mappings, DropDownList);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["language_Id"] = this.language_Id !== undefined ? this.language_Id : <any>null;
        data["dropdown_Type"] = this.dropdown_Type !== undefined ? this.dropdown_Type : <any>null;
        data["dropdown_Desc"] = this.dropdown_Desc !== undefined ? this.dropdown_Desc : <any>null;
        data["selecT_Index"] = this.selecT_Index !== undefined ? this.selecT_Index : <any>null;
        data["selecT_Value"] = this.selecT_Value !== undefined ? this.selecT_Value : <any>null;
        data["selecT_Text"] = this.selecT_Text !== undefined ? this.selecT_Text : <any>null;
        data["extData"] = this.extData !== undefined ? this.extData : <any>null;
        return data; 
    }
}

export class PlexusFileData {
    moduleName!: string | null;
    fkName!: string | null;
    fkValue!: string | null;
    ids!: number[] | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.moduleName = _data["moduleName"] !== undefined ? _data["moduleName"] : <any>null;
            this.fkName = _data["fkName"] !== undefined ? _data["fkName"] : <any>null;
            this.fkValue = _data["fkValue"] !== undefined ? _data["fkValue"] : <any>null;
            if (Array.isArray(_data["ids"])) {
                this.ids = [] as any;
                for (let item of _data["ids"])
                    this.ids!.push(item);
            }
        }
    }

    static fromJS(data: any, _mappings?: any): PlexusFileData {
        data = typeof data === 'object' ? data : {};
        return createInstance<PlexusFileData>(data, _mappings, PlexusFileData);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["moduleName"] = this.moduleName !== undefined ? this.moduleName : <any>null;
        data["fkName"] = this.fkName !== undefined ? this.fkName : <any>null;
        data["fkValue"] = this.fkValue !== undefined ? this.fkValue : <any>null;
        if (Array.isArray(this.ids)) {
            data["ids"] = [];
            for (let item of this.ids)
                data["ids"].push(item);
        }
        return data; 
    }
}

export class ChangeUiThemeInput {
    theme!: string;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.theme = _data["theme"] !== undefined ? _data["theme"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): ChangeUiThemeInput {
        data = typeof data === 'object' ? data : {};
        return createInstance<ChangeUiThemeInput>(data, _mappings, ChangeUiThemeInput);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["theme"] = this.theme !== undefined ? this.theme : <any>null;
        return data; 
    }
}

export class APIResult {
    data!: any | null;
    success!: boolean;
    msg!: string | null;
    error!: string | null;
    readonly errorMsg!: string | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.data = _data["data"] !== undefined ? _data["data"] : <any>null;
            this.success = _data["success"] !== undefined ? _data["success"] : <any>null;
            this.msg = _data["msg"] !== undefined ? _data["msg"] : <any>null;
            this.error = _data["error"] !== undefined ? _data["error"] : <any>null;
            (<any>this).errorMsg = _data["errorMsg"] !== undefined ? _data["errorMsg"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): APIResult {
        data = typeof data === 'object' ? data : {};
        return createInstance<APIResult>(data, _mappings, APIResult);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data !== undefined ? this.data : <any>null;
        data["success"] = this.success !== undefined ? this.success : <any>null;
        data["msg"] = this.msg !== undefined ? this.msg : <any>null;
        data["error"] = this.error !== undefined ? this.error : <any>null;
        data["errorMsg"] = this.errorMsg !== undefined ? this.errorMsg : <any>null;
        return data; 
    }
}

export class SearchCustomerInput {
    soldToNum!: string | null;
    type!: string | null;
    maxResultCount!: number;
    skipCount!: number;
    filter!: string | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.soldToNum = _data["soldToNum"] !== undefined ? _data["soldToNum"] : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.maxResultCount = _data["maxResultCount"] !== undefined ? _data["maxResultCount"] : <any>null;
            this.skipCount = _data["skipCount"] !== undefined ? _data["skipCount"] : <any>null;
            this.filter = _data["filter"] !== undefined ? _data["filter"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): SearchCustomerInput {
        data = typeof data === 'object' ? data : {};
        return createInstance<SearchCustomerInput>(data, _mappings, SearchCustomerInput);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["soldToNum"] = this.soldToNum !== undefined ? this.soldToNum : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["maxResultCount"] = this.maxResultCount !== undefined ? this.maxResultCount : <any>null;
        data["skipCount"] = this.skipCount !== undefined ? this.skipCount : <any>null;
        data["filter"] = this.filter !== undefined ? this.filter : <any>null;
        return data; 
    }
}

export class SearcCustResult {
    custNum!: string | null;
    custName!: string | null;
    salesOffice!: string | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.custNum = _data["custNum"] !== undefined ? _data["custNum"] : <any>null;
            this.custName = _data["custName"] !== undefined ? _data["custName"] : <any>null;
            this.salesOffice = _data["salesOffice"] !== undefined ? _data["salesOffice"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): SearcCustResult {
        data = typeof data === 'object' ? data : {};
        return createInstance<SearcCustResult>(data, _mappings, SearcCustResult);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["custNum"] = this.custNum !== undefined ? this.custNum : <any>null;
        data["custName"] = this.custName !== undefined ? this.custName : <any>null;
        data["salesOffice"] = this.salesOffice !== undefined ? this.salesOffice : <any>null;
        return data; 
    }
}

export class QueryCustomerSalesParams {
    startTime!: string | null;
    endTime!: string | null;
    queryDate!: string[] | null;
    keyWord!: string | null;
    publiseStatusFilter!: number[] | null;
    pageIndex!: number;
    pageSize!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.startTime = _data["startTime"] !== undefined ? _data["startTime"] : <any>null;
            this.endTime = _data["endTime"] !== undefined ? _data["endTime"] : <any>null;
            if (Array.isArray(_data["queryDate"])) {
                this.queryDate = [] as any;
                for (let item of _data["queryDate"])
                    this.queryDate!.push(item);
            }
            this.keyWord = _data["keyWord"] !== undefined ? _data["keyWord"] : <any>null;
            if (Array.isArray(_data["publiseStatusFilter"])) {
                this.publiseStatusFilter = [] as any;
                for (let item of _data["publiseStatusFilter"])
                    this.publiseStatusFilter!.push(item);
            }
            this.pageIndex = _data["pageIndex"] !== undefined ? _data["pageIndex"] : <any>null;
            this.pageSize = _data["pageSize"] !== undefined ? _data["pageSize"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): QueryCustomerSalesParams {
        data = typeof data === 'object' ? data : {};
        return createInstance<QueryCustomerSalesParams>(data, _mappings, QueryCustomerSalesParams);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["startTime"] = this.startTime !== undefined ? this.startTime : <any>null;
        data["endTime"] = this.endTime !== undefined ? this.endTime : <any>null;
        if (Array.isArray(this.queryDate)) {
            data["queryDate"] = [];
            for (let item of this.queryDate)
                data["queryDate"].push(item);
        }
        data["keyWord"] = this.keyWord !== undefined ? this.keyWord : <any>null;
        if (Array.isArray(this.publiseStatusFilter)) {
            data["publiseStatusFilter"] = [];
            for (let item of this.publiseStatusFilter)
                data["publiseStatusFilter"].push(item);
        }
        data["pageIndex"] = this.pageIndex !== undefined ? this.pageIndex : <any>null;
        data["pageSize"] = this.pageSize !== undefined ? this.pageSize : <any>null;
        return data; 
    }
}

export class Customer_Salse_Mapping {
    id!: number;
    custNum!: string | null;
    repNum!: string | null;
    validFrom!: Date;
    validTo!: Date | null;
    isDeleted!: boolean | null;
    createdDate!: Date | null;
    lastUpdateDate!: Date | null;
    isinvalid!: boolean | null;
    invalidDate!: Date | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.custNum = _data["custNum"] !== undefined ? _data["custNum"] : <any>null;
            this.repNum = _data["repNum"] !== undefined ? _data["repNum"] : <any>null;
            this.validFrom = _data["validFrom"] ? new Date(_data["validFrom"].toString()) : <any>null;
            this.validTo = _data["validTo"] ? new Date(_data["validTo"].toString()) : <any>null;
            this.isDeleted = _data["isDeleted"] !== undefined ? _data["isDeleted"] : <any>null;
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>null;
            this.lastUpdateDate = _data["lastUpdateDate"] ? new Date(_data["lastUpdateDate"].toString()) : <any>null;
            this.isinvalid = _data["isinvalid"] !== undefined ? _data["isinvalid"] : <any>null;
            this.invalidDate = _data["invalidDate"] ? new Date(_data["invalidDate"].toString()) : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): Customer_Salse_Mapping {
        data = typeof data === 'object' ? data : {};
        return createInstance<Customer_Salse_Mapping>(data, _mappings, Customer_Salse_Mapping);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["custNum"] = this.custNum !== undefined ? this.custNum : <any>null;
        data["repNum"] = this.repNum !== undefined ? this.repNum : <any>null;
        data["validFrom"] = this.validFrom ? this.validFrom.toISOString() : <any>null;
        data["validTo"] = this.validTo ? this.validTo.toISOString() : <any>null;
        data["isDeleted"] = this.isDeleted !== undefined ? this.isDeleted : <any>null;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>null;
        data["lastUpdateDate"] = this.lastUpdateDate ? this.lastUpdateDate.toISOString() : <any>null;
        data["isinvalid"] = this.isinvalid !== undefined ? this.isinvalid : <any>null;
        data["invalidDate"] = this.invalidDate ? this.invalidDate.toISOString() : <any>null;
        return data; 
    }
}

export class ImportCustomerSalesMapping {
    custNum!: string | null;
    repNum!: string | null;
    validFrom!: Date;
    validTo!: Date | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.custNum = _data["custNum"] !== undefined ? _data["custNum"] : <any>null;
            this.repNum = _data["repNum"] !== undefined ? _data["repNum"] : <any>null;
            this.validFrom = _data["validFrom"] ? new Date(_data["validFrom"].toString()) : <any>null;
            this.validTo = _data["validTo"] ? new Date(_data["validTo"].toString()) : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): ImportCustomerSalesMapping {
        data = typeof data === 'object' ? data : {};
        return createInstance<ImportCustomerSalesMapping>(data, _mappings, ImportCustomerSalesMapping);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["custNum"] = this.custNum !== undefined ? this.custNum : <any>null;
        data["repNum"] = this.repNum !== undefined ? this.repNum : <any>null;
        data["validFrom"] = this.validFrom ? this.validFrom.toISOString() : <any>null;
        data["validTo"] = this.validTo ? this.validTo.toISOString() : <any>null;
        return data; 
    }
}

export class UpdateNewCustomerInput {
    id!: number;
    enableStatus!: number;
    customerFalg!: string | null;
    custNum!: string | null;
    changeBy_SGID!: string | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.enableStatus = _data["enableStatus"] !== undefined ? _data["enableStatus"] : <any>null;
            this.customerFalg = _data["customerFalg"] !== undefined ? _data["customerFalg"] : <any>null;
            this.custNum = _data["custNum"] !== undefined ? _data["custNum"] : <any>null;
            this.changeBy_SGID = _data["changeBy_SGID"] !== undefined ? _data["changeBy_SGID"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): UpdateNewCustomerInput {
        data = typeof data === 'object' ? data : {};
        return createInstance<UpdateNewCustomerInput>(data, _mappings, UpdateNewCustomerInput);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["enableStatus"] = this.enableStatus !== undefined ? this.enableStatus : <any>null;
        data["customerFalg"] = this.customerFalg !== undefined ? this.customerFalg : <any>null;
        data["custNum"] = this.custNum !== undefined ? this.custNum : <any>null;
        data["changeBy_SGID"] = this.changeBy_SGID !== undefined ? this.changeBy_SGID : <any>null;
        return data; 
    }
}

export class CustomerUnionDto {
    id!: number;
    unionFlag!: string | null;
    customerCode!: string | null;
    customerName!: string | null;
    unionOn!: string | null;
    unionOnName!: string | null;
    aera!: string | null;
    remark!: string | null;
    soldTo!: string | null;
    condition!: string | null;
    from!: Date | null;
    to!: Date | null;
    isDeledted!: boolean;
    updateMethod!: string | null;
    readonly currentStatus!: boolean;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.unionFlag = _data["unionFlag"] !== undefined ? _data["unionFlag"] : <any>null;
            this.customerCode = _data["customerCode"] !== undefined ? _data["customerCode"] : <any>null;
            this.customerName = _data["customerName"] !== undefined ? _data["customerName"] : <any>null;
            this.unionOn = _data["unionOn"] !== undefined ? _data["unionOn"] : <any>null;
            this.unionOnName = _data["unionOnName"] !== undefined ? _data["unionOnName"] : <any>null;
            this.aera = _data["aera"] !== undefined ? _data["aera"] : <any>null;
            this.remark = _data["remark"] !== undefined ? _data["remark"] : <any>null;
            this.soldTo = _data["soldTo"] !== undefined ? _data["soldTo"] : <any>null;
            this.condition = _data["condition"] !== undefined ? _data["condition"] : <any>null;
            this.from = _data["from"] ? new Date(_data["from"].toString()) : <any>null;
            this.to = _data["to"] ? new Date(_data["to"].toString()) : <any>null;
            this.isDeledted = _data["isDeledted"] !== undefined ? _data["isDeledted"] : <any>null;
            this.updateMethod = _data["updateMethod"] !== undefined ? _data["updateMethod"] : <any>null;
            (<any>this).currentStatus = _data["currentStatus"] !== undefined ? _data["currentStatus"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): CustomerUnionDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<CustomerUnionDto>(data, _mappings, CustomerUnionDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["unionFlag"] = this.unionFlag !== undefined ? this.unionFlag : <any>null;
        data["customerCode"] = this.customerCode !== undefined ? this.customerCode : <any>null;
        data["customerName"] = this.customerName !== undefined ? this.customerName : <any>null;
        data["unionOn"] = this.unionOn !== undefined ? this.unionOn : <any>null;
        data["unionOnName"] = this.unionOnName !== undefined ? this.unionOnName : <any>null;
        data["aera"] = this.aera !== undefined ? this.aera : <any>null;
        data["remark"] = this.remark !== undefined ? this.remark : <any>null;
        data["soldTo"] = this.soldTo !== undefined ? this.soldTo : <any>null;
        data["condition"] = this.condition !== undefined ? this.condition : <any>null;
        data["from"] = this.from ? this.from.toISOString() : <any>null;
        data["to"] = this.to ? this.to.toISOString() : <any>null;
        data["isDeledted"] = this.isDeledted !== undefined ? this.isDeledted : <any>null;
        data["updateMethod"] = this.updateMethod !== undefined ? this.updateMethod : <any>null;
        data["currentStatus"] = this.currentStatus !== undefined ? this.currentStatus : <any>null;
        return data; 
    }
}

export class CustomerMasterData_UnionMapping {
    id!: number;
    unionFlag!: string | null;
    customerCode!: string | null;
    unionOn!: string | null;
    soldTo!: string | null;
    aera!: string | null;
    remark!: string | null;
    condition!: string | null;
    from!: Date | null;
    to!: Date | null;
    isDeledted!: boolean;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.unionFlag = _data["unionFlag"] !== undefined ? _data["unionFlag"] : <any>null;
            this.customerCode = _data["customerCode"] !== undefined ? _data["customerCode"] : <any>null;
            this.unionOn = _data["unionOn"] !== undefined ? _data["unionOn"] : <any>null;
            this.soldTo = _data["soldTo"] !== undefined ? _data["soldTo"] : <any>null;
            this.aera = _data["aera"] !== undefined ? _data["aera"] : <any>null;
            this.remark = _data["remark"] !== undefined ? _data["remark"] : <any>null;
            this.condition = _data["condition"] !== undefined ? _data["condition"] : <any>null;
            this.from = _data["from"] ? new Date(_data["from"].toString()) : <any>null;
            this.to = _data["to"] ? new Date(_data["to"].toString()) : <any>null;
            this.isDeledted = _data["isDeledted"] !== undefined ? _data["isDeledted"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): CustomerMasterData_UnionMapping {
        data = typeof data === 'object' ? data : {};
        return createInstance<CustomerMasterData_UnionMapping>(data, _mappings, CustomerMasterData_UnionMapping);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["unionFlag"] = this.unionFlag !== undefined ? this.unionFlag : <any>null;
        data["customerCode"] = this.customerCode !== undefined ? this.customerCode : <any>null;
        data["unionOn"] = this.unionOn !== undefined ? this.unionOn : <any>null;
        data["soldTo"] = this.soldTo !== undefined ? this.soldTo : <any>null;
        data["aera"] = this.aera !== undefined ? this.aera : <any>null;
        data["remark"] = this.remark !== undefined ? this.remark : <any>null;
        data["condition"] = this.condition !== undefined ? this.condition : <any>null;
        data["from"] = this.from ? this.from.toISOString() : <any>null;
        data["to"] = this.to ? this.to.toISOString() : <any>null;
        data["isDeledted"] = this.isDeledted !== undefined ? this.isDeledted : <any>null;
        return data; 
    }
}

export class CuttingToolsPriceLists {
    bond!: string | null;
    size!: string | null;
    price!: number | null;
    remarks!: string | null;
    tenantId!: number | null;
    isDeleted!: boolean;
    deleterUserId!: number | null;
    deletionTime!: Date | null;
    lastModificationTime!: Date | null;
    lastModifierUserId!: number | null;
    creationTime!: Date;
    creatorUserId!: number | null;
    id!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.bond = _data["bond"] !== undefined ? _data["bond"] : <any>null;
            this.size = _data["size"] !== undefined ? _data["size"] : <any>null;
            this.price = _data["price"] !== undefined ? _data["price"] : <any>null;
            this.remarks = _data["remarks"] !== undefined ? _data["remarks"] : <any>null;
            this.tenantId = _data["tenantId"] !== undefined ? _data["tenantId"] : <any>null;
            this.isDeleted = _data["isDeleted"] !== undefined ? _data["isDeleted"] : <any>null;
            this.deleterUserId = _data["deleterUserId"] !== undefined ? _data["deleterUserId"] : <any>null;
            this.deletionTime = _data["deletionTime"] ? new Date(_data["deletionTime"].toString()) : <any>null;
            this.lastModificationTime = _data["lastModificationTime"] ? new Date(_data["lastModificationTime"].toString()) : <any>null;
            this.lastModifierUserId = _data["lastModifierUserId"] !== undefined ? _data["lastModifierUserId"] : <any>null;
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>null;
            this.creatorUserId = _data["creatorUserId"] !== undefined ? _data["creatorUserId"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): CuttingToolsPriceLists {
        data = typeof data === 'object' ? data : {};
        return createInstance<CuttingToolsPriceLists>(data, _mappings, CuttingToolsPriceLists);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bond"] = this.bond !== undefined ? this.bond : <any>null;
        data["size"] = this.size !== undefined ? this.size : <any>null;
        data["price"] = this.price !== undefined ? this.price : <any>null;
        data["remarks"] = this.remarks !== undefined ? this.remarks : <any>null;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : <any>null;
        data["isDeleted"] = this.isDeleted !== undefined ? this.isDeleted : <any>null;
        data["deleterUserId"] = this.deleterUserId !== undefined ? this.deleterUserId : <any>null;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>null;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>null;
        data["lastModifierUserId"] = this.lastModifierUserId !== undefined ? this.lastModifierUserId : <any>null;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>null;
        data["creatorUserId"] = this.creatorUserId !== undefined ? this.creatorUserId : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class PagedResultDtoOfCuttingToolsPriceLists {
    totalCount!: number;
    items!: CuttingToolsPriceLists[] | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"] !== undefined ? _data["totalCount"] : <any>null;
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CuttingToolsPriceLists.fromJS(item, _mappings));
            }
        }
    }

    static fromJS(data: any, _mappings?: any): PagedResultDtoOfCuttingToolsPriceLists {
        data = typeof data === 'object' ? data : {};
        return createInstance<PagedResultDtoOfCuttingToolsPriceLists>(data, _mappings, PagedResultDtoOfCuttingToolsPriceLists);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : <any>null;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export enum TargetClassify {
    Disassemble = 0,
    R04Target = 1,
    R20Target = 2,
    NewOpportunity = 3,
    CallReport = 4,
}

export enum TimeType {
    Year = 0,
    Month = 1,
}

export enum TargetDataType {
    Value = 0,
    Range = 1,
}

export class DashboardTargetDto {
    year!: number;
    type!: TargetClassify;
    timeType!: TimeType;
    dataType!: TargetDataType;
    value!: number | null;
    bonusStartValue!: number | null;
    bonusEndValue!: number | null;
    period!: number | null;
    periodName!: string | null;
    isActive!: boolean;
    channel!: string | null;
    version!: string | null;
    id!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.year = _data["year"] !== undefined ? _data["year"] : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.timeType = _data["timeType"] !== undefined ? _data["timeType"] : <any>null;
            this.dataType = _data["dataType"] !== undefined ? _data["dataType"] : <any>null;
            this.value = _data["value"] !== undefined ? _data["value"] : <any>null;
            this.bonusStartValue = _data["bonusStartValue"] !== undefined ? _data["bonusStartValue"] : <any>null;
            this.bonusEndValue = _data["bonusEndValue"] !== undefined ? _data["bonusEndValue"] : <any>null;
            this.period = _data["period"] !== undefined ? _data["period"] : <any>null;
            this.periodName = _data["periodName"] !== undefined ? _data["periodName"] : <any>null;
            this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : <any>null;
            this.channel = _data["channel"] !== undefined ? _data["channel"] : <any>null;
            this.version = _data["version"] !== undefined ? _data["version"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): DashboardTargetDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<DashboardTargetDto>(data, _mappings, DashboardTargetDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["year"] = this.year !== undefined ? this.year : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["timeType"] = this.timeType !== undefined ? this.timeType : <any>null;
        data["dataType"] = this.dataType !== undefined ? this.dataType : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        data["bonusStartValue"] = this.bonusStartValue !== undefined ? this.bonusStartValue : <any>null;
        data["bonusEndValue"] = this.bonusEndValue !== undefined ? this.bonusEndValue : <any>null;
        data["period"] = this.period !== undefined ? this.period : <any>null;
        data["periodName"] = this.periodName !== undefined ? this.periodName : <any>null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["channel"] = this.channel !== undefined ? this.channel : <any>null;
        data["version"] = this.version !== undefined ? this.version : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class CreateOrEditDashboardTargetDto {
    year!: number;
    type!: TargetClassify;
    timeType!: TimeType;
    dataType!: TargetDataType;
    value!: number | null;
    bonusStartValue!: number | null;
    bonusEndValue!: number | null;
    period!: number | null;
    periodName!: string | null;
    isActive!: boolean;
    channel!: string | null;
    version!: string | null;
    id!: number | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.year = _data["year"] !== undefined ? _data["year"] : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.timeType = _data["timeType"] !== undefined ? _data["timeType"] : <any>null;
            this.dataType = _data["dataType"] !== undefined ? _data["dataType"] : <any>null;
            this.value = _data["value"] !== undefined ? _data["value"] : <any>null;
            this.bonusStartValue = _data["bonusStartValue"] !== undefined ? _data["bonusStartValue"] : <any>null;
            this.bonusEndValue = _data["bonusEndValue"] !== undefined ? _data["bonusEndValue"] : <any>null;
            this.period = _data["period"] !== undefined ? _data["period"] : <any>null;
            this.periodName = _data["periodName"] !== undefined ? _data["periodName"] : <any>null;
            this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : <any>null;
            this.channel = _data["channel"] !== undefined ? _data["channel"] : <any>null;
            this.version = _data["version"] !== undefined ? _data["version"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): CreateOrEditDashboardTargetDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<CreateOrEditDashboardTargetDto>(data, _mappings, CreateOrEditDashboardTargetDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["year"] = this.year !== undefined ? this.year : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["timeType"] = this.timeType !== undefined ? this.timeType : <any>null;
        data["dataType"] = this.dataType !== undefined ? this.dataType : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        data["bonusStartValue"] = this.bonusStartValue !== undefined ? this.bonusStartValue : <any>null;
        data["bonusEndValue"] = this.bonusEndValue !== undefined ? this.bonusEndValue : <any>null;
        data["period"] = this.period !== undefined ? this.period : <any>null;
        data["periodName"] = this.periodName !== undefined ? this.periodName : <any>null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["channel"] = this.channel !== undefined ? this.channel : <any>null;
        data["version"] = this.version !== undefined ? this.version : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class VersionDto {
    versionList!: string[] | null;
    currentVersion!: string | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            if (Array.isArray(_data["versionList"])) {
                this.versionList = [] as any;
                for (let item of _data["versionList"])
                    this.versionList!.push(item);
            }
            this.currentVersion = _data["currentVersion"] !== undefined ? _data["currentVersion"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): VersionDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<VersionDto>(data, _mappings, VersionDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.versionList)) {
            data["versionList"] = [];
            for (let item of this.versionList)
                data["versionList"].push(item);
        }
        data["currentVersion"] = this.currentVersion !== undefined ? this.currentVersion : <any>null;
        return data; 
    }
}

export class Channel {
    channelforDashboard!: string | null;
    sortValue!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.channelforDashboard = _data["channelforDashboard"] !== undefined ? _data["channelforDashboard"] : <any>null;
            this.sortValue = _data["sortValue"] !== undefined ? _data["sortValue"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): Channel {
        data = typeof data === 'object' ? data : {};
        return createInstance<Channel>(data, _mappings, Channel);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["channelforDashboard"] = this.channelforDashboard !== undefined ? this.channelforDashboard : <any>null;
        data["sortValue"] = this.sortValue !== undefined ? this.sortValue : <any>null;
        return data; 
    }
}

export class ExcelToolQueryParams {
    keyWord!: string | null;
    filterType!: number;
    publiseStatusFilter!: number[] | null;
    pageIndex!: number;
    pageSize!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.keyWord = _data["keyWord"] !== undefined ? _data["keyWord"] : <any>null;
            this.filterType = _data["filterType"] !== undefined ? _data["filterType"] : <any>null;
            if (Array.isArray(_data["publiseStatusFilter"])) {
                this.publiseStatusFilter = [] as any;
                for (let item of _data["publiseStatusFilter"])
                    this.publiseStatusFilter!.push(item);
            }
            this.pageIndex = _data["pageIndex"] !== undefined ? _data["pageIndex"] : <any>null;
            this.pageSize = _data["pageSize"] !== undefined ? _data["pageSize"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): ExcelToolQueryParams {
        data = typeof data === 'object' ? data : {};
        return createInstance<ExcelToolQueryParams>(data, _mappings, ExcelToolQueryParams);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["keyWord"] = this.keyWord !== undefined ? this.keyWord : <any>null;
        data["filterType"] = this.filterType !== undefined ? this.filterType : <any>null;
        if (Array.isArray(this.publiseStatusFilter)) {
            data["publiseStatusFilter"] = [];
            for (let item of this.publiseStatusFilter)
                data["publiseStatusFilter"].push(item);
        }
        data["pageIndex"] = this.pageIndex !== undefined ? this.pageIndex : <any>null;
        data["pageSize"] = this.pageSize !== undefined ? this.pageSize : <any>null;
        return data; 
    }
}

export class ExcelDataCollecteSettings {
    id!: number;
    name!: string | null;
    dataSheetName!: string | null;
    dataStartRowNum!: number;
    dataEndRowNum!: number;
    dataUserNameColName!: string | null;
    userSheetName!: string | null;
    isOutUserCollect!: boolean;
    templateFileId!: number | null;
    createDate!: Date;
    createBy!: string | null;
    publishStatus!: number;
    dataLastColName!: string | null;
    dataStartColName!: string | null;
    publishCount!: number | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.dataSheetName = _data["dataSheetName"] !== undefined ? _data["dataSheetName"] : <any>null;
            this.dataStartRowNum = _data["dataStartRowNum"] !== undefined ? _data["dataStartRowNum"] : <any>null;
            this.dataEndRowNum = _data["dataEndRowNum"] !== undefined ? _data["dataEndRowNum"] : <any>null;
            this.dataUserNameColName = _data["dataUserNameColName"] !== undefined ? _data["dataUserNameColName"] : <any>null;
            this.userSheetName = _data["userSheetName"] !== undefined ? _data["userSheetName"] : <any>null;
            this.isOutUserCollect = _data["isOutUserCollect"] !== undefined ? _data["isOutUserCollect"] : <any>null;
            this.templateFileId = _data["templateFileId"] !== undefined ? _data["templateFileId"] : <any>null;
            this.createDate = _data["createDate"] ? new Date(_data["createDate"].toString()) : <any>null;
            this.createBy = _data["createBy"] !== undefined ? _data["createBy"] : <any>null;
            this.publishStatus = _data["publishStatus"] !== undefined ? _data["publishStatus"] : <any>null;
            this.dataLastColName = _data["dataLastColName"] !== undefined ? _data["dataLastColName"] : <any>null;
            this.dataStartColName = _data["dataStartColName"] !== undefined ? _data["dataStartColName"] : <any>null;
            this.publishCount = _data["publishCount"] !== undefined ? _data["publishCount"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): ExcelDataCollecteSettings {
        data = typeof data === 'object' ? data : {};
        return createInstance<ExcelDataCollecteSettings>(data, _mappings, ExcelDataCollecteSettings);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["dataSheetName"] = this.dataSheetName !== undefined ? this.dataSheetName : <any>null;
        data["dataStartRowNum"] = this.dataStartRowNum !== undefined ? this.dataStartRowNum : <any>null;
        data["dataEndRowNum"] = this.dataEndRowNum !== undefined ? this.dataEndRowNum : <any>null;
        data["dataUserNameColName"] = this.dataUserNameColName !== undefined ? this.dataUserNameColName : <any>null;
        data["userSheetName"] = this.userSheetName !== undefined ? this.userSheetName : <any>null;
        data["isOutUserCollect"] = this.isOutUserCollect !== undefined ? this.isOutUserCollect : <any>null;
        data["templateFileId"] = this.templateFileId !== undefined ? this.templateFileId : <any>null;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>null;
        data["createBy"] = this.createBy !== undefined ? this.createBy : <any>null;
        data["publishStatus"] = this.publishStatus !== undefined ? this.publishStatus : <any>null;
        data["dataLastColName"] = this.dataLastColName !== undefined ? this.dataLastColName : <any>null;
        data["dataStartColName"] = this.dataStartColName !== undefined ? this.dataStartColName : <any>null;
        data["publishCount"] = this.publishCount !== undefined ? this.publishCount : <any>null;
        return data; 
    }
}

export class ExcelDataCollectRecrod {
    id!: number;
    dataCollectSettingId!: number;
    fileId!: number;
    userName!: string | null;
    submitDate!: Date;
    submitStatus!: number;
    submitBy!: string | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.dataCollectSettingId = _data["dataCollectSettingId"] !== undefined ? _data["dataCollectSettingId"] : <any>null;
            this.fileId = _data["fileId"] !== undefined ? _data["fileId"] : <any>null;
            this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
            this.submitDate = _data["submitDate"] ? new Date(_data["submitDate"].toString()) : <any>null;
            this.submitStatus = _data["submitStatus"] !== undefined ? _data["submitStatus"] : <any>null;
            this.submitBy = _data["submitBy"] !== undefined ? _data["submitBy"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): ExcelDataCollectRecrod {
        data = typeof data === 'object' ? data : {};
        return createInstance<ExcelDataCollectRecrod>(data, _mappings, ExcelDataCollectRecrod);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["dataCollectSettingId"] = this.dataCollectSettingId !== undefined ? this.dataCollectSettingId : <any>null;
        data["fileId"] = this.fileId !== undefined ? this.fileId : <any>null;
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["submitDate"] = this.submitDate ? this.submitDate.toISOString() : <any>null;
        data["submitStatus"] = this.submitStatus !== undefined ? this.submitStatus : <any>null;
        data["submitBy"] = this.submitBy !== undefined ? this.submitBy : <any>null;
        return data; 
    }
}

export class ApplicationLanguageListDto {
    tenantId!: number | null;
    name!: string | null;
    displayName!: string | null;
    icon!: string | null;
    isDisabled!: boolean;
    isDeleted!: boolean;
    deleterUserId!: number | null;
    deletionTime!: Date | null;
    lastModificationTime!: Date | null;
    lastModifierUserId!: number | null;
    creationTime!: Date;
    creatorUserId!: number | null;
    id!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"] !== undefined ? _data["tenantId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.displayName = _data["displayName"] !== undefined ? _data["displayName"] : <any>null;
            this.icon = _data["icon"] !== undefined ? _data["icon"] : <any>null;
            this.isDisabled = _data["isDisabled"] !== undefined ? _data["isDisabled"] : <any>null;
            this.isDeleted = _data["isDeleted"] !== undefined ? _data["isDeleted"] : <any>null;
            this.deleterUserId = _data["deleterUserId"] !== undefined ? _data["deleterUserId"] : <any>null;
            this.deletionTime = _data["deletionTime"] ? new Date(_data["deletionTime"].toString()) : <any>null;
            this.lastModificationTime = _data["lastModificationTime"] ? new Date(_data["lastModificationTime"].toString()) : <any>null;
            this.lastModifierUserId = _data["lastModifierUserId"] !== undefined ? _data["lastModifierUserId"] : <any>null;
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>null;
            this.creatorUserId = _data["creatorUserId"] !== undefined ? _data["creatorUserId"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): ApplicationLanguageListDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<ApplicationLanguageListDto>(data, _mappings, ApplicationLanguageListDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : <any>null;
        data["icon"] = this.icon !== undefined ? this.icon : <any>null;
        data["isDisabled"] = this.isDisabled !== undefined ? this.isDisabled : <any>null;
        data["isDeleted"] = this.isDeleted !== undefined ? this.isDeleted : <any>null;
        data["deleterUserId"] = this.deleterUserId !== undefined ? this.deleterUserId : <any>null;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>null;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>null;
        data["lastModifierUserId"] = this.lastModifierUserId !== undefined ? this.lastModifierUserId : <any>null;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>null;
        data["creatorUserId"] = this.creatorUserId !== undefined ? this.creatorUserId : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class GetLanguagesOutput {
    defaultLanguageName!: string | null;
    items!: ApplicationLanguageListDto[] | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.defaultLanguageName = _data["defaultLanguageName"] !== undefined ? _data["defaultLanguageName"] : <any>null;
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ApplicationLanguageListDto.fromJS(item, _mappings));
            }
        }
    }

    static fromJS(data: any, _mappings?: any): GetLanguagesOutput {
        data = typeof data === 'object' ? data : {};
        return createInstance<GetLanguagesOutput>(data, _mappings, GetLanguagesOutput);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["defaultLanguageName"] = this.defaultLanguageName !== undefined ? this.defaultLanguageName : <any>null;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export class ApplicationLanguageEditDto {
    id!: number | null;
    name!: string;
    icon!: string | null;
    isEnabled!: boolean;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.icon = _data["icon"] !== undefined ? _data["icon"] : <any>null;
            this.isEnabled = _data["isEnabled"] !== undefined ? _data["isEnabled"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): ApplicationLanguageEditDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<ApplicationLanguageEditDto>(data, _mappings, ApplicationLanguageEditDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["icon"] = this.icon !== undefined ? this.icon : <any>null;
        data["isEnabled"] = this.isEnabled !== undefined ? this.isEnabled : <any>null;
        return data; 
    }
}

export class ComboboxItemDto {
    value!: string | null;
    displayText!: string | null;
    isSelected!: boolean;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.value = _data["value"] !== undefined ? _data["value"] : <any>null;
            this.displayText = _data["displayText"] !== undefined ? _data["displayText"] : <any>null;
            this.isSelected = _data["isSelected"] !== undefined ? _data["isSelected"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): ComboboxItemDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<ComboboxItemDto>(data, _mappings, ComboboxItemDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value !== undefined ? this.value : <any>null;
        data["displayText"] = this.displayText !== undefined ? this.displayText : <any>null;
        data["isSelected"] = this.isSelected !== undefined ? this.isSelected : <any>null;
        return data; 
    }
}

export class GetLanguageForEditOutput {
    language!: ApplicationLanguageEditDto;
    languageNames!: ComboboxItemDto[] | null;
    flags!: ComboboxItemDto[] | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.language = _data["language"] ? ApplicationLanguageEditDto.fromJS(_data["language"], _mappings) : <any>null;
            if (Array.isArray(_data["languageNames"])) {
                this.languageNames = [] as any;
                for (let item of _data["languageNames"])
                    this.languageNames!.push(ComboboxItemDto.fromJS(item, _mappings));
            }
            if (Array.isArray(_data["flags"])) {
                this.flags = [] as any;
                for (let item of _data["flags"])
                    this.flags!.push(ComboboxItemDto.fromJS(item, _mappings));
            }
        }
    }

    static fromJS(data: any, _mappings?: any): GetLanguageForEditOutput {
        data = typeof data === 'object' ? data : {};
        return createInstance<GetLanguageForEditOutput>(data, _mappings, GetLanguageForEditOutput);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["language"] = this.language ? this.language.toJSON() : <any>null;
        if (Array.isArray(this.languageNames)) {
            data["languageNames"] = [];
            for (let item of this.languageNames)
                data["languageNames"].push(item.toJSON());
        }
        if (Array.isArray(this.flags)) {
            data["flags"] = [];
            for (let item of this.flags)
                data["flags"].push(item.toJSON());
        }
        return data; 
    }
}

export class CreateOrUpdateLanguageInput {
    language!: ApplicationLanguageEditDto;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.language = _data["language"] ? ApplicationLanguageEditDto.fromJS(_data["language"], _mappings) : new ApplicationLanguageEditDto();
        }
    }

    static fromJS(data: any, _mappings?: any): CreateOrUpdateLanguageInput {
        data = typeof data === 'object' ? data : {};
        return createInstance<CreateOrUpdateLanguageInput>(data, _mappings, CreateOrUpdateLanguageInput);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["language"] = this.language ? this.language.toJSON() : <any>null;
        return data; 
    }
}

export class SetDefaultLanguageInput {
    name!: string;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): SetDefaultLanguageInput {
        data = typeof data === 'object' ? data : {};
        return createInstance<SetDefaultLanguageInput>(data, _mappings, SetDefaultLanguageInput);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        return data; 
    }
}

export class LanguageTextListDto {
    key!: string | null;
    baseValue!: string | null;
    targetValue!: string | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.key = _data["key"] !== undefined ? _data["key"] : <any>null;
            this.baseValue = _data["baseValue"] !== undefined ? _data["baseValue"] : <any>null;
            this.targetValue = _data["targetValue"] !== undefined ? _data["targetValue"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): LanguageTextListDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<LanguageTextListDto>(data, _mappings, LanguageTextListDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key !== undefined ? this.key : <any>null;
        data["baseValue"] = this.baseValue !== undefined ? this.baseValue : <any>null;
        data["targetValue"] = this.targetValue !== undefined ? this.targetValue : <any>null;
        return data; 
    }
}

export class PagedResultDtoOfLanguageTextListDto {
    totalCount!: number;
    items!: LanguageTextListDto[] | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"] !== undefined ? _data["totalCount"] : <any>null;
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(LanguageTextListDto.fromJS(item, _mappings));
            }
        }
    }

    static fromJS(data: any, _mappings?: any): PagedResultDtoOfLanguageTextListDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<PagedResultDtoOfLanguageTextListDto>(data, _mappings, PagedResultDtoOfLanguageTextListDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : <any>null;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export class UpdateLanguageTextInput {
    languageName!: string;
    sourceName!: string;
    key!: string;
    value!: string;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.languageName = _data["languageName"] !== undefined ? _data["languageName"] : <any>null;
            this.sourceName = _data["sourceName"] !== undefined ? _data["sourceName"] : <any>null;
            this.key = _data["key"] !== undefined ? _data["key"] : <any>null;
            this.value = _data["value"] !== undefined ? _data["value"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): UpdateLanguageTextInput {
        data = typeof data === 'object' ? data : {};
        return createInstance<UpdateLanguageTextInput>(data, _mappings, UpdateLanguageTextInput);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["languageName"] = this.languageName !== undefined ? this.languageName : <any>null;
        data["sourceName"] = this.sourceName !== undefined ? this.sourceName : <any>null;
        data["key"] = this.key !== undefined ? this.key : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        return data; 
    }
}

export class TempOpenOrderDto {
    soldto!: string | null;
    soldtoName!: string | null;
    soldtoSalesOffice!: string | null;
    poDate!: Date;
    lineCreateOn!: Date;
    documentDate!: Date;
    requestedDeliveryDate!: Date;
    goodsIssueDate!: Date;
    scheduleLineDate!: Date;
    fdIndicator!: string | null;
    purchaseOrderNO!: string | null;
    sdDocument!: string | null;
    sdItem!: string | null;
    material!: string | null;
    materialDesc!: string | null;
    salesDocumentType!: string | null;
    division!: string | null;
    plant!: string | null;
    shippingPoint!: string | null;
    deliveryPickingStatus!: string | null;
    lineItemStatus!: string | null;
    orderQuantity!: number;
    openQuantity!: number;
    saleUOM!: string | null;
    uomConvNumerator!: number;
    openQTYPC!: number;
    netValue!: string | null;
    stockQTY!: number;
    stockAnalyse!: string | null;
    stockValue!: number;
    openStockValue!: number;
    deliveryQuantity!: number;
    customerMaterialNumber!: string | null;
    brand!: string | null;
    salesDocumentItemCategory!: string | null;
    productionOrder!: string | null;
    deliveryDate!: Date;
    markfor!: string | null;
    markforName!: string | null;
    markforSalesOffice!: string | null;
    markforSalesName!: string | null;
    salesOrderCreatedBy!: string | null;
    salesRepName!: string | null;
    shape!: string | null;
    dim1!: string | null;
    dim2!: string | null;
    dim3!: string | null;
    maxMeter!: string | null;
    endUse!: string | null;
    smr!: string | null;
    schedCatgy!: string | null;
    poType!: string | null;
    custClass!: string | null;
    markForSalesRepName!: string | null;
    salesRepNum!: string | null;
    outerUpcDesc!: string | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.soldto = _data["soldto"] !== undefined ? _data["soldto"] : <any>null;
            this.soldtoName = _data["soldtoName"] !== undefined ? _data["soldtoName"] : <any>null;
            this.soldtoSalesOffice = _data["soldtoSalesOffice"] !== undefined ? _data["soldtoSalesOffice"] : <any>null;
            this.poDate = _data["poDate"] ? new Date(_data["poDate"].toString()) : <any>null;
            this.lineCreateOn = _data["lineCreateOn"] ? new Date(_data["lineCreateOn"].toString()) : <any>null;
            this.documentDate = _data["documentDate"] ? new Date(_data["documentDate"].toString()) : <any>null;
            this.requestedDeliveryDate = _data["requestedDeliveryDate"] ? new Date(_data["requestedDeliveryDate"].toString()) : <any>null;
            this.goodsIssueDate = _data["goodsIssueDate"] ? new Date(_data["goodsIssueDate"].toString()) : <any>null;
            this.scheduleLineDate = _data["scheduleLineDate"] ? new Date(_data["scheduleLineDate"].toString()) : <any>null;
            this.fdIndicator = _data["fdIndicator"] !== undefined ? _data["fdIndicator"] : <any>null;
            this.purchaseOrderNO = _data["purchaseOrderNO"] !== undefined ? _data["purchaseOrderNO"] : <any>null;
            this.sdDocument = _data["sdDocument"] !== undefined ? _data["sdDocument"] : <any>null;
            this.sdItem = _data["sdItem"] !== undefined ? _data["sdItem"] : <any>null;
            this.material = _data["material"] !== undefined ? _data["material"] : <any>null;
            this.materialDesc = _data["materialDesc"] !== undefined ? _data["materialDesc"] : <any>null;
            this.salesDocumentType = _data["salesDocumentType"] !== undefined ? _data["salesDocumentType"] : <any>null;
            this.division = _data["division"] !== undefined ? _data["division"] : <any>null;
            this.plant = _data["plant"] !== undefined ? _data["plant"] : <any>null;
            this.shippingPoint = _data["shippingPoint"] !== undefined ? _data["shippingPoint"] : <any>null;
            this.deliveryPickingStatus = _data["deliveryPickingStatus"] !== undefined ? _data["deliveryPickingStatus"] : <any>null;
            this.lineItemStatus = _data["lineItemStatus"] !== undefined ? _data["lineItemStatus"] : <any>null;
            this.orderQuantity = _data["orderQuantity"] !== undefined ? _data["orderQuantity"] : <any>null;
            this.openQuantity = _data["openQuantity"] !== undefined ? _data["openQuantity"] : <any>null;
            this.saleUOM = _data["saleUOM"] !== undefined ? _data["saleUOM"] : <any>null;
            this.uomConvNumerator = _data["uomConvNumerator"] !== undefined ? _data["uomConvNumerator"] : <any>null;
            this.openQTYPC = _data["openQTYPC"] !== undefined ? _data["openQTYPC"] : <any>null;
            this.netValue = _data["netValue"] !== undefined ? _data["netValue"] : <any>null;
            this.stockQTY = _data["stockQTY"] !== undefined ? _data["stockQTY"] : <any>null;
            this.stockAnalyse = _data["stockAnalyse"] !== undefined ? _data["stockAnalyse"] : <any>null;
            this.stockValue = _data["stockValue"] !== undefined ? _data["stockValue"] : <any>null;
            this.openStockValue = _data["openStockValue"] !== undefined ? _data["openStockValue"] : <any>null;
            this.deliveryQuantity = _data["deliveryQuantity"] !== undefined ? _data["deliveryQuantity"] : <any>null;
            this.customerMaterialNumber = _data["customerMaterialNumber"] !== undefined ? _data["customerMaterialNumber"] : <any>null;
            this.brand = _data["brand"] !== undefined ? _data["brand"] : <any>null;
            this.salesDocumentItemCategory = _data["salesDocumentItemCategory"] !== undefined ? _data["salesDocumentItemCategory"] : <any>null;
            this.productionOrder = _data["productionOrder"] !== undefined ? _data["productionOrder"] : <any>null;
            this.deliveryDate = _data["deliveryDate"] ? new Date(_data["deliveryDate"].toString()) : <any>null;
            this.markfor = _data["markfor"] !== undefined ? _data["markfor"] : <any>null;
            this.markforName = _data["markforName"] !== undefined ? _data["markforName"] : <any>null;
            this.markforSalesOffice = _data["markforSalesOffice"] !== undefined ? _data["markforSalesOffice"] : <any>null;
            this.markforSalesName = _data["markforSalesName"] !== undefined ? _data["markforSalesName"] : <any>null;
            this.salesOrderCreatedBy = _data["salesOrderCreatedBy"] !== undefined ? _data["salesOrderCreatedBy"] : <any>null;
            this.salesRepName = _data["salesRepName"] !== undefined ? _data["salesRepName"] : <any>null;
            this.shape = _data["shape"] !== undefined ? _data["shape"] : <any>null;
            this.dim1 = _data["dim1"] !== undefined ? _data["dim1"] : <any>null;
            this.dim2 = _data["dim2"] !== undefined ? _data["dim2"] : <any>null;
            this.dim3 = _data["dim3"] !== undefined ? _data["dim3"] : <any>null;
            this.maxMeter = _data["maxMeter"] !== undefined ? _data["maxMeter"] : <any>null;
            this.endUse = _data["endUse"] !== undefined ? _data["endUse"] : <any>null;
            this.smr = _data["smr"] !== undefined ? _data["smr"] : <any>null;
            this.schedCatgy = _data["schedCatgy"] !== undefined ? _data["schedCatgy"] : <any>null;
            this.poType = _data["poType"] !== undefined ? _data["poType"] : <any>null;
            this.custClass = _data["custClass"] !== undefined ? _data["custClass"] : <any>null;
            this.markForSalesRepName = _data["markForSalesRepName"] !== undefined ? _data["markForSalesRepName"] : <any>null;
            this.salesRepNum = _data["salesRepNum"] !== undefined ? _data["salesRepNum"] : <any>null;
            this.outerUpcDesc = _data["outerUpcDesc"] !== undefined ? _data["outerUpcDesc"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): TempOpenOrderDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<TempOpenOrderDto>(data, _mappings, TempOpenOrderDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["soldto"] = this.soldto !== undefined ? this.soldto : <any>null;
        data["soldtoName"] = this.soldtoName !== undefined ? this.soldtoName : <any>null;
        data["soldtoSalesOffice"] = this.soldtoSalesOffice !== undefined ? this.soldtoSalesOffice : <any>null;
        data["poDate"] = this.poDate ? this.poDate.toISOString() : <any>null;
        data["lineCreateOn"] = this.lineCreateOn ? this.lineCreateOn.toISOString() : <any>null;
        data["documentDate"] = this.documentDate ? this.documentDate.toISOString() : <any>null;
        data["requestedDeliveryDate"] = this.requestedDeliveryDate ? this.requestedDeliveryDate.toISOString() : <any>null;
        data["goodsIssueDate"] = this.goodsIssueDate ? this.goodsIssueDate.toISOString() : <any>null;
        data["scheduleLineDate"] = this.scheduleLineDate ? this.scheduleLineDate.toISOString() : <any>null;
        data["fdIndicator"] = this.fdIndicator !== undefined ? this.fdIndicator : <any>null;
        data["purchaseOrderNO"] = this.purchaseOrderNO !== undefined ? this.purchaseOrderNO : <any>null;
        data["sdDocument"] = this.sdDocument !== undefined ? this.sdDocument : <any>null;
        data["sdItem"] = this.sdItem !== undefined ? this.sdItem : <any>null;
        data["material"] = this.material !== undefined ? this.material : <any>null;
        data["materialDesc"] = this.materialDesc !== undefined ? this.materialDesc : <any>null;
        data["salesDocumentType"] = this.salesDocumentType !== undefined ? this.salesDocumentType : <any>null;
        data["division"] = this.division !== undefined ? this.division : <any>null;
        data["plant"] = this.plant !== undefined ? this.plant : <any>null;
        data["shippingPoint"] = this.shippingPoint !== undefined ? this.shippingPoint : <any>null;
        data["deliveryPickingStatus"] = this.deliveryPickingStatus !== undefined ? this.deliveryPickingStatus : <any>null;
        data["lineItemStatus"] = this.lineItemStatus !== undefined ? this.lineItemStatus : <any>null;
        data["orderQuantity"] = this.orderQuantity !== undefined ? this.orderQuantity : <any>null;
        data["openQuantity"] = this.openQuantity !== undefined ? this.openQuantity : <any>null;
        data["saleUOM"] = this.saleUOM !== undefined ? this.saleUOM : <any>null;
        data["uomConvNumerator"] = this.uomConvNumerator !== undefined ? this.uomConvNumerator : <any>null;
        data["openQTYPC"] = this.openQTYPC !== undefined ? this.openQTYPC : <any>null;
        data["netValue"] = this.netValue !== undefined ? this.netValue : <any>null;
        data["stockQTY"] = this.stockQTY !== undefined ? this.stockQTY : <any>null;
        data["stockAnalyse"] = this.stockAnalyse !== undefined ? this.stockAnalyse : <any>null;
        data["stockValue"] = this.stockValue !== undefined ? this.stockValue : <any>null;
        data["openStockValue"] = this.openStockValue !== undefined ? this.openStockValue : <any>null;
        data["deliveryQuantity"] = this.deliveryQuantity !== undefined ? this.deliveryQuantity : <any>null;
        data["customerMaterialNumber"] = this.customerMaterialNumber !== undefined ? this.customerMaterialNumber : <any>null;
        data["brand"] = this.brand !== undefined ? this.brand : <any>null;
        data["salesDocumentItemCategory"] = this.salesDocumentItemCategory !== undefined ? this.salesDocumentItemCategory : <any>null;
        data["productionOrder"] = this.productionOrder !== undefined ? this.productionOrder : <any>null;
        data["deliveryDate"] = this.deliveryDate ? this.deliveryDate.toISOString() : <any>null;
        data["markfor"] = this.markfor !== undefined ? this.markfor : <any>null;
        data["markforName"] = this.markforName !== undefined ? this.markforName : <any>null;
        data["markforSalesOffice"] = this.markforSalesOffice !== undefined ? this.markforSalesOffice : <any>null;
        data["markforSalesName"] = this.markforSalesName !== undefined ? this.markforSalesName : <any>null;
        data["salesOrderCreatedBy"] = this.salesOrderCreatedBy !== undefined ? this.salesOrderCreatedBy : <any>null;
        data["salesRepName"] = this.salesRepName !== undefined ? this.salesRepName : <any>null;
        data["shape"] = this.shape !== undefined ? this.shape : <any>null;
        data["dim1"] = this.dim1 !== undefined ? this.dim1 : <any>null;
        data["dim2"] = this.dim2 !== undefined ? this.dim2 : <any>null;
        data["dim3"] = this.dim3 !== undefined ? this.dim3 : <any>null;
        data["maxMeter"] = this.maxMeter !== undefined ? this.maxMeter : <any>null;
        data["endUse"] = this.endUse !== undefined ? this.endUse : <any>null;
        data["smr"] = this.smr !== undefined ? this.smr : <any>null;
        data["schedCatgy"] = this.schedCatgy !== undefined ? this.schedCatgy : <any>null;
        data["poType"] = this.poType !== undefined ? this.poType : <any>null;
        data["custClass"] = this.custClass !== undefined ? this.custClass : <any>null;
        data["markForSalesRepName"] = this.markForSalesRepName !== undefined ? this.markForSalesRepName : <any>null;
        data["salesRepNum"] = this.salesRepNum !== undefined ? this.salesRepNum : <any>null;
        data["outerUpcDesc"] = this.outerUpcDesc !== undefined ? this.outerUpcDesc : <any>null;
        return data; 
    }
}

export class PagedResultDtoOfTempOpenOrderDto {
    totalCount!: number;
    items!: TempOpenOrderDto[] | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"] !== undefined ? _data["totalCount"] : <any>null;
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(TempOpenOrderDto.fromJS(item, _mappings));
            }
        }
    }

    static fromJS(data: any, _mappings?: any): PagedResultDtoOfTempOpenOrderDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<PagedResultDtoOfTempOpenOrderDto>(data, _mappings, PagedResultDtoOfTempOpenOrderDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : <any>null;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export class TempOpenOrderInputDto {
    salesOffice!: string | null;
    smr!: string | null;
    custClass!: string | null;
    customerSize!: string | null;
    startTime!: Date | null;
    endTime!: Date | null;
    repNum!: string[] | null;
    filter!: string | null;
    tableColumn!: string | null;
    sorting!: string | null;
    skipCount!: number;
    maxResultCount!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.salesOffice = _data["salesOffice"] !== undefined ? _data["salesOffice"] : <any>null;
            this.smr = _data["smr"] !== undefined ? _data["smr"] : <any>null;
            this.custClass = _data["custClass"] !== undefined ? _data["custClass"] : <any>null;
            this.customerSize = _data["customerSize"] !== undefined ? _data["customerSize"] : <any>null;
            this.startTime = _data["startTime"] ? new Date(_data["startTime"].toString()) : <any>null;
            this.endTime = _data["endTime"] ? new Date(_data["endTime"].toString()) : <any>null;
            if (Array.isArray(_data["repNum"])) {
                this.repNum = [] as any;
                for (let item of _data["repNum"])
                    this.repNum!.push(item);
            }
            this.filter = _data["filter"] !== undefined ? _data["filter"] : <any>null;
            this.tableColumn = _data["tableColumn"] !== undefined ? _data["tableColumn"] : <any>null;
            this.sorting = _data["sorting"] !== undefined ? _data["sorting"] : <any>null;
            this.skipCount = _data["skipCount"] !== undefined ? _data["skipCount"] : <any>null;
            this.maxResultCount = _data["maxResultCount"] !== undefined ? _data["maxResultCount"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): TempOpenOrderInputDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<TempOpenOrderInputDto>(data, _mappings, TempOpenOrderInputDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["salesOffice"] = this.salesOffice !== undefined ? this.salesOffice : <any>null;
        data["smr"] = this.smr !== undefined ? this.smr : <any>null;
        data["custClass"] = this.custClass !== undefined ? this.custClass : <any>null;
        data["customerSize"] = this.customerSize !== undefined ? this.customerSize : <any>null;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>null;
        data["endTime"] = this.endTime ? this.endTime.toISOString() : <any>null;
        if (Array.isArray(this.repNum)) {
            data["repNum"] = [];
            for (let item of this.repNum)
                data["repNum"].push(item);
        }
        data["filter"] = this.filter !== undefined ? this.filter : <any>null;
        data["tableColumn"] = this.tableColumn !== undefined ? this.tableColumn : <any>null;
        data["sorting"] = this.sorting !== undefined ? this.sorting : <any>null;
        data["skipCount"] = this.skipCount !== undefined ? this.skipCount : <any>null;
        data["maxResultCount"] = this.maxResultCount !== undefined ? this.maxResultCount : <any>null;
        return data; 
    }
}

export class MemoryStream {
    readonly canRead!: boolean;
    readonly canSeek!: boolean;
    readonly canWrite!: boolean;
    capacity!: number;
    readonly length!: number;
    position!: number;
    readonly canTimeout!: boolean;
    readTimeout!: number;
    writeTimeout!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            (<any>this).canRead = _data["canRead"] !== undefined ? _data["canRead"] : <any>null;
            (<any>this).canSeek = _data["canSeek"] !== undefined ? _data["canSeek"] : <any>null;
            (<any>this).canWrite = _data["canWrite"] !== undefined ? _data["canWrite"] : <any>null;
            this.capacity = _data["capacity"] !== undefined ? _data["capacity"] : <any>null;
            (<any>this).length = _data["length"] !== undefined ? _data["length"] : <any>null;
            this.position = _data["position"] !== undefined ? _data["position"] : <any>null;
            (<any>this).canTimeout = _data["canTimeout"] !== undefined ? _data["canTimeout"] : <any>null;
            this.readTimeout = _data["readTimeout"] !== undefined ? _data["readTimeout"] : <any>null;
            this.writeTimeout = _data["writeTimeout"] !== undefined ? _data["writeTimeout"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): MemoryStream {
        data = typeof data === 'object' ? data : {};
        return createInstance<MemoryStream>(data, _mappings, MemoryStream);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["canRead"] = this.canRead !== undefined ? this.canRead : <any>null;
        data["canSeek"] = this.canSeek !== undefined ? this.canSeek : <any>null;
        data["canWrite"] = this.canWrite !== undefined ? this.canWrite : <any>null;
        data["capacity"] = this.capacity !== undefined ? this.capacity : <any>null;
        data["length"] = this.length !== undefined ? this.length : <any>null;
        data["position"] = this.position !== undefined ? this.position : <any>null;
        data["canTimeout"] = this.canTimeout !== undefined ? this.canTimeout : <any>null;
        data["readTimeout"] = this.readTimeout !== undefined ? this.readTimeout : <any>null;
        data["writeTimeout"] = this.writeTimeout !== undefined ? this.writeTimeout : <any>null;
        return data; 
    }
}

export class RepNumName {
    name!: string | null;
    repNum!: string | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.repNum = _data["repNum"] !== undefined ? _data["repNum"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): RepNumName {
        data = typeof data === 'object' ? data : {};
        return createInstance<RepNumName>(data, _mappings, RepNumName);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["repNum"] = this.repNum !== undefined ? this.repNum : <any>null;
        return data; 
    }
}

export class SalesRepMapping {
    sgid!: string | null;
    name!: string | null;
    repNum!: string | null;
    leaderSGID!: string | null;
    leaderName!: string | null;
    id!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.sgid = _data["sgid"] !== undefined ? _data["sgid"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.repNum = _data["repNum"] !== undefined ? _data["repNum"] : <any>null;
            this.leaderSGID = _data["leaderSGID"] !== undefined ? _data["leaderSGID"] : <any>null;
            this.leaderName = _data["leaderName"] !== undefined ? _data["leaderName"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): SalesRepMapping {
        data = typeof data === 'object' ? data : {};
        return createInstance<SalesRepMapping>(data, _mappings, SalesRepMapping);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sgid"] = this.sgid !== undefined ? this.sgid : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["repNum"] = this.repNum !== undefined ? this.repNum : <any>null;
        data["leaderSGID"] = this.leaderSGID !== undefined ? this.leaderSGID : <any>null;
        data["leaderName"] = this.leaderName !== undefined ? this.leaderName : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class TempOrdersMonthly {
    custMaterialNum!: string | null;
    unionSoldTo!: string | null;
    unionSoldToName!: string | null;
    unionMarkfor!: string | null;
    unionMarkforName!: string | null;
    orderNum!: string | null;
    lineNum!: number;
    orderType!: string | null;
    custPO!: string | null;
    soldTo!: string | null;
    soldToName!: string | null;
    payer!: string | null;
    payerName!: Date;
    markfor!: string | null;
    markforName!: string | null;
    shipTo!: string | null;
    shipToName!: string | null;
    materialNum!: string | null;
    materialDesc!: string | null;
    brand!: string | null;
    materialGroupDesc!: string | null;
    wheelType!: string | null;
    diameter!: number | null;
    thickness!: number | null;
    holeSize!: number | null;
    abrasive1!: string | null;
    grit!: string | null;
    grade!: string | null;
    bond!: string | null;
    externalMarkingSpec!: string | null;
    endUseDesc!: string | null;
    length!: number | null;
    width!: number | null;
    shape!: string | null;
    shapeFamilyDesc!: number;
    subShape!: number;
    l1Desc!: number;
    l2Desc!: string | null;
    l3Desc!: string | null;
    marketSegment!: string | null;
    smR_42!: string | null;
    smR_17!: Date;
    smR_Group!: string | null;
    segment_Product!: string | null;
    channel!: string | null;
    salesOffice!: string | null;
    region!: string | null;
    division!: string | null;
    sellingPlant!: string | null;
    capGroup!: string | null;
    marketingCapCode!: string | null;
    date!: Date | null;
    oiT_QTY!: number;
    saleUOM!: string | null;
    uomConvNumerator!: number | null;
    uomConvDenominator!: number | null;
    oitsaleS_RC_BUDRATE!: number | null;
    type!: string | null;
    province!: string | null;
    salesTerritory!: string | null;
    salesTerrName!: string | null;
    salesRepresentative!: string | null;
    salesName!: string | null;
    usageIndicatorDesc!: string | null;
    oitPeriod!: number;
    purchaseOrderType!: string | null;
    orderPeriod!: number;
    markforSalesRep!: string | null;
    markforRegion!: string | null;
    cap!: string | null;
    custClass!: string | null;
    markForSalesRepName!: string | null;
    salesRepNum!: string | null;
    outerUpcDesc!: string | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.custMaterialNum = _data["custMaterialNum"] !== undefined ? _data["custMaterialNum"] : <any>null;
            this.unionSoldTo = _data["unionSoldTo"] !== undefined ? _data["unionSoldTo"] : <any>null;
            this.unionSoldToName = _data["unionSoldToName"] !== undefined ? _data["unionSoldToName"] : <any>null;
            this.unionMarkfor = _data["unionMarkfor"] !== undefined ? _data["unionMarkfor"] : <any>null;
            this.unionMarkforName = _data["unionMarkforName"] !== undefined ? _data["unionMarkforName"] : <any>null;
            this.orderNum = _data["orderNum"] !== undefined ? _data["orderNum"] : <any>null;
            this.lineNum = _data["lineNum"] !== undefined ? _data["lineNum"] : <any>null;
            this.orderType = _data["orderType"] !== undefined ? _data["orderType"] : <any>null;
            this.custPO = _data["custPO"] !== undefined ? _data["custPO"] : <any>null;
            this.soldTo = _data["soldTo"] !== undefined ? _data["soldTo"] : <any>null;
            this.soldToName = _data["soldToName"] !== undefined ? _data["soldToName"] : <any>null;
            this.payer = _data["payer"] !== undefined ? _data["payer"] : <any>null;
            this.payerName = _data["payerName"] ? new Date(_data["payerName"].toString()) : <any>null;
            this.markfor = _data["markfor"] !== undefined ? _data["markfor"] : <any>null;
            this.markforName = _data["markforName"] !== undefined ? _data["markforName"] : <any>null;
            this.shipTo = _data["shipTo"] !== undefined ? _data["shipTo"] : <any>null;
            this.shipToName = _data["shipToName"] !== undefined ? _data["shipToName"] : <any>null;
            this.materialNum = _data["materialNum"] !== undefined ? _data["materialNum"] : <any>null;
            this.materialDesc = _data["materialDesc"] !== undefined ? _data["materialDesc"] : <any>null;
            this.brand = _data["brand"] !== undefined ? _data["brand"] : <any>null;
            this.materialGroupDesc = _data["materialGroupDesc"] !== undefined ? _data["materialGroupDesc"] : <any>null;
            this.wheelType = _data["wheelType"] !== undefined ? _data["wheelType"] : <any>null;
            this.diameter = _data["diameter"] !== undefined ? _data["diameter"] : <any>null;
            this.thickness = _data["thickness"] !== undefined ? _data["thickness"] : <any>null;
            this.holeSize = _data["holeSize"] !== undefined ? _data["holeSize"] : <any>null;
            this.abrasive1 = _data["abrasive1"] !== undefined ? _data["abrasive1"] : <any>null;
            this.grit = _data["grit"] !== undefined ? _data["grit"] : <any>null;
            this.grade = _data["grade"] !== undefined ? _data["grade"] : <any>null;
            this.bond = _data["bond"] !== undefined ? _data["bond"] : <any>null;
            this.externalMarkingSpec = _data["externalMarkingSpec"] !== undefined ? _data["externalMarkingSpec"] : <any>null;
            this.endUseDesc = _data["endUseDesc"] !== undefined ? _data["endUseDesc"] : <any>null;
            this.length = _data["length"] !== undefined ? _data["length"] : <any>null;
            this.width = _data["width"] !== undefined ? _data["width"] : <any>null;
            this.shape = _data["shape"] !== undefined ? _data["shape"] : <any>null;
            this.shapeFamilyDesc = _data["shapeFamilyDesc"] !== undefined ? _data["shapeFamilyDesc"] : <any>null;
            this.subShape = _data["subShape"] !== undefined ? _data["subShape"] : <any>null;
            this.l1Desc = _data["l1Desc"] !== undefined ? _data["l1Desc"] : <any>null;
            this.l2Desc = _data["l2Desc"] !== undefined ? _data["l2Desc"] : <any>null;
            this.l3Desc = _data["l3Desc"] !== undefined ? _data["l3Desc"] : <any>null;
            this.marketSegment = _data["marketSegment"] !== undefined ? _data["marketSegment"] : <any>null;
            this.smR_42 = _data["smR_42"] !== undefined ? _data["smR_42"] : <any>null;
            this.smR_17 = _data["smR_17"] ? new Date(_data["smR_17"].toString()) : <any>null;
            this.smR_Group = _data["smR_Group"] !== undefined ? _data["smR_Group"] : <any>null;
            this.segment_Product = _data["segment_Product"] !== undefined ? _data["segment_Product"] : <any>null;
            this.channel = _data["channel"] !== undefined ? _data["channel"] : <any>null;
            this.salesOffice = _data["salesOffice"] !== undefined ? _data["salesOffice"] : <any>null;
            this.region = _data["region"] !== undefined ? _data["region"] : <any>null;
            this.division = _data["division"] !== undefined ? _data["division"] : <any>null;
            this.sellingPlant = _data["sellingPlant"] !== undefined ? _data["sellingPlant"] : <any>null;
            this.capGroup = _data["capGroup"] !== undefined ? _data["capGroup"] : <any>null;
            this.marketingCapCode = _data["marketingCapCode"] !== undefined ? _data["marketingCapCode"] : <any>null;
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>null;
            this.oiT_QTY = _data["oiT_QTY"] !== undefined ? _data["oiT_QTY"] : <any>null;
            this.saleUOM = _data["saleUOM"] !== undefined ? _data["saleUOM"] : <any>null;
            this.uomConvNumerator = _data["uomConvNumerator"] !== undefined ? _data["uomConvNumerator"] : <any>null;
            this.uomConvDenominator = _data["uomConvDenominator"] !== undefined ? _data["uomConvDenominator"] : <any>null;
            this.oitsaleS_RC_BUDRATE = _data["oitsaleS_RC_BUDRATE"] !== undefined ? _data["oitsaleS_RC_BUDRATE"] : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.province = _data["province"] !== undefined ? _data["province"] : <any>null;
            this.salesTerritory = _data["salesTerritory"] !== undefined ? _data["salesTerritory"] : <any>null;
            this.salesTerrName = _data["salesTerrName"] !== undefined ? _data["salesTerrName"] : <any>null;
            this.salesRepresentative = _data["salesRepresentative"] !== undefined ? _data["salesRepresentative"] : <any>null;
            this.salesName = _data["salesName"] !== undefined ? _data["salesName"] : <any>null;
            this.usageIndicatorDesc = _data["usageIndicatorDesc"] !== undefined ? _data["usageIndicatorDesc"] : <any>null;
            this.oitPeriod = _data["oitPeriod"] !== undefined ? _data["oitPeriod"] : <any>null;
            this.purchaseOrderType = _data["purchaseOrderType"] !== undefined ? _data["purchaseOrderType"] : <any>null;
            this.orderPeriod = _data["orderPeriod"] !== undefined ? _data["orderPeriod"] : <any>null;
            this.markforSalesRep = _data["markforSalesRep"] !== undefined ? _data["markforSalesRep"] : <any>null;
            this.markforRegion = _data["markforRegion"] !== undefined ? _data["markforRegion"] : <any>null;
            this.cap = _data["cap"] !== undefined ? _data["cap"] : <any>null;
            this.custClass = _data["custClass"] !== undefined ? _data["custClass"] : <any>null;
            this.markForSalesRepName = _data["markForSalesRepName"] !== undefined ? _data["markForSalesRepName"] : <any>null;
            this.salesRepNum = _data["salesRepNum"] !== undefined ? _data["salesRepNum"] : <any>null;
            this.outerUpcDesc = _data["outerUpcDesc"] !== undefined ? _data["outerUpcDesc"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): TempOrdersMonthly {
        data = typeof data === 'object' ? data : {};
        return createInstance<TempOrdersMonthly>(data, _mappings, TempOrdersMonthly);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["custMaterialNum"] = this.custMaterialNum !== undefined ? this.custMaterialNum : <any>null;
        data["unionSoldTo"] = this.unionSoldTo !== undefined ? this.unionSoldTo : <any>null;
        data["unionSoldToName"] = this.unionSoldToName !== undefined ? this.unionSoldToName : <any>null;
        data["unionMarkfor"] = this.unionMarkfor !== undefined ? this.unionMarkfor : <any>null;
        data["unionMarkforName"] = this.unionMarkforName !== undefined ? this.unionMarkforName : <any>null;
        data["orderNum"] = this.orderNum !== undefined ? this.orderNum : <any>null;
        data["lineNum"] = this.lineNum !== undefined ? this.lineNum : <any>null;
        data["orderType"] = this.orderType !== undefined ? this.orderType : <any>null;
        data["custPO"] = this.custPO !== undefined ? this.custPO : <any>null;
        data["soldTo"] = this.soldTo !== undefined ? this.soldTo : <any>null;
        data["soldToName"] = this.soldToName !== undefined ? this.soldToName : <any>null;
        data["payer"] = this.payer !== undefined ? this.payer : <any>null;
        data["payerName"] = this.payerName ? this.payerName.toISOString() : <any>null;
        data["markfor"] = this.markfor !== undefined ? this.markfor : <any>null;
        data["markforName"] = this.markforName !== undefined ? this.markforName : <any>null;
        data["shipTo"] = this.shipTo !== undefined ? this.shipTo : <any>null;
        data["shipToName"] = this.shipToName !== undefined ? this.shipToName : <any>null;
        data["materialNum"] = this.materialNum !== undefined ? this.materialNum : <any>null;
        data["materialDesc"] = this.materialDesc !== undefined ? this.materialDesc : <any>null;
        data["brand"] = this.brand !== undefined ? this.brand : <any>null;
        data["materialGroupDesc"] = this.materialGroupDesc !== undefined ? this.materialGroupDesc : <any>null;
        data["wheelType"] = this.wheelType !== undefined ? this.wheelType : <any>null;
        data["diameter"] = this.diameter !== undefined ? this.diameter : <any>null;
        data["thickness"] = this.thickness !== undefined ? this.thickness : <any>null;
        data["holeSize"] = this.holeSize !== undefined ? this.holeSize : <any>null;
        data["abrasive1"] = this.abrasive1 !== undefined ? this.abrasive1 : <any>null;
        data["grit"] = this.grit !== undefined ? this.grit : <any>null;
        data["grade"] = this.grade !== undefined ? this.grade : <any>null;
        data["bond"] = this.bond !== undefined ? this.bond : <any>null;
        data["externalMarkingSpec"] = this.externalMarkingSpec !== undefined ? this.externalMarkingSpec : <any>null;
        data["endUseDesc"] = this.endUseDesc !== undefined ? this.endUseDesc : <any>null;
        data["length"] = this.length !== undefined ? this.length : <any>null;
        data["width"] = this.width !== undefined ? this.width : <any>null;
        data["shape"] = this.shape !== undefined ? this.shape : <any>null;
        data["shapeFamilyDesc"] = this.shapeFamilyDesc !== undefined ? this.shapeFamilyDesc : <any>null;
        data["subShape"] = this.subShape !== undefined ? this.subShape : <any>null;
        data["l1Desc"] = this.l1Desc !== undefined ? this.l1Desc : <any>null;
        data["l2Desc"] = this.l2Desc !== undefined ? this.l2Desc : <any>null;
        data["l3Desc"] = this.l3Desc !== undefined ? this.l3Desc : <any>null;
        data["marketSegment"] = this.marketSegment !== undefined ? this.marketSegment : <any>null;
        data["smR_42"] = this.smR_42 !== undefined ? this.smR_42 : <any>null;
        data["smR_17"] = this.smR_17 ? this.smR_17.toISOString() : <any>null;
        data["smR_Group"] = this.smR_Group !== undefined ? this.smR_Group : <any>null;
        data["segment_Product"] = this.segment_Product !== undefined ? this.segment_Product : <any>null;
        data["channel"] = this.channel !== undefined ? this.channel : <any>null;
        data["salesOffice"] = this.salesOffice !== undefined ? this.salesOffice : <any>null;
        data["region"] = this.region !== undefined ? this.region : <any>null;
        data["division"] = this.division !== undefined ? this.division : <any>null;
        data["sellingPlant"] = this.sellingPlant !== undefined ? this.sellingPlant : <any>null;
        data["capGroup"] = this.capGroup !== undefined ? this.capGroup : <any>null;
        data["marketingCapCode"] = this.marketingCapCode !== undefined ? this.marketingCapCode : <any>null;
        data["date"] = this.date ? this.date.toISOString() : <any>null;
        data["oiT_QTY"] = this.oiT_QTY !== undefined ? this.oiT_QTY : <any>null;
        data["saleUOM"] = this.saleUOM !== undefined ? this.saleUOM : <any>null;
        data["uomConvNumerator"] = this.uomConvNumerator !== undefined ? this.uomConvNumerator : <any>null;
        data["uomConvDenominator"] = this.uomConvDenominator !== undefined ? this.uomConvDenominator : <any>null;
        data["oitsaleS_RC_BUDRATE"] = this.oitsaleS_RC_BUDRATE !== undefined ? this.oitsaleS_RC_BUDRATE : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["province"] = this.province !== undefined ? this.province : <any>null;
        data["salesTerritory"] = this.salesTerritory !== undefined ? this.salesTerritory : <any>null;
        data["salesTerrName"] = this.salesTerrName !== undefined ? this.salesTerrName : <any>null;
        data["salesRepresentative"] = this.salesRepresentative !== undefined ? this.salesRepresentative : <any>null;
        data["salesName"] = this.salesName !== undefined ? this.salesName : <any>null;
        data["usageIndicatorDesc"] = this.usageIndicatorDesc !== undefined ? this.usageIndicatorDesc : <any>null;
        data["oitPeriod"] = this.oitPeriod !== undefined ? this.oitPeriod : <any>null;
        data["purchaseOrderType"] = this.purchaseOrderType !== undefined ? this.purchaseOrderType : <any>null;
        data["orderPeriod"] = this.orderPeriod !== undefined ? this.orderPeriod : <any>null;
        data["markforSalesRep"] = this.markforSalesRep !== undefined ? this.markforSalesRep : <any>null;
        data["markforRegion"] = this.markforRegion !== undefined ? this.markforRegion : <any>null;
        data["cap"] = this.cap !== undefined ? this.cap : <any>null;
        data["custClass"] = this.custClass !== undefined ? this.custClass : <any>null;
        data["markForSalesRepName"] = this.markForSalesRepName !== undefined ? this.markForSalesRepName : <any>null;
        data["salesRepNum"] = this.salesRepNum !== undefined ? this.salesRepNum : <any>null;
        data["outerUpcDesc"] = this.outerUpcDesc !== undefined ? this.outerUpcDesc : <any>null;
        return data; 
    }
}

export class PagedResultDtoOfTempOrdersMonthly {
    totalCount!: number;
    items!: TempOrdersMonthly[] | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"] !== undefined ? _data["totalCount"] : <any>null;
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(TempOrdersMonthly.fromJS(item, _mappings));
            }
        }
    }

    static fromJS(data: any, _mappings?: any): PagedResultDtoOfTempOrdersMonthly {
        data = typeof data === 'object' ? data : {};
        return createInstance<PagedResultDtoOfTempOrdersMonthly>(data, _mappings, PagedResultDtoOfTempOrdersMonthly);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : <any>null;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export class TempOrdersMonthlyInputDto {
    salesOffice!: string | null;
    smR_Group!: string | null;
    custClass!: string | null;
    customerSize!: string | null;
    startTime!: number | null;
    endTime!: number | null;
    repNum!: string[] | null;
    filter!: string | null;
    tableColumn!: string | null;
    sorting!: string | null;
    skipCount!: number;
    maxResultCount!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.salesOffice = _data["salesOffice"] !== undefined ? _data["salesOffice"] : <any>null;
            this.smR_Group = _data["smR_Group"] !== undefined ? _data["smR_Group"] : <any>null;
            this.custClass = _data["custClass"] !== undefined ? _data["custClass"] : <any>null;
            this.customerSize = _data["customerSize"] !== undefined ? _data["customerSize"] : <any>null;
            this.startTime = _data["startTime"] !== undefined ? _data["startTime"] : <any>null;
            this.endTime = _data["endTime"] !== undefined ? _data["endTime"] : <any>null;
            if (Array.isArray(_data["repNum"])) {
                this.repNum = [] as any;
                for (let item of _data["repNum"])
                    this.repNum!.push(item);
            }
            this.filter = _data["filter"] !== undefined ? _data["filter"] : <any>null;
            this.tableColumn = _data["tableColumn"] !== undefined ? _data["tableColumn"] : <any>null;
            this.sorting = _data["sorting"] !== undefined ? _data["sorting"] : <any>null;
            this.skipCount = _data["skipCount"] !== undefined ? _data["skipCount"] : <any>null;
            this.maxResultCount = _data["maxResultCount"] !== undefined ? _data["maxResultCount"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): TempOrdersMonthlyInputDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<TempOrdersMonthlyInputDto>(data, _mappings, TempOrdersMonthlyInputDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["salesOffice"] = this.salesOffice !== undefined ? this.salesOffice : <any>null;
        data["smR_Group"] = this.smR_Group !== undefined ? this.smR_Group : <any>null;
        data["custClass"] = this.custClass !== undefined ? this.custClass : <any>null;
        data["customerSize"] = this.customerSize !== undefined ? this.customerSize : <any>null;
        data["startTime"] = this.startTime !== undefined ? this.startTime : <any>null;
        data["endTime"] = this.endTime !== undefined ? this.endTime : <any>null;
        if (Array.isArray(this.repNum)) {
            data["repNum"] = [];
            for (let item of this.repNum)
                data["repNum"].push(item);
        }
        data["filter"] = this.filter !== undefined ? this.filter : <any>null;
        data["tableColumn"] = this.tableColumn !== undefined ? this.tableColumn : <any>null;
        data["sorting"] = this.sorting !== undefined ? this.sorting : <any>null;
        data["skipCount"] = this.skipCount !== undefined ? this.skipCount : <any>null;
        data["maxResultCount"] = this.maxResultCount !== undefined ? this.maxResultCount : <any>null;
        return data; 
    }
}

export class OrganizationUnitDto {
    parentId!: number | null;
    code!: string | null;
    displayName!: string | null;
    memberCount!: number;
    roleCount!: number;
    lastModificationTime!: Date | null;
    lastModifierUserId!: number | null;
    creationTime!: Date;
    creatorUserId!: number | null;
    id!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.parentId = _data["parentId"] !== undefined ? _data["parentId"] : <any>null;
            this.code = _data["code"] !== undefined ? _data["code"] : <any>null;
            this.displayName = _data["displayName"] !== undefined ? _data["displayName"] : <any>null;
            this.memberCount = _data["memberCount"] !== undefined ? _data["memberCount"] : <any>null;
            this.roleCount = _data["roleCount"] !== undefined ? _data["roleCount"] : <any>null;
            this.lastModificationTime = _data["lastModificationTime"] ? new Date(_data["lastModificationTime"].toString()) : <any>null;
            this.lastModifierUserId = _data["lastModifierUserId"] !== undefined ? _data["lastModifierUserId"] : <any>null;
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>null;
            this.creatorUserId = _data["creatorUserId"] !== undefined ? _data["creatorUserId"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): OrganizationUnitDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<OrganizationUnitDto>(data, _mappings, OrganizationUnitDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentId"] = this.parentId !== undefined ? this.parentId : <any>null;
        data["code"] = this.code !== undefined ? this.code : <any>null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : <any>null;
        data["memberCount"] = this.memberCount !== undefined ? this.memberCount : <any>null;
        data["roleCount"] = this.roleCount !== undefined ? this.roleCount : <any>null;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>null;
        data["lastModifierUserId"] = this.lastModifierUserId !== undefined ? this.lastModifierUserId : <any>null;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>null;
        data["creatorUserId"] = this.creatorUserId !== undefined ? this.creatorUserId : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class ListResultDtoOfOrganizationUnitDto {
    items!: OrganizationUnitDto[] | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(OrganizationUnitDto.fromJS(item, _mappings));
            }
        }
    }

    static fromJS(data: any, _mappings?: any): ListResultDtoOfOrganizationUnitDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<ListResultDtoOfOrganizationUnitDto>(data, _mappings, ListResultDtoOfOrganizationUnitDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export class OrganizationUnitUserListDto {
    name!: string | null;
    surname!: string | null;
    userName!: string | null;
    emailAddress!: string | null;
    profilePictureId!: string | null;
    addedTime!: Date;
    id!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.surname = _data["surname"] !== undefined ? _data["surname"] : <any>null;
            this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
            this.emailAddress = _data["emailAddress"] !== undefined ? _data["emailAddress"] : <any>null;
            this.profilePictureId = _data["profilePictureId"] !== undefined ? _data["profilePictureId"] : <any>null;
            this.addedTime = _data["addedTime"] ? new Date(_data["addedTime"].toString()) : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): OrganizationUnitUserListDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<OrganizationUnitUserListDto>(data, _mappings, OrganizationUnitUserListDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["surname"] = this.surname !== undefined ? this.surname : <any>null;
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : <any>null;
        data["profilePictureId"] = this.profilePictureId !== undefined ? this.profilePictureId : <any>null;
        data["addedTime"] = this.addedTime ? this.addedTime.toISOString() : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class PagedResultDtoOfOrganizationUnitUserListDto {
    totalCount!: number;
    items!: OrganizationUnitUserListDto[] | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"] !== undefined ? _data["totalCount"] : <any>null;
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(OrganizationUnitUserListDto.fromJS(item, _mappings));
            }
        }
    }

    static fromJS(data: any, _mappings?: any): PagedResultDtoOfOrganizationUnitUserListDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<PagedResultDtoOfOrganizationUnitUserListDto>(data, _mappings, PagedResultDtoOfOrganizationUnitUserListDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : <any>null;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export class OrganizationUnitRoleListDto {
    displayName!: string | null;
    name!: string | null;
    addedTime!: Date;
    id!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.displayName = _data["displayName"] !== undefined ? _data["displayName"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.addedTime = _data["addedTime"] ? new Date(_data["addedTime"].toString()) : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): OrganizationUnitRoleListDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<OrganizationUnitRoleListDto>(data, _mappings, OrganizationUnitRoleListDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName !== undefined ? this.displayName : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["addedTime"] = this.addedTime ? this.addedTime.toISOString() : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class PagedResultDtoOfOrganizationUnitRoleListDto {
    totalCount!: number;
    items!: OrganizationUnitRoleListDto[] | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"] !== undefined ? _data["totalCount"] : <any>null;
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(OrganizationUnitRoleListDto.fromJS(item, _mappings));
            }
        }
    }

    static fromJS(data: any, _mappings?: any): PagedResultDtoOfOrganizationUnitRoleListDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<PagedResultDtoOfOrganizationUnitRoleListDto>(data, _mappings, PagedResultDtoOfOrganizationUnitRoleListDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : <any>null;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export class CreateOrganizationUnitInput {
    parentId!: number | null;
    displayName!: string;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.parentId = _data["parentId"] !== undefined ? _data["parentId"] : <any>null;
            this.displayName = _data["displayName"] !== undefined ? _data["displayName"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): CreateOrganizationUnitInput {
        data = typeof data === 'object' ? data : {};
        return createInstance<CreateOrganizationUnitInput>(data, _mappings, CreateOrganizationUnitInput);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentId"] = this.parentId !== undefined ? this.parentId : <any>null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : <any>null;
        return data; 
    }
}

export class UpdateOrganizationUnitInput {
    id!: number;
    displayName!: string;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.displayName = _data["displayName"] !== undefined ? _data["displayName"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): UpdateOrganizationUnitInput {
        data = typeof data === 'object' ? data : {};
        return createInstance<UpdateOrganizationUnitInput>(data, _mappings, UpdateOrganizationUnitInput);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : <any>null;
        return data; 
    }
}

export class MoveOrganizationUnitInput {
    id!: number;
    newParentId!: number | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.newParentId = _data["newParentId"] !== undefined ? _data["newParentId"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): MoveOrganizationUnitInput {
        data = typeof data === 'object' ? data : {};
        return createInstance<MoveOrganizationUnitInput>(data, _mappings, MoveOrganizationUnitInput);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["newParentId"] = this.newParentId !== undefined ? this.newParentId : <any>null;
        return data; 
    }
}

export class UsersToOrganizationUnitInput {
    userIds!: number[] | null;
    organizationUnitId!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            if (Array.isArray(_data["userIds"])) {
                this.userIds = [] as any;
                for (let item of _data["userIds"])
                    this.userIds!.push(item);
            }
            this.organizationUnitId = _data["organizationUnitId"] !== undefined ? _data["organizationUnitId"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): UsersToOrganizationUnitInput {
        data = typeof data === 'object' ? data : {};
        return createInstance<UsersToOrganizationUnitInput>(data, _mappings, UsersToOrganizationUnitInput);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.userIds)) {
            data["userIds"] = [];
            for (let item of this.userIds)
                data["userIds"].push(item);
        }
        data["organizationUnitId"] = this.organizationUnitId !== undefined ? this.organizationUnitId : <any>null;
        return data; 
    }
}

export class RolesToOrganizationUnitInput {
    roleIds!: number[] | null;
    organizationUnitId!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            if (Array.isArray(_data["roleIds"])) {
                this.roleIds = [] as any;
                for (let item of _data["roleIds"])
                    this.roleIds!.push(item);
            }
            this.organizationUnitId = _data["organizationUnitId"] !== undefined ? _data["organizationUnitId"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): RolesToOrganizationUnitInput {
        data = typeof data === 'object' ? data : {};
        return createInstance<RolesToOrganizationUnitInput>(data, _mappings, RolesToOrganizationUnitInput);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.roleIds)) {
            data["roleIds"] = [];
            for (let item of this.roleIds)
                data["roleIds"].push(item);
        }
        data["organizationUnitId"] = this.organizationUnitId !== undefined ? this.organizationUnitId : <any>null;
        return data; 
    }
}

export class FindOrganizationUnitUsersInput {
    organizationUnitId!: number;
    maxResultCount!: number;
    skipCount!: number;
    filter!: string | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.organizationUnitId = _data["organizationUnitId"] !== undefined ? _data["organizationUnitId"] : <any>null;
            this.maxResultCount = _data["maxResultCount"] !== undefined ? _data["maxResultCount"] : <any>null;
            this.skipCount = _data["skipCount"] !== undefined ? _data["skipCount"] : <any>null;
            this.filter = _data["filter"] !== undefined ? _data["filter"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): FindOrganizationUnitUsersInput {
        data = typeof data === 'object' ? data : {};
        return createInstance<FindOrganizationUnitUsersInput>(data, _mappings, FindOrganizationUnitUsersInput);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["organizationUnitId"] = this.organizationUnitId !== undefined ? this.organizationUnitId : <any>null;
        data["maxResultCount"] = this.maxResultCount !== undefined ? this.maxResultCount : <any>null;
        data["skipCount"] = this.skipCount !== undefined ? this.skipCount : <any>null;
        data["filter"] = this.filter !== undefined ? this.filter : <any>null;
        return data; 
    }
}

export class PagedResultDtoOfNameValueDto {
    totalCount!: number;
    items!: NameValueDto[] | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"] !== undefined ? _data["totalCount"] : <any>null;
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(NameValueDto.fromJS(item, _mappings));
            }
        }
    }

    static fromJS(data: any, _mappings?: any): PagedResultDtoOfNameValueDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<PagedResultDtoOfNameValueDto>(data, _mappings, PagedResultDtoOfNameValueDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : <any>null;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export class FindOrganizationUnitRolesInput {
    organizationUnitId!: number;
    maxResultCount!: number;
    skipCount!: number;
    filter!: string | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.organizationUnitId = _data["organizationUnitId"] !== undefined ? _data["organizationUnitId"] : <any>null;
            this.maxResultCount = _data["maxResultCount"] !== undefined ? _data["maxResultCount"] : <any>null;
            this.skipCount = _data["skipCount"] !== undefined ? _data["skipCount"] : <any>null;
            this.filter = _data["filter"] !== undefined ? _data["filter"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): FindOrganizationUnitRolesInput {
        data = typeof data === 'object' ? data : {};
        return createInstance<FindOrganizationUnitRolesInput>(data, _mappings, FindOrganizationUnitRolesInput);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["organizationUnitId"] = this.organizationUnitId !== undefined ? this.organizationUnitId : <any>null;
        data["maxResultCount"] = this.maxResultCount !== undefined ? this.maxResultCount : <any>null;
        data["skipCount"] = this.skipCount !== undefined ? this.skipCount : <any>null;
        data["filter"] = this.filter !== undefined ? this.filter : <any>null;
        return data; 
    }
}

export class FlatPermissionWithLevelDto {
    level!: number;
    parentName!: string | null;
    name!: string | null;
    displayName!: string | null;
    description!: string | null;
    isGrantedByDefault!: boolean;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.level = _data["level"] !== undefined ? _data["level"] : <any>null;
            this.parentName = _data["parentName"] !== undefined ? _data["parentName"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.displayName = _data["displayName"] !== undefined ? _data["displayName"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.isGrantedByDefault = _data["isGrantedByDefault"] !== undefined ? _data["isGrantedByDefault"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): FlatPermissionWithLevelDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<FlatPermissionWithLevelDto>(data, _mappings, FlatPermissionWithLevelDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["level"] = this.level !== undefined ? this.level : <any>null;
        data["parentName"] = this.parentName !== undefined ? this.parentName : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["isGrantedByDefault"] = this.isGrantedByDefault !== undefined ? this.isGrantedByDefault : <any>null;
        return data; 
    }
}

export class ListResultDtoOfFlatPermissionWithLevelDto {
    items!: FlatPermissionWithLevelDto[] | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(FlatPermissionWithLevelDto.fromJS(item, _mappings));
            }
        }
    }

    static fromJS(data: any, _mappings?: any): ListResultDtoOfFlatPermissionWithLevelDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<ListResultDtoOfFlatPermissionWithLevelDto>(data, _mappings, ListResultDtoOfFlatPermissionWithLevelDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export enum PermissionEnums {
    Pages = 0,
    Pages_Administration = 1,
    Pages_Tenants = 2,
    Pages_Users = 3,
    Pages_Roles = 4,
    Pages_Administration_AuditLogs = 5,
    Pages_Administration_Users_Create = 6,
    Pages_Administration_Users_Edit = 7,
    Pages_Administration_Languages = 8,
    Pages_Administration_Languages_Create = 9,
    Pages_Administration_Languages_Edit = 10,
    Pages_Administration_Languages_ChangeTexts = 11,
    Pages_Administration_Roles = 12,
    Pages_Administration_Roles_Create = 13,
    Pages_Administration_Roles_Edit = 14,
    Pages_Administration_Roles_Delete = 15,
    Pages_Administration_OrganizationUnits = 16,
    Pages_Administration_OrganizationUnits_ManageOrganizationTree = 17,
    Pages_Administration_OrganizationUnits_ManageMembers = 18,
    Pages_Administration_OrganizationUnits_ManageRoles = 19,
    Pages_NewCustomer = 20,
    Pages_NewCustomer_Shengcheng = 21,
    Pages_NewCustomer_Validate = 22,
    Pages_SalesIncentive = 23,
    AbpIdentity_Roles_Create = 24,
    AbpIdentity_Roles_ManageRouteConfig = 25,
    ApiGateway_AggregateRoute_Create = 26,
    ApiGateway_AggregateRoute_Update = 27,
    ApiGateway_AggregateRoute_Delete = 28,
    Pages_Administration_SysDicts = 29,
    Pages_Administration_SysDicts_Create = 30,
    Pages_Administration_SysDicts_Edit = 31,
    Pages_Administration_SysDicts_Delete = 32,
    Pages_Administration_SysDicts_GetByCategory = 33,
    Pages_Visit = 34,
    Pages_Tool = 35,
    Pages_Tool_ExcelDataCollectTool = 36,
    Pages_Tool_UPCMakeanInquiry = 37,
    Pages_ProductMaster = 38,
    Pages_ProductMaster_StandardProduct = 39,
    Pages_ProductMaster_StandardProduct_ProductHierarchy = 40,
    Pages_ProductMaster_StandardProduct_StandardProduct = 41,
    Pages_BatchStCheckStrategicProduct = 42,
    Pages_ProductMaster_StrategicProduct = 43,
    Pages_ProductMaster_StrategicProduct_QueryProduct = 44,
    Pages_ProductMaster_StrategicProduct_ManageStrategicProduct = 45,
    Pages_ManageCustomer = 46,
    Pages_Customer_CustomerUnionData = 47,
    Pages_Customer_NewCustomer = 48,
    Pages_Customer_SalseMapping = 49,
    Pages_SalesDataManagement = 50,
    Pages_SalesDashboardTarget_SalesTargetManagement = 51,
    Pages_SalesDataAnalysis = 52,
    Pages_SalesDataAnalysis_R20 = 53,
    Pages_SalesDataAnalysis_R04 = 54,
    Pages_SystemSettings = 55,
    Pages_SystemSettings_User = 56,
    Pages_SystemSettings_Role = 57,
    Pages_ProductMaster_SubPlatform = 58,
    Pages_Administration_SalesTargets_CreateOrEdit = 59,
    ViewALLDashboardData = 60,
    Pages_SalesDataAnalysis_Uphold = 61,
    Pages_SalesDashboard_ReportForms = 62,
    Pages_SalesDashboard_CompleteReportForms = 63,
    Pages_SalesDashboard_CompleteChartReportForms = 64,
    Pages_SalesDataAnalysis_NewOppo = 65,
    Pages_SalesDataAnalysis_CallReport = 66,
    Pages_SalesDataAnalysis_Inquiry = 67,
    Pages_SalesDataAnalysis_TAP = 68,
    Pages_SalesDataAnalysis_Strategic = 69,
    Pages_SalesDataAnalysis_NewCus = 70,
    Pages_SalesData_CRM = 71,
    Pages_SalesData_CRM_AllSalesData = 72,
    Page_View_CustomerUnion = 73,
    Page_View_CRM_OpenOrder = 74,
    Page_View_CRM_SalesList = 75,
    Page_View_CRM_ordersList = 76,
    Pages_QuotationIndex = 77,
    Pages_QuotationView = 78,
    Page_QuotationBAView = 79,
    Page_QuotationBAPE = 80,
    Page_QuotationBAUPCMaintain = 81,
    Page_QuotationSAView = 82,
    Page_QuotationSAPE = 83,
    Page_QuotationSAUPCMaintain = 84,
    Page_QuotationSAViewUPCMaintain = 85,
    Page_QuotationCAView = 86,
    Page_QuotationCAPE = 87,
    Page_QuotationCAUPCMaintain = 88,
    Page_QuotationTWView = 89,
    Page_QuotationTWPE = 90,
    Page_QuotationTWUPCMaintain = 91,
    Page_QuotationCPView = 92,
    Page_QuotationCPPE = 93,
    Page_QuotationCPUPCMaintain = 94,
    Page_QuotationSCView = 95,
    Page_QuotationSCPE = 96,
    Page_QuotationSCUPCMaintain = 97,
    Page_QuotationCOPrice = 98,
    Page_QuotationCreator = 99,
    Page_QuotationCS = 100,
    Page_QuotationApprover = 101,
    Page_QuotationViewAll = 102,
    Page_RecveSubplatformError = 103,
    Page_PriceBookView = 104,
    Page_PriceListView = 105,
}

export class SP_List_SGI_ForPartnerLink_CN_Result {
    sgi!: string | null;
    displayName!: string | null;
    salesOrg!: string | null;
    salesDistrict!: string | null;
    salesOffice!: string | null;
    partner!: string | null;
    representative!: string | null;
    representativeDesc!: string | null;
    smR_MarketSegment!: string | null;
    smR_MarketSegmentDesc!: string | null;
    soA_Division!: string | null;
    soA_DivisionDesc!: string | null;
    sgiPartners!: string | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.sgi = _data["sgi"] !== undefined ? _data["sgi"] : <any>null;
            this.displayName = _data["displayName"] !== undefined ? _data["displayName"] : <any>null;
            this.salesOrg = _data["salesOrg"] !== undefined ? _data["salesOrg"] : <any>null;
            this.salesDistrict = _data["salesDistrict"] !== undefined ? _data["salesDistrict"] : <any>null;
            this.salesOffice = _data["salesOffice"] !== undefined ? _data["salesOffice"] : <any>null;
            this.partner = _data["partner"] !== undefined ? _data["partner"] : <any>null;
            this.representative = _data["representative"] !== undefined ? _data["representative"] : <any>null;
            this.representativeDesc = _data["representativeDesc"] !== undefined ? _data["representativeDesc"] : <any>null;
            this.smR_MarketSegment = _data["smR_MarketSegment"] !== undefined ? _data["smR_MarketSegment"] : <any>null;
            this.smR_MarketSegmentDesc = _data["smR_MarketSegmentDesc"] !== undefined ? _data["smR_MarketSegmentDesc"] : <any>null;
            this.soA_Division = _data["soA_Division"] !== undefined ? _data["soA_Division"] : <any>null;
            this.soA_DivisionDesc = _data["soA_DivisionDesc"] !== undefined ? _data["soA_DivisionDesc"] : <any>null;
            this.sgiPartners = _data["sgiPartners"] !== undefined ? _data["sgiPartners"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): SP_List_SGI_ForPartnerLink_CN_Result {
        data = typeof data === 'object' ? data : {};
        return createInstance<SP_List_SGI_ForPartnerLink_CN_Result>(data, _mappings, SP_List_SGI_ForPartnerLink_CN_Result);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sgi"] = this.sgi !== undefined ? this.sgi : <any>null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : <any>null;
        data["salesOrg"] = this.salesOrg !== undefined ? this.salesOrg : <any>null;
        data["salesDistrict"] = this.salesDistrict !== undefined ? this.salesDistrict : <any>null;
        data["salesOffice"] = this.salesOffice !== undefined ? this.salesOffice : <any>null;
        data["partner"] = this.partner !== undefined ? this.partner : <any>null;
        data["representative"] = this.representative !== undefined ? this.representative : <any>null;
        data["representativeDesc"] = this.representativeDesc !== undefined ? this.representativeDesc : <any>null;
        data["smR_MarketSegment"] = this.smR_MarketSegment !== undefined ? this.smR_MarketSegment : <any>null;
        data["smR_MarketSegmentDesc"] = this.smR_MarketSegmentDesc !== undefined ? this.smR_MarketSegmentDesc : <any>null;
        data["soA_Division"] = this.soA_Division !== undefined ? this.soA_Division : <any>null;
        data["soA_DivisionDesc"] = this.soA_DivisionDesc !== undefined ? this.soA_DivisionDesc : <any>null;
        data["sgiPartners"] = this.sgiPartners !== undefined ? this.sgiPartners : <any>null;
        return data; 
    }
}

export enum MemberTypes {
    Constructor = 1,
    Event = 2,
    Field = 4,
    Method = 8,
    Property = 16,
    TypeInfo = 32,
    Custom = 64,
    NestedType = 128,
    All = 191,
}

export enum ParameterAttributes {
    None = 0,
    In = 1,
    Out = 2,
    Lcid = 4,
    Retval = 8,
    Optional = 16,
    HasDefault = 4096,
    HasFieldMarshal = 8192,
    Reserved3 = 16384,
    Reserved4 = 32768,
    ReservedMask = 61440,
}

export enum MethodAttributes {
    ReuseSlot = 0,
    PrivateScope = 1,
    Private = 2,
    FamANDAssem = 3,
    Assembly = 4,
    Family = 5,
    FamORAssem = 6,
    Public = 7,
    MemberAccessMask = 8,
    UnmanagedExport = 16,
    Static = 32,
    Final = 64,
    Virtual = 128,
    HideBySig = 256,
    NewSlot = 512,
    VtableLayoutMask = 1024,
    CheckAccessOnOverride = 2048,
    Abstract = 4096,
    SpecialName = 8192,
    RTSpecialName = 16384,
    PinvokeImpl = 32768,
    HasSecurity = 53248,
}

export enum MethodImplAttributes {
    IL = 0,
    Managed = 1,
    Native = 2,
    OPTIL = 3,
    Runtime = 4,
    CodeTypeMask = 8,
    Unmanaged = 16,
    ManagedMask = 32,
    NoInlining = 64,
    ForwardRef = 128,
    Synchronized = 256,
    NoOptimization = 512,
    PreserveSig = 4096,
    AggressiveInlining = 65535,
}

export enum CallingConventions {
    Standard = 1,
    VarArgs = 2,
    Any = 3,
    HasThis = 32,
    ExplicitThis = 64,
}

export class IntPtr {

    init(_data?: any, _mappings?: any) {
    }

    static fromJS(data: any, _mappings?: any): IntPtr {
        data = typeof data === 'object' ? data : {};
        return createInstance<IntPtr>(data, _mappings, IntPtr);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export class RuntimeMethodHandle {
    value!: IntPtr;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.value = _data["value"] ? IntPtr.fromJS(_data["value"], _mappings) : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): RuntimeMethodHandle {
        data = typeof data === 'object' ? data : {};
        return createInstance<RuntimeMethodHandle>(data, _mappings, RuntimeMethodHandle);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value ? this.value.toJSON() : <any>null;
        return data; 
    }
}

export class ModuleHandle {
    readonly mdStreamVersion!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            (<any>this).mdStreamVersion = _data["mdStreamVersion"] !== undefined ? _data["mdStreamVersion"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): ModuleHandle {
        data = typeof data === 'object' ? data : {};
        return createInstance<ModuleHandle>(data, _mappings, ModuleHandle);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mdStreamVersion"] = this.mdStreamVersion !== undefined ? this.mdStreamVersion : <any>null;
        return data; 
    }
}

export class CustomAttributeTypedArgument {
    argumentType!: Type;
    readonly value!: any | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.argumentType = _data["argumentType"] ? Type.fromJS(_data["argumentType"], _mappings) : <any>null;
            (<any>this).value = _data["value"] !== undefined ? _data["value"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): CustomAttributeTypedArgument {
        data = typeof data === 'object' ? data : {};
        return createInstance<CustomAttributeTypedArgument>(data, _mappings, CustomAttributeTypedArgument);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["argumentType"] = this.argumentType ? this.argumentType.toJSON() : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        return data; 
    }
}

export class CustomAttributeNamedArgument {
    memberInfo!: MemberInfo;
    typedValue!: CustomAttributeTypedArgument;
    readonly memberName!: string | null;
    readonly isField!: boolean;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.memberInfo = _data["memberInfo"] ? MemberInfo.fromJS(_data["memberInfo"], _mappings) : <any>null;
            this.typedValue = _data["typedValue"] ? CustomAttributeTypedArgument.fromJS(_data["typedValue"], _mappings) : <any>null;
            (<any>this).memberName = _data["memberName"] !== undefined ? _data["memberName"] : <any>null;
            (<any>this).isField = _data["isField"] !== undefined ? _data["isField"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): CustomAttributeNamedArgument {
        data = typeof data === 'object' ? data : {};
        return createInstance<CustomAttributeNamedArgument>(data, _mappings, CustomAttributeNamedArgument);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["memberInfo"] = this.memberInfo ? this.memberInfo.toJSON() : <any>null;
        data["typedValue"] = this.typedValue ? this.typedValue.toJSON() : <any>null;
        data["memberName"] = this.memberName !== undefined ? this.memberName : <any>null;
        data["isField"] = this.isField !== undefined ? this.isField : <any>null;
        return data; 
    }
}

export class CustomAttributeData {
    attributeType!: Type;
    constructor_!: ConstructorInfo;
    readonly constructorArguments!: CustomAttributeTypedArgument[] | null;
    readonly namedArguments!: CustomAttributeNamedArgument[] | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.attributeType = _data["attributeType"] ? Type.fromJS(_data["attributeType"], _mappings) : <any>null;
            this.constructor_ = _data["constructor"] ? ConstructorInfo.fromJS(_data["constructor"], _mappings) : <any>null;
            if (Array.isArray(_data["constructorArguments"])) {
                (<any>this).constructorArguments = [] as any;
                for (let item of _data["constructorArguments"])
                    (<any>this).constructorArguments!.push(CustomAttributeTypedArgument.fromJS(item, _mappings));
            }
            if (Array.isArray(_data["namedArguments"])) {
                (<any>this).namedArguments = [] as any;
                for (let item of _data["namedArguments"])
                    (<any>this).namedArguments!.push(CustomAttributeNamedArgument.fromJS(item, _mappings));
            }
        }
    }

    static fromJS(data: any, _mappings?: any): CustomAttributeData {
        data = typeof data === 'object' ? data : {};
        return createInstance<CustomAttributeData>(data, _mappings, CustomAttributeData);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["attributeType"] = this.attributeType ? this.attributeType.toJSON() : <any>null;
        data["constructor"] = this.constructor_ ? this.constructor_.toJSON() : <any>null;
        if (Array.isArray(this.constructorArguments)) {
            data["constructorArguments"] = [];
            for (let item of this.constructorArguments)
                data["constructorArguments"].push(item.toJSON());
        }
        if (Array.isArray(this.namedArguments)) {
            data["namedArguments"] = [];
            for (let item of this.namedArguments)
                data["namedArguments"].push(item.toJSON());
        }
        return data; 
    }
}

export class Module {
    assembly!: Assembly;
    readonly fullyQualifiedName!: string | null;
    readonly name!: string | null;
    readonly mdStreamVersion!: number;
    readonly moduleVersionId!: string;
    readonly scopeName!: string | null;
    moduleHandle!: ModuleHandle;
    readonly customAttributes!: CustomAttributeData[] | null;
    readonly metadataToken!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.assembly = _data["assembly"] ? Assembly.fromJS(_data["assembly"], _mappings) : <any>null;
            (<any>this).fullyQualifiedName = _data["fullyQualifiedName"] !== undefined ? _data["fullyQualifiedName"] : <any>null;
            (<any>this).name = _data["name"] !== undefined ? _data["name"] : <any>null;
            (<any>this).mdStreamVersion = _data["mdStreamVersion"] !== undefined ? _data["mdStreamVersion"] : <any>null;
            (<any>this).moduleVersionId = _data["moduleVersionId"] !== undefined ? _data["moduleVersionId"] : <any>null;
            (<any>this).scopeName = _data["scopeName"] !== undefined ? _data["scopeName"] : <any>null;
            this.moduleHandle = _data["moduleHandle"] ? ModuleHandle.fromJS(_data["moduleHandle"], _mappings) : <any>null;
            if (Array.isArray(_data["customAttributes"])) {
                (<any>this).customAttributes = [] as any;
                for (let item of _data["customAttributes"])
                    (<any>this).customAttributes!.push(CustomAttributeData.fromJS(item, _mappings));
            }
            (<any>this).metadataToken = _data["metadataToken"] !== undefined ? _data["metadataToken"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): Module {
        data = typeof data === 'object' ? data : {};
        return createInstance<Module>(data, _mappings, Module);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assembly"] = this.assembly ? this.assembly.toJSON() : <any>null;
        data["fullyQualifiedName"] = this.fullyQualifiedName !== undefined ? this.fullyQualifiedName : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["mdStreamVersion"] = this.mdStreamVersion !== undefined ? this.mdStreamVersion : <any>null;
        data["moduleVersionId"] = this.moduleVersionId !== undefined ? this.moduleVersionId : <any>null;
        data["scopeName"] = this.scopeName !== undefined ? this.scopeName : <any>null;
        data["moduleHandle"] = this.moduleHandle ? this.moduleHandle.toJSON() : <any>null;
        if (Array.isArray(this.customAttributes)) {
            data["customAttributes"] = [];
            for (let item of this.customAttributes)
                data["customAttributes"].push(item.toJSON());
        }
        data["metadataToken"] = this.metadataToken !== undefined ? this.metadataToken : <any>null;
        return data; 
    }
}

export class ConstructorInfo {
    memberType!: MemberTypes;
    attributes!: MethodAttributes;
    methodImplementationFlags!: MethodImplAttributes;
    callingConvention!: CallingConventions;
    readonly isAbstract!: boolean;
    readonly isConstructor!: boolean;
    readonly isFinal!: boolean;
    readonly isHideBySig!: boolean;
    readonly isSpecialName!: boolean;
    readonly isStatic!: boolean;
    readonly isVirtual!: boolean;
    readonly isAssembly!: boolean;
    readonly isFamily!: boolean;
    readonly isFamilyAndAssembly!: boolean;
    readonly isFamilyOrAssembly!: boolean;
    readonly isPrivate!: boolean;
    readonly isPublic!: boolean;
    readonly isConstructedGenericMethod!: boolean;
    readonly isGenericMethod!: boolean;
    readonly isGenericMethodDefinition!: boolean;
    readonly containsGenericParameters!: boolean;
    methodHandle!: RuntimeMethodHandle;
    readonly isSecurityCritical!: boolean;
    readonly isSecuritySafeCritical!: boolean;
    readonly isSecurityTransparent!: boolean;
    readonly name!: string | null;
    declaringType!: Type;
    reflectedType!: Type;
    module!: Module;
    readonly customAttributes!: CustomAttributeData[] | null;
    readonly isCollectible!: boolean;
    readonly metadataToken!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.memberType = _data["memberType"] !== undefined ? _data["memberType"] : <any>null;
            this.attributes = _data["attributes"] !== undefined ? _data["attributes"] : <any>null;
            this.methodImplementationFlags = _data["methodImplementationFlags"] !== undefined ? _data["methodImplementationFlags"] : <any>null;
            this.callingConvention = _data["callingConvention"] !== undefined ? _data["callingConvention"] : <any>null;
            (<any>this).isAbstract = _data["isAbstract"] !== undefined ? _data["isAbstract"] : <any>null;
            (<any>this).isConstructor = _data["isConstructor"] !== undefined ? _data["isConstructor"] : <any>null;
            (<any>this).isFinal = _data["isFinal"] !== undefined ? _data["isFinal"] : <any>null;
            (<any>this).isHideBySig = _data["isHideBySig"] !== undefined ? _data["isHideBySig"] : <any>null;
            (<any>this).isSpecialName = _data["isSpecialName"] !== undefined ? _data["isSpecialName"] : <any>null;
            (<any>this).isStatic = _data["isStatic"] !== undefined ? _data["isStatic"] : <any>null;
            (<any>this).isVirtual = _data["isVirtual"] !== undefined ? _data["isVirtual"] : <any>null;
            (<any>this).isAssembly = _data["isAssembly"] !== undefined ? _data["isAssembly"] : <any>null;
            (<any>this).isFamily = _data["isFamily"] !== undefined ? _data["isFamily"] : <any>null;
            (<any>this).isFamilyAndAssembly = _data["isFamilyAndAssembly"] !== undefined ? _data["isFamilyAndAssembly"] : <any>null;
            (<any>this).isFamilyOrAssembly = _data["isFamilyOrAssembly"] !== undefined ? _data["isFamilyOrAssembly"] : <any>null;
            (<any>this).isPrivate = _data["isPrivate"] !== undefined ? _data["isPrivate"] : <any>null;
            (<any>this).isPublic = _data["isPublic"] !== undefined ? _data["isPublic"] : <any>null;
            (<any>this).isConstructedGenericMethod = _data["isConstructedGenericMethod"] !== undefined ? _data["isConstructedGenericMethod"] : <any>null;
            (<any>this).isGenericMethod = _data["isGenericMethod"] !== undefined ? _data["isGenericMethod"] : <any>null;
            (<any>this).isGenericMethodDefinition = _data["isGenericMethodDefinition"] !== undefined ? _data["isGenericMethodDefinition"] : <any>null;
            (<any>this).containsGenericParameters = _data["containsGenericParameters"] !== undefined ? _data["containsGenericParameters"] : <any>null;
            this.methodHandle = _data["methodHandle"] ? RuntimeMethodHandle.fromJS(_data["methodHandle"], _mappings) : <any>null;
            (<any>this).isSecurityCritical = _data["isSecurityCritical"] !== undefined ? _data["isSecurityCritical"] : <any>null;
            (<any>this).isSecuritySafeCritical = _data["isSecuritySafeCritical"] !== undefined ? _data["isSecuritySafeCritical"] : <any>null;
            (<any>this).isSecurityTransparent = _data["isSecurityTransparent"] !== undefined ? _data["isSecurityTransparent"] : <any>null;
            (<any>this).name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.declaringType = _data["declaringType"] ? Type.fromJS(_data["declaringType"], _mappings) : <any>null;
            this.reflectedType = _data["reflectedType"] ? Type.fromJS(_data["reflectedType"], _mappings) : <any>null;
            this.module = _data["module"] ? Module.fromJS(_data["module"], _mappings) : <any>null;
            if (Array.isArray(_data["customAttributes"])) {
                (<any>this).customAttributes = [] as any;
                for (let item of _data["customAttributes"])
                    (<any>this).customAttributes!.push(CustomAttributeData.fromJS(item, _mappings));
            }
            (<any>this).isCollectible = _data["isCollectible"] !== undefined ? _data["isCollectible"] : <any>null;
            (<any>this).metadataToken = _data["metadataToken"] !== undefined ? _data["metadataToken"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): ConstructorInfo {
        data = typeof data === 'object' ? data : {};
        return createInstance<ConstructorInfo>(data, _mappings, ConstructorInfo);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["memberType"] = this.memberType !== undefined ? this.memberType : <any>null;
        data["attributes"] = this.attributes !== undefined ? this.attributes : <any>null;
        data["methodImplementationFlags"] = this.methodImplementationFlags !== undefined ? this.methodImplementationFlags : <any>null;
        data["callingConvention"] = this.callingConvention !== undefined ? this.callingConvention : <any>null;
        data["isAbstract"] = this.isAbstract !== undefined ? this.isAbstract : <any>null;
        data["isConstructor"] = this.isConstructor !== undefined ? this.isConstructor : <any>null;
        data["isFinal"] = this.isFinal !== undefined ? this.isFinal : <any>null;
        data["isHideBySig"] = this.isHideBySig !== undefined ? this.isHideBySig : <any>null;
        data["isSpecialName"] = this.isSpecialName !== undefined ? this.isSpecialName : <any>null;
        data["isStatic"] = this.isStatic !== undefined ? this.isStatic : <any>null;
        data["isVirtual"] = this.isVirtual !== undefined ? this.isVirtual : <any>null;
        data["isAssembly"] = this.isAssembly !== undefined ? this.isAssembly : <any>null;
        data["isFamily"] = this.isFamily !== undefined ? this.isFamily : <any>null;
        data["isFamilyAndAssembly"] = this.isFamilyAndAssembly !== undefined ? this.isFamilyAndAssembly : <any>null;
        data["isFamilyOrAssembly"] = this.isFamilyOrAssembly !== undefined ? this.isFamilyOrAssembly : <any>null;
        data["isPrivate"] = this.isPrivate !== undefined ? this.isPrivate : <any>null;
        data["isPublic"] = this.isPublic !== undefined ? this.isPublic : <any>null;
        data["isConstructedGenericMethod"] = this.isConstructedGenericMethod !== undefined ? this.isConstructedGenericMethod : <any>null;
        data["isGenericMethod"] = this.isGenericMethod !== undefined ? this.isGenericMethod : <any>null;
        data["isGenericMethodDefinition"] = this.isGenericMethodDefinition !== undefined ? this.isGenericMethodDefinition : <any>null;
        data["containsGenericParameters"] = this.containsGenericParameters !== undefined ? this.containsGenericParameters : <any>null;
        data["methodHandle"] = this.methodHandle ? this.methodHandle.toJSON() : <any>null;
        data["isSecurityCritical"] = this.isSecurityCritical !== undefined ? this.isSecurityCritical : <any>null;
        data["isSecuritySafeCritical"] = this.isSecuritySafeCritical !== undefined ? this.isSecuritySafeCritical : <any>null;
        data["isSecurityTransparent"] = this.isSecurityTransparent !== undefined ? this.isSecurityTransparent : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["declaringType"] = this.declaringType ? this.declaringType.toJSON() : <any>null;
        data["reflectedType"] = this.reflectedType ? this.reflectedType.toJSON() : <any>null;
        data["module"] = this.module ? this.module.toJSON() : <any>null;
        if (Array.isArray(this.customAttributes)) {
            data["customAttributes"] = [];
            for (let item of this.customAttributes)
                data["customAttributes"].push(item.toJSON());
        }
        data["isCollectible"] = this.isCollectible !== undefined ? this.isCollectible : <any>null;
        data["metadataToken"] = this.metadataToken !== undefined ? this.metadataToken : <any>null;
        return data; 
    }
}

export enum EventAttributes {
    None = 0,
    SpecialName = 512,
    RTSpecialName = 1024,
}

export class EventInfo {
    memberType!: MemberTypes;
    attributes!: EventAttributes;
    readonly isSpecialName!: boolean;
    addMethod!: MethodInfo;
    removeMethod!: MethodInfo;
    raiseMethod!: MethodInfo;
    readonly isMulticast!: boolean;
    eventHandlerType!: Type;
    readonly name!: string | null;
    declaringType!: Type;
    reflectedType!: Type;
    module!: Module;
    readonly customAttributes!: CustomAttributeData[] | null;
    readonly isCollectible!: boolean;
    readonly metadataToken!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.memberType = _data["memberType"] !== undefined ? _data["memberType"] : <any>null;
            this.attributes = _data["attributes"] !== undefined ? _data["attributes"] : <any>null;
            (<any>this).isSpecialName = _data["isSpecialName"] !== undefined ? _data["isSpecialName"] : <any>null;
            this.addMethod = _data["addMethod"] ? MethodInfo.fromJS(_data["addMethod"], _mappings) : <any>null;
            this.removeMethod = _data["removeMethod"] ? MethodInfo.fromJS(_data["removeMethod"], _mappings) : <any>null;
            this.raiseMethod = _data["raiseMethod"] ? MethodInfo.fromJS(_data["raiseMethod"], _mappings) : <any>null;
            (<any>this).isMulticast = _data["isMulticast"] !== undefined ? _data["isMulticast"] : <any>null;
            this.eventHandlerType = _data["eventHandlerType"] ? Type.fromJS(_data["eventHandlerType"], _mappings) : <any>null;
            (<any>this).name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.declaringType = _data["declaringType"] ? Type.fromJS(_data["declaringType"], _mappings) : <any>null;
            this.reflectedType = _data["reflectedType"] ? Type.fromJS(_data["reflectedType"], _mappings) : <any>null;
            this.module = _data["module"] ? Module.fromJS(_data["module"], _mappings) : <any>null;
            if (Array.isArray(_data["customAttributes"])) {
                (<any>this).customAttributes = [] as any;
                for (let item of _data["customAttributes"])
                    (<any>this).customAttributes!.push(CustomAttributeData.fromJS(item, _mappings));
            }
            (<any>this).isCollectible = _data["isCollectible"] !== undefined ? _data["isCollectible"] : <any>null;
            (<any>this).metadataToken = _data["metadataToken"] !== undefined ? _data["metadataToken"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): EventInfo {
        data = typeof data === 'object' ? data : {};
        return createInstance<EventInfo>(data, _mappings, EventInfo);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["memberType"] = this.memberType !== undefined ? this.memberType : <any>null;
        data["attributes"] = this.attributes !== undefined ? this.attributes : <any>null;
        data["isSpecialName"] = this.isSpecialName !== undefined ? this.isSpecialName : <any>null;
        data["addMethod"] = this.addMethod ? this.addMethod.toJSON() : <any>null;
        data["removeMethod"] = this.removeMethod ? this.removeMethod.toJSON() : <any>null;
        data["raiseMethod"] = this.raiseMethod ? this.raiseMethod.toJSON() : <any>null;
        data["isMulticast"] = this.isMulticast !== undefined ? this.isMulticast : <any>null;
        data["eventHandlerType"] = this.eventHandlerType ? this.eventHandlerType.toJSON() : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["declaringType"] = this.declaringType ? this.declaringType.toJSON() : <any>null;
        data["reflectedType"] = this.reflectedType ? this.reflectedType.toJSON() : <any>null;
        data["module"] = this.module ? this.module.toJSON() : <any>null;
        if (Array.isArray(this.customAttributes)) {
            data["customAttributes"] = [];
            for (let item of this.customAttributes)
                data["customAttributes"].push(item.toJSON());
        }
        data["isCollectible"] = this.isCollectible !== undefined ? this.isCollectible : <any>null;
        data["metadataToken"] = this.metadataToken !== undefined ? this.metadataToken : <any>null;
        return data; 
    }
}

export enum FieldAttributes {
    PrivateScope = 0,
    Private = 1,
    FamANDAssem = 2,
    Assembly = 3,
    Family = 4,
    FamORAssem = 5,
    Public = 6,
    FieldAccessMask = 7,
    Static = 16,
    InitOnly = 32,
    Literal = 64,
    NotSerialized = 128,
    HasFieldRVA = 256,
    SpecialName = 512,
    RTSpecialName = 1024,
    HasFieldMarshal = 4096,
    PinvokeImpl = 8192,
    HasDefault = 32768,
    ReservedMask = 38144,
}

export class RuntimeFieldHandle {
    value!: IntPtr;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.value = _data["value"] ? IntPtr.fromJS(_data["value"], _mappings) : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): RuntimeFieldHandle {
        data = typeof data === 'object' ? data : {};
        return createInstance<RuntimeFieldHandle>(data, _mappings, RuntimeFieldHandle);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value ? this.value.toJSON() : <any>null;
        return data; 
    }
}

export class FieldInfo {
    memberType!: MemberTypes;
    attributes!: FieldAttributes;
    fieldType!: Type;
    readonly isInitOnly!: boolean;
    readonly isLiteral!: boolean;
    readonly isNotSerialized!: boolean;
    readonly isPinvokeImpl!: boolean;
    readonly isSpecialName!: boolean;
    readonly isStatic!: boolean;
    readonly isAssembly!: boolean;
    readonly isFamily!: boolean;
    readonly isFamilyAndAssembly!: boolean;
    readonly isFamilyOrAssembly!: boolean;
    readonly isPrivate!: boolean;
    readonly isPublic!: boolean;
    readonly isSecurityCritical!: boolean;
    readonly isSecuritySafeCritical!: boolean;
    readonly isSecurityTransparent!: boolean;
    fieldHandle!: RuntimeFieldHandle;
    readonly name!: string | null;
    declaringType!: Type;
    reflectedType!: Type;
    module!: Module;
    readonly customAttributes!: CustomAttributeData[] | null;
    readonly isCollectible!: boolean;
    readonly metadataToken!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.memberType = _data["memberType"] !== undefined ? _data["memberType"] : <any>null;
            this.attributes = _data["attributes"] !== undefined ? _data["attributes"] : <any>null;
            this.fieldType = _data["fieldType"] ? Type.fromJS(_data["fieldType"], _mappings) : <any>null;
            (<any>this).isInitOnly = _data["isInitOnly"] !== undefined ? _data["isInitOnly"] : <any>null;
            (<any>this).isLiteral = _data["isLiteral"] !== undefined ? _data["isLiteral"] : <any>null;
            (<any>this).isNotSerialized = _data["isNotSerialized"] !== undefined ? _data["isNotSerialized"] : <any>null;
            (<any>this).isPinvokeImpl = _data["isPinvokeImpl"] !== undefined ? _data["isPinvokeImpl"] : <any>null;
            (<any>this).isSpecialName = _data["isSpecialName"] !== undefined ? _data["isSpecialName"] : <any>null;
            (<any>this).isStatic = _data["isStatic"] !== undefined ? _data["isStatic"] : <any>null;
            (<any>this).isAssembly = _data["isAssembly"] !== undefined ? _data["isAssembly"] : <any>null;
            (<any>this).isFamily = _data["isFamily"] !== undefined ? _data["isFamily"] : <any>null;
            (<any>this).isFamilyAndAssembly = _data["isFamilyAndAssembly"] !== undefined ? _data["isFamilyAndAssembly"] : <any>null;
            (<any>this).isFamilyOrAssembly = _data["isFamilyOrAssembly"] !== undefined ? _data["isFamilyOrAssembly"] : <any>null;
            (<any>this).isPrivate = _data["isPrivate"] !== undefined ? _data["isPrivate"] : <any>null;
            (<any>this).isPublic = _data["isPublic"] !== undefined ? _data["isPublic"] : <any>null;
            (<any>this).isSecurityCritical = _data["isSecurityCritical"] !== undefined ? _data["isSecurityCritical"] : <any>null;
            (<any>this).isSecuritySafeCritical = _data["isSecuritySafeCritical"] !== undefined ? _data["isSecuritySafeCritical"] : <any>null;
            (<any>this).isSecurityTransparent = _data["isSecurityTransparent"] !== undefined ? _data["isSecurityTransparent"] : <any>null;
            this.fieldHandle = _data["fieldHandle"] ? RuntimeFieldHandle.fromJS(_data["fieldHandle"], _mappings) : <any>null;
            (<any>this).name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.declaringType = _data["declaringType"] ? Type.fromJS(_data["declaringType"], _mappings) : <any>null;
            this.reflectedType = _data["reflectedType"] ? Type.fromJS(_data["reflectedType"], _mappings) : <any>null;
            this.module = _data["module"] ? Module.fromJS(_data["module"], _mappings) : <any>null;
            if (Array.isArray(_data["customAttributes"])) {
                (<any>this).customAttributes = [] as any;
                for (let item of _data["customAttributes"])
                    (<any>this).customAttributes!.push(CustomAttributeData.fromJS(item, _mappings));
            }
            (<any>this).isCollectible = _data["isCollectible"] !== undefined ? _data["isCollectible"] : <any>null;
            (<any>this).metadataToken = _data["metadataToken"] !== undefined ? _data["metadataToken"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): FieldInfo {
        data = typeof data === 'object' ? data : {};
        return createInstance<FieldInfo>(data, _mappings, FieldInfo);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["memberType"] = this.memberType !== undefined ? this.memberType : <any>null;
        data["attributes"] = this.attributes !== undefined ? this.attributes : <any>null;
        data["fieldType"] = this.fieldType ? this.fieldType.toJSON() : <any>null;
        data["isInitOnly"] = this.isInitOnly !== undefined ? this.isInitOnly : <any>null;
        data["isLiteral"] = this.isLiteral !== undefined ? this.isLiteral : <any>null;
        data["isNotSerialized"] = this.isNotSerialized !== undefined ? this.isNotSerialized : <any>null;
        data["isPinvokeImpl"] = this.isPinvokeImpl !== undefined ? this.isPinvokeImpl : <any>null;
        data["isSpecialName"] = this.isSpecialName !== undefined ? this.isSpecialName : <any>null;
        data["isStatic"] = this.isStatic !== undefined ? this.isStatic : <any>null;
        data["isAssembly"] = this.isAssembly !== undefined ? this.isAssembly : <any>null;
        data["isFamily"] = this.isFamily !== undefined ? this.isFamily : <any>null;
        data["isFamilyAndAssembly"] = this.isFamilyAndAssembly !== undefined ? this.isFamilyAndAssembly : <any>null;
        data["isFamilyOrAssembly"] = this.isFamilyOrAssembly !== undefined ? this.isFamilyOrAssembly : <any>null;
        data["isPrivate"] = this.isPrivate !== undefined ? this.isPrivate : <any>null;
        data["isPublic"] = this.isPublic !== undefined ? this.isPublic : <any>null;
        data["isSecurityCritical"] = this.isSecurityCritical !== undefined ? this.isSecurityCritical : <any>null;
        data["isSecuritySafeCritical"] = this.isSecuritySafeCritical !== undefined ? this.isSecuritySafeCritical : <any>null;
        data["isSecurityTransparent"] = this.isSecurityTransparent !== undefined ? this.isSecurityTransparent : <any>null;
        data["fieldHandle"] = this.fieldHandle ? this.fieldHandle.toJSON() : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["declaringType"] = this.declaringType ? this.declaringType.toJSON() : <any>null;
        data["reflectedType"] = this.reflectedType ? this.reflectedType.toJSON() : <any>null;
        data["module"] = this.module ? this.module.toJSON() : <any>null;
        if (Array.isArray(this.customAttributes)) {
            data["customAttributes"] = [];
            for (let item of this.customAttributes)
                data["customAttributes"].push(item.toJSON());
        }
        data["isCollectible"] = this.isCollectible !== undefined ? this.isCollectible : <any>null;
        data["metadataToken"] = this.metadataToken !== undefined ? this.metadataToken : <any>null;
        return data; 
    }
}

export enum PropertyAttributes {
    None = 0,
    SpecialName = 512,
    RTSpecialName = 1024,
    HasDefault = 4096,
    Reserved2 = 8192,
    Reserved3 = 16384,
    Reserved4 = 32768,
    ReservedMask = 62464,
}

export class PropertyInfo {
    memberType!: MemberTypes;
    propertyType!: Type;
    attributes!: PropertyAttributes;
    readonly isSpecialName!: boolean;
    readonly canRead!: boolean;
    readonly canWrite!: boolean;
    getMethod!: MethodInfo;
    setMethod!: MethodInfo;
    readonly name!: string | null;
    declaringType!: Type;
    reflectedType!: Type;
    module!: Module;
    readonly customAttributes!: CustomAttributeData[] | null;
    readonly isCollectible!: boolean;
    readonly metadataToken!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.memberType = _data["memberType"] !== undefined ? _data["memberType"] : <any>null;
            this.propertyType = _data["propertyType"] ? Type.fromJS(_data["propertyType"], _mappings) : <any>null;
            this.attributes = _data["attributes"] !== undefined ? _data["attributes"] : <any>null;
            (<any>this).isSpecialName = _data["isSpecialName"] !== undefined ? _data["isSpecialName"] : <any>null;
            (<any>this).canRead = _data["canRead"] !== undefined ? _data["canRead"] : <any>null;
            (<any>this).canWrite = _data["canWrite"] !== undefined ? _data["canWrite"] : <any>null;
            this.getMethod = _data["getMethod"] ? MethodInfo.fromJS(_data["getMethod"], _mappings) : <any>null;
            this.setMethod = _data["setMethod"] ? MethodInfo.fromJS(_data["setMethod"], _mappings) : <any>null;
            (<any>this).name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.declaringType = _data["declaringType"] ? Type.fromJS(_data["declaringType"], _mappings) : <any>null;
            this.reflectedType = _data["reflectedType"] ? Type.fromJS(_data["reflectedType"], _mappings) : <any>null;
            this.module = _data["module"] ? Module.fromJS(_data["module"], _mappings) : <any>null;
            if (Array.isArray(_data["customAttributes"])) {
                (<any>this).customAttributes = [] as any;
                for (let item of _data["customAttributes"])
                    (<any>this).customAttributes!.push(CustomAttributeData.fromJS(item, _mappings));
            }
            (<any>this).isCollectible = _data["isCollectible"] !== undefined ? _data["isCollectible"] : <any>null;
            (<any>this).metadataToken = _data["metadataToken"] !== undefined ? _data["metadataToken"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): PropertyInfo {
        data = typeof data === 'object' ? data : {};
        return createInstance<PropertyInfo>(data, _mappings, PropertyInfo);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["memberType"] = this.memberType !== undefined ? this.memberType : <any>null;
        data["propertyType"] = this.propertyType ? this.propertyType.toJSON() : <any>null;
        data["attributes"] = this.attributes !== undefined ? this.attributes : <any>null;
        data["isSpecialName"] = this.isSpecialName !== undefined ? this.isSpecialName : <any>null;
        data["canRead"] = this.canRead !== undefined ? this.canRead : <any>null;
        data["canWrite"] = this.canWrite !== undefined ? this.canWrite : <any>null;
        data["getMethod"] = this.getMethod ? this.getMethod.toJSON() : <any>null;
        data["setMethod"] = this.setMethod ? this.setMethod.toJSON() : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["declaringType"] = this.declaringType ? this.declaringType.toJSON() : <any>null;
        data["reflectedType"] = this.reflectedType ? this.reflectedType.toJSON() : <any>null;
        data["module"] = this.module ? this.module.toJSON() : <any>null;
        if (Array.isArray(this.customAttributes)) {
            data["customAttributes"] = [];
            for (let item of this.customAttributes)
                data["customAttributes"].push(item.toJSON());
        }
        data["isCollectible"] = this.isCollectible !== undefined ? this.isCollectible : <any>null;
        data["metadataToken"] = this.metadataToken !== undefined ? this.metadataToken : <any>null;
        return data; 
    }
}

export class MethodBase {
    attributes!: MethodAttributes;
    methodImplementationFlags!: MethodImplAttributes;
    callingConvention!: CallingConventions;
    readonly isAbstract!: boolean;
    readonly isConstructor!: boolean;
    readonly isFinal!: boolean;
    readonly isHideBySig!: boolean;
    readonly isSpecialName!: boolean;
    readonly isStatic!: boolean;
    readonly isVirtual!: boolean;
    readonly isAssembly!: boolean;
    readonly isFamily!: boolean;
    readonly isFamilyAndAssembly!: boolean;
    readonly isFamilyOrAssembly!: boolean;
    readonly isPrivate!: boolean;
    readonly isPublic!: boolean;
    readonly isConstructedGenericMethod!: boolean;
    readonly isGenericMethod!: boolean;
    readonly isGenericMethodDefinition!: boolean;
    readonly containsGenericParameters!: boolean;
    methodHandle!: RuntimeMethodHandle;
    readonly isSecurityCritical!: boolean;
    readonly isSecuritySafeCritical!: boolean;
    readonly isSecurityTransparent!: boolean;
    memberType!: MemberTypes;
    readonly name!: string | null;
    declaringType!: Type;
    reflectedType!: Type;
    module!: Module;
    readonly customAttributes!: CustomAttributeData[] | null;
    readonly isCollectible!: boolean;
    readonly metadataToken!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.attributes = _data["attributes"] !== undefined ? _data["attributes"] : <any>null;
            this.methodImplementationFlags = _data["methodImplementationFlags"] !== undefined ? _data["methodImplementationFlags"] : <any>null;
            this.callingConvention = _data["callingConvention"] !== undefined ? _data["callingConvention"] : <any>null;
            (<any>this).isAbstract = _data["isAbstract"] !== undefined ? _data["isAbstract"] : <any>null;
            (<any>this).isConstructor = _data["isConstructor"] !== undefined ? _data["isConstructor"] : <any>null;
            (<any>this).isFinal = _data["isFinal"] !== undefined ? _data["isFinal"] : <any>null;
            (<any>this).isHideBySig = _data["isHideBySig"] !== undefined ? _data["isHideBySig"] : <any>null;
            (<any>this).isSpecialName = _data["isSpecialName"] !== undefined ? _data["isSpecialName"] : <any>null;
            (<any>this).isStatic = _data["isStatic"] !== undefined ? _data["isStatic"] : <any>null;
            (<any>this).isVirtual = _data["isVirtual"] !== undefined ? _data["isVirtual"] : <any>null;
            (<any>this).isAssembly = _data["isAssembly"] !== undefined ? _data["isAssembly"] : <any>null;
            (<any>this).isFamily = _data["isFamily"] !== undefined ? _data["isFamily"] : <any>null;
            (<any>this).isFamilyAndAssembly = _data["isFamilyAndAssembly"] !== undefined ? _data["isFamilyAndAssembly"] : <any>null;
            (<any>this).isFamilyOrAssembly = _data["isFamilyOrAssembly"] !== undefined ? _data["isFamilyOrAssembly"] : <any>null;
            (<any>this).isPrivate = _data["isPrivate"] !== undefined ? _data["isPrivate"] : <any>null;
            (<any>this).isPublic = _data["isPublic"] !== undefined ? _data["isPublic"] : <any>null;
            (<any>this).isConstructedGenericMethod = _data["isConstructedGenericMethod"] !== undefined ? _data["isConstructedGenericMethod"] : <any>null;
            (<any>this).isGenericMethod = _data["isGenericMethod"] !== undefined ? _data["isGenericMethod"] : <any>null;
            (<any>this).isGenericMethodDefinition = _data["isGenericMethodDefinition"] !== undefined ? _data["isGenericMethodDefinition"] : <any>null;
            (<any>this).containsGenericParameters = _data["containsGenericParameters"] !== undefined ? _data["containsGenericParameters"] : <any>null;
            this.methodHandle = _data["methodHandle"] ? RuntimeMethodHandle.fromJS(_data["methodHandle"], _mappings) : <any>null;
            (<any>this).isSecurityCritical = _data["isSecurityCritical"] !== undefined ? _data["isSecurityCritical"] : <any>null;
            (<any>this).isSecuritySafeCritical = _data["isSecuritySafeCritical"] !== undefined ? _data["isSecuritySafeCritical"] : <any>null;
            (<any>this).isSecurityTransparent = _data["isSecurityTransparent"] !== undefined ? _data["isSecurityTransparent"] : <any>null;
            this.memberType = _data["memberType"] !== undefined ? _data["memberType"] : <any>null;
            (<any>this).name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.declaringType = _data["declaringType"] ? Type.fromJS(_data["declaringType"], _mappings) : <any>null;
            this.reflectedType = _data["reflectedType"] ? Type.fromJS(_data["reflectedType"], _mappings) : <any>null;
            this.module = _data["module"] ? Module.fromJS(_data["module"], _mappings) : <any>null;
            if (Array.isArray(_data["customAttributes"])) {
                (<any>this).customAttributes = [] as any;
                for (let item of _data["customAttributes"])
                    (<any>this).customAttributes!.push(CustomAttributeData.fromJS(item, _mappings));
            }
            (<any>this).isCollectible = _data["isCollectible"] !== undefined ? _data["isCollectible"] : <any>null;
            (<any>this).metadataToken = _data["metadataToken"] !== undefined ? _data["metadataToken"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): MethodBase {
        data = typeof data === 'object' ? data : {};
        return createInstance<MethodBase>(data, _mappings, MethodBase);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["attributes"] = this.attributes !== undefined ? this.attributes : <any>null;
        data["methodImplementationFlags"] = this.methodImplementationFlags !== undefined ? this.methodImplementationFlags : <any>null;
        data["callingConvention"] = this.callingConvention !== undefined ? this.callingConvention : <any>null;
        data["isAbstract"] = this.isAbstract !== undefined ? this.isAbstract : <any>null;
        data["isConstructor"] = this.isConstructor !== undefined ? this.isConstructor : <any>null;
        data["isFinal"] = this.isFinal !== undefined ? this.isFinal : <any>null;
        data["isHideBySig"] = this.isHideBySig !== undefined ? this.isHideBySig : <any>null;
        data["isSpecialName"] = this.isSpecialName !== undefined ? this.isSpecialName : <any>null;
        data["isStatic"] = this.isStatic !== undefined ? this.isStatic : <any>null;
        data["isVirtual"] = this.isVirtual !== undefined ? this.isVirtual : <any>null;
        data["isAssembly"] = this.isAssembly !== undefined ? this.isAssembly : <any>null;
        data["isFamily"] = this.isFamily !== undefined ? this.isFamily : <any>null;
        data["isFamilyAndAssembly"] = this.isFamilyAndAssembly !== undefined ? this.isFamilyAndAssembly : <any>null;
        data["isFamilyOrAssembly"] = this.isFamilyOrAssembly !== undefined ? this.isFamilyOrAssembly : <any>null;
        data["isPrivate"] = this.isPrivate !== undefined ? this.isPrivate : <any>null;
        data["isPublic"] = this.isPublic !== undefined ? this.isPublic : <any>null;
        data["isConstructedGenericMethod"] = this.isConstructedGenericMethod !== undefined ? this.isConstructedGenericMethod : <any>null;
        data["isGenericMethod"] = this.isGenericMethod !== undefined ? this.isGenericMethod : <any>null;
        data["isGenericMethodDefinition"] = this.isGenericMethodDefinition !== undefined ? this.isGenericMethodDefinition : <any>null;
        data["containsGenericParameters"] = this.containsGenericParameters !== undefined ? this.containsGenericParameters : <any>null;
        data["methodHandle"] = this.methodHandle ? this.methodHandle.toJSON() : <any>null;
        data["isSecurityCritical"] = this.isSecurityCritical !== undefined ? this.isSecurityCritical : <any>null;
        data["isSecuritySafeCritical"] = this.isSecuritySafeCritical !== undefined ? this.isSecuritySafeCritical : <any>null;
        data["isSecurityTransparent"] = this.isSecurityTransparent !== undefined ? this.isSecurityTransparent : <any>null;
        data["memberType"] = this.memberType !== undefined ? this.memberType : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["declaringType"] = this.declaringType ? this.declaringType.toJSON() : <any>null;
        data["reflectedType"] = this.reflectedType ? this.reflectedType.toJSON() : <any>null;
        data["module"] = this.module ? this.module.toJSON() : <any>null;
        if (Array.isArray(this.customAttributes)) {
            data["customAttributes"] = [];
            for (let item of this.customAttributes)
                data["customAttributes"].push(item.toJSON());
        }
        data["isCollectible"] = this.isCollectible !== undefined ? this.isCollectible : <any>null;
        data["metadataToken"] = this.metadataToken !== undefined ? this.metadataToken : <any>null;
        return data; 
    }
}

export enum GenericParameterAttributes {
    None = 0,
    Covariant = 1,
    Contravariant = 2,
    VarianceMask = 3,
    ReferenceTypeConstraint = 4,
    NotNullableValueTypeConstraint = 8,
    DefaultConstructorConstraint = 16,
    SpecialConstraintMask = 28,
}

export enum TypeAttributes {
    NotPublic = 0,
    AutoLayout = 1,
    AnsiClass = 2,
    Class = 3,
    Public = 4,
    NestedPublic = 5,
    NestedPrivate = 6,
    NestedFamily = 7,
    NestedAssembly = 8,
    NestedFamANDAssem = 16,
    NestedFamORAssem = 24,
    VisibilityMask = 32,
    SequentialLayout = 128,
    ExplicitLayout = 256,
    LayoutMask = 1024,
    Interface = 2048,
    ClassSemanticsMask = 4096,
    Abstract = 8192,
    Sealed = 16384,
    SpecialName = 65536,
    RTSpecialName = 131072,
    Import = 196608,
    Serializable = 262144,
    WindowsRuntime = 264192,
    UnicodeClass = 1048576,
    AutoClass = 12582912,
}

export enum LayoutKind {
    Sequential = 0,
    Explicit = 2,
    Auto = 3,
}

export class StructLayoutAttribute {
    value!: LayoutKind;
    readonly typeId!: any | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.value = _data["value"] !== undefined ? _data["value"] : <any>null;
            (<any>this).typeId = _data["typeId"] !== undefined ? _data["typeId"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): StructLayoutAttribute {
        data = typeof data === 'object' ? data : {};
        return createInstance<StructLayoutAttribute>(data, _mappings, StructLayoutAttribute);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value !== undefined ? this.value : <any>null;
        data["typeId"] = this.typeId !== undefined ? this.typeId : <any>null;
        return data; 
    }
}

export class RuntimeTypeHandle {
    value!: IntPtr;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.value = _data["value"] ? IntPtr.fromJS(_data["value"], _mappings) : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): RuntimeTypeHandle {
        data = typeof data === 'object' ? data : {};
        return createInstance<RuntimeTypeHandle>(data, _mappings, RuntimeTypeHandle);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value ? this.value.toJSON() : <any>null;
        return data; 
    }
}

export class TypeInfo {
    readonly genericTypeParameters!: Type[] | null;
    readonly declaredConstructors!: ConstructorInfo[] | null;
    readonly declaredEvents!: EventInfo[] | null;
    readonly declaredFields!: FieldInfo[] | null;
    readonly declaredMembers!: MemberInfo[] | null;
    readonly declaredMethods!: MethodInfo[] | null;
    readonly declaredNestedTypes!: TypeInfo[] | null;
    readonly declaredProperties!: PropertyInfo[] | null;
    readonly implementedInterfaces!: Type[] | null;
    readonly isInterface!: boolean;
    memberType!: MemberTypes;
    readonly namespace!: string | null;
    readonly assemblyQualifiedName!: string | null;
    readonly fullName!: string | null;
    assembly!: Assembly;
    module!: Module;
    readonly isNested!: boolean;
    declaringType!: Type;
    declaringMethod!: MethodBase;
    reflectedType!: Type;
    underlyingSystemType!: Type;
    readonly isTypeDefinition!: boolean;
    readonly isArray!: boolean;
    readonly isByRef!: boolean;
    readonly isPointer!: boolean;
    readonly isConstructedGenericType!: boolean;
    readonly isGenericParameter!: boolean;
    readonly isGenericTypeParameter!: boolean;
    readonly isGenericMethodParameter!: boolean;
    readonly isGenericType!: boolean;
    readonly isGenericTypeDefinition!: boolean;
    readonly isSZArray!: boolean;
    readonly isVariableBoundArray!: boolean;
    readonly isByRefLike!: boolean;
    readonly hasElementType!: boolean;
    readonly genericTypeArguments!: Type[] | null;
    readonly genericParameterPosition!: number;
    genericParameterAttributes!: GenericParameterAttributes;
    attributes!: TypeAttributes;
    readonly isAbstract!: boolean;
    readonly isImport!: boolean;
    readonly isSealed!: boolean;
    readonly isSpecialName!: boolean;
    readonly isClass!: boolean;
    readonly isNestedAssembly!: boolean;
    readonly isNestedFamANDAssem!: boolean;
    readonly isNestedFamily!: boolean;
    readonly isNestedFamORAssem!: boolean;
    readonly isNestedPrivate!: boolean;
    readonly isNestedPublic!: boolean;
    readonly isNotPublic!: boolean;
    readonly isPublic!: boolean;
    readonly isAutoLayout!: boolean;
    readonly isExplicitLayout!: boolean;
    readonly isLayoutSequential!: boolean;
    readonly isAnsiClass!: boolean;
    readonly isAutoClass!: boolean;
    readonly isUnicodeClass!: boolean;
    readonly isCOMObject!: boolean;
    readonly isContextful!: boolean;
    readonly isEnum!: boolean;
    readonly isMarshalByRef!: boolean;
    readonly isPrimitive!: boolean;
    readonly isValueType!: boolean;
    readonly isSignatureType!: boolean;
    readonly isSecurityCritical!: boolean;
    readonly isSecuritySafeCritical!: boolean;
    readonly isSecurityTransparent!: boolean;
    structLayoutAttribute!: StructLayoutAttribute;
    typeInitializer!: ConstructorInfo;
    typeHandle!: RuntimeTypeHandle;
    readonly guid!: string;
    baseType!: Type;
    readonly isSerializable!: boolean;
    readonly containsGenericParameters!: boolean;
    readonly isVisible!: boolean;
    readonly name!: string | null;
    readonly customAttributes!: CustomAttributeData[] | null;
    readonly isCollectible!: boolean;
    readonly metadataToken!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            if (Array.isArray(_data["genericTypeParameters"])) {
                (<any>this).genericTypeParameters = [] as any;
                for (let item of _data["genericTypeParameters"])
                    (<any>this).genericTypeParameters!.push(Type.fromJS(item, _mappings));
            }
            if (Array.isArray(_data["declaredConstructors"])) {
                (<any>this).declaredConstructors = [] as any;
                for (let item of _data["declaredConstructors"])
                    (<any>this).declaredConstructors!.push(ConstructorInfo.fromJS(item, _mappings));
            }
            if (Array.isArray(_data["declaredEvents"])) {
                (<any>this).declaredEvents = [] as any;
                for (let item of _data["declaredEvents"])
                    (<any>this).declaredEvents!.push(EventInfo.fromJS(item, _mappings));
            }
            if (Array.isArray(_data["declaredFields"])) {
                (<any>this).declaredFields = [] as any;
                for (let item of _data["declaredFields"])
                    (<any>this).declaredFields!.push(FieldInfo.fromJS(item, _mappings));
            }
            if (Array.isArray(_data["declaredMembers"])) {
                (<any>this).declaredMembers = [] as any;
                for (let item of _data["declaredMembers"])
                    (<any>this).declaredMembers!.push(MemberInfo.fromJS(item, _mappings));
            }
            if (Array.isArray(_data["declaredMethods"])) {
                (<any>this).declaredMethods = [] as any;
                for (let item of _data["declaredMethods"])
                    (<any>this).declaredMethods!.push(MethodInfo.fromJS(item, _mappings));
            }
            if (Array.isArray(_data["declaredNestedTypes"])) {
                (<any>this).declaredNestedTypes = [] as any;
                for (let item of _data["declaredNestedTypes"])
                    (<any>this).declaredNestedTypes!.push(TypeInfo.fromJS(item, _mappings));
            }
            if (Array.isArray(_data["declaredProperties"])) {
                (<any>this).declaredProperties = [] as any;
                for (let item of _data["declaredProperties"])
                    (<any>this).declaredProperties!.push(PropertyInfo.fromJS(item, _mappings));
            }
            if (Array.isArray(_data["implementedInterfaces"])) {
                (<any>this).implementedInterfaces = [] as any;
                for (let item of _data["implementedInterfaces"])
                    (<any>this).implementedInterfaces!.push(Type.fromJS(item, _mappings));
            }
            (<any>this).isInterface = _data["isInterface"] !== undefined ? _data["isInterface"] : <any>null;
            this.memberType = _data["memberType"] !== undefined ? _data["memberType"] : <any>null;
            (<any>this).namespace = _data["namespace"] !== undefined ? _data["namespace"] : <any>null;
            (<any>this).assemblyQualifiedName = _data["assemblyQualifiedName"] !== undefined ? _data["assemblyQualifiedName"] : <any>null;
            (<any>this).fullName = _data["fullName"] !== undefined ? _data["fullName"] : <any>null;
            this.assembly = _data["assembly"] ? Assembly.fromJS(_data["assembly"], _mappings) : <any>null;
            this.module = _data["module"] ? Module.fromJS(_data["module"], _mappings) : <any>null;
            (<any>this).isNested = _data["isNested"] !== undefined ? _data["isNested"] : <any>null;
            this.declaringType = _data["declaringType"] ? Type.fromJS(_data["declaringType"], _mappings) : <any>null;
            this.declaringMethod = _data["declaringMethod"] ? MethodBase.fromJS(_data["declaringMethod"], _mappings) : <any>null;
            this.reflectedType = _data["reflectedType"] ? Type.fromJS(_data["reflectedType"], _mappings) : <any>null;
            this.underlyingSystemType = _data["underlyingSystemType"] ? Type.fromJS(_data["underlyingSystemType"], _mappings) : <any>null;
            (<any>this).isTypeDefinition = _data["isTypeDefinition"] !== undefined ? _data["isTypeDefinition"] : <any>null;
            (<any>this).isArray = _data["isArray"] !== undefined ? _data["isArray"] : <any>null;
            (<any>this).isByRef = _data["isByRef"] !== undefined ? _data["isByRef"] : <any>null;
            (<any>this).isPointer = _data["isPointer"] !== undefined ? _data["isPointer"] : <any>null;
            (<any>this).isConstructedGenericType = _data["isConstructedGenericType"] !== undefined ? _data["isConstructedGenericType"] : <any>null;
            (<any>this).isGenericParameter = _data["isGenericParameter"] !== undefined ? _data["isGenericParameter"] : <any>null;
            (<any>this).isGenericTypeParameter = _data["isGenericTypeParameter"] !== undefined ? _data["isGenericTypeParameter"] : <any>null;
            (<any>this).isGenericMethodParameter = _data["isGenericMethodParameter"] !== undefined ? _data["isGenericMethodParameter"] : <any>null;
            (<any>this).isGenericType = _data["isGenericType"] !== undefined ? _data["isGenericType"] : <any>null;
            (<any>this).isGenericTypeDefinition = _data["isGenericTypeDefinition"] !== undefined ? _data["isGenericTypeDefinition"] : <any>null;
            (<any>this).isSZArray = _data["isSZArray"] !== undefined ? _data["isSZArray"] : <any>null;
            (<any>this).isVariableBoundArray = _data["isVariableBoundArray"] !== undefined ? _data["isVariableBoundArray"] : <any>null;
            (<any>this).isByRefLike = _data["isByRefLike"] !== undefined ? _data["isByRefLike"] : <any>null;
            (<any>this).hasElementType = _data["hasElementType"] !== undefined ? _data["hasElementType"] : <any>null;
            if (Array.isArray(_data["genericTypeArguments"])) {
                (<any>this).genericTypeArguments = [] as any;
                for (let item of _data["genericTypeArguments"])
                    (<any>this).genericTypeArguments!.push(Type.fromJS(item, _mappings));
            }
            (<any>this).genericParameterPosition = _data["genericParameterPosition"] !== undefined ? _data["genericParameterPosition"] : <any>null;
            this.genericParameterAttributes = _data["genericParameterAttributes"] !== undefined ? _data["genericParameterAttributes"] : <any>null;
            this.attributes = _data["attributes"] !== undefined ? _data["attributes"] : <any>null;
            (<any>this).isAbstract = _data["isAbstract"] !== undefined ? _data["isAbstract"] : <any>null;
            (<any>this).isImport = _data["isImport"] !== undefined ? _data["isImport"] : <any>null;
            (<any>this).isSealed = _data["isSealed"] !== undefined ? _data["isSealed"] : <any>null;
            (<any>this).isSpecialName = _data["isSpecialName"] !== undefined ? _data["isSpecialName"] : <any>null;
            (<any>this).isClass = _data["isClass"] !== undefined ? _data["isClass"] : <any>null;
            (<any>this).isNestedAssembly = _data["isNestedAssembly"] !== undefined ? _data["isNestedAssembly"] : <any>null;
            (<any>this).isNestedFamANDAssem = _data["isNestedFamANDAssem"] !== undefined ? _data["isNestedFamANDAssem"] : <any>null;
            (<any>this).isNestedFamily = _data["isNestedFamily"] !== undefined ? _data["isNestedFamily"] : <any>null;
            (<any>this).isNestedFamORAssem = _data["isNestedFamORAssem"] !== undefined ? _data["isNestedFamORAssem"] : <any>null;
            (<any>this).isNestedPrivate = _data["isNestedPrivate"] !== undefined ? _data["isNestedPrivate"] : <any>null;
            (<any>this).isNestedPublic = _data["isNestedPublic"] !== undefined ? _data["isNestedPublic"] : <any>null;
            (<any>this).isNotPublic = _data["isNotPublic"] !== undefined ? _data["isNotPublic"] : <any>null;
            (<any>this).isPublic = _data["isPublic"] !== undefined ? _data["isPublic"] : <any>null;
            (<any>this).isAutoLayout = _data["isAutoLayout"] !== undefined ? _data["isAutoLayout"] : <any>null;
            (<any>this).isExplicitLayout = _data["isExplicitLayout"] !== undefined ? _data["isExplicitLayout"] : <any>null;
            (<any>this).isLayoutSequential = _data["isLayoutSequential"] !== undefined ? _data["isLayoutSequential"] : <any>null;
            (<any>this).isAnsiClass = _data["isAnsiClass"] !== undefined ? _data["isAnsiClass"] : <any>null;
            (<any>this).isAutoClass = _data["isAutoClass"] !== undefined ? _data["isAutoClass"] : <any>null;
            (<any>this).isUnicodeClass = _data["isUnicodeClass"] !== undefined ? _data["isUnicodeClass"] : <any>null;
            (<any>this).isCOMObject = _data["isCOMObject"] !== undefined ? _data["isCOMObject"] : <any>null;
            (<any>this).isContextful = _data["isContextful"] !== undefined ? _data["isContextful"] : <any>null;
            (<any>this).isEnum = _data["isEnum"] !== undefined ? _data["isEnum"] : <any>null;
            (<any>this).isMarshalByRef = _data["isMarshalByRef"] !== undefined ? _data["isMarshalByRef"] : <any>null;
            (<any>this).isPrimitive = _data["isPrimitive"] !== undefined ? _data["isPrimitive"] : <any>null;
            (<any>this).isValueType = _data["isValueType"] !== undefined ? _data["isValueType"] : <any>null;
            (<any>this).isSignatureType = _data["isSignatureType"] !== undefined ? _data["isSignatureType"] : <any>null;
            (<any>this).isSecurityCritical = _data["isSecurityCritical"] !== undefined ? _data["isSecurityCritical"] : <any>null;
            (<any>this).isSecuritySafeCritical = _data["isSecuritySafeCritical"] !== undefined ? _data["isSecuritySafeCritical"] : <any>null;
            (<any>this).isSecurityTransparent = _data["isSecurityTransparent"] !== undefined ? _data["isSecurityTransparent"] : <any>null;
            this.structLayoutAttribute = _data["structLayoutAttribute"] ? StructLayoutAttribute.fromJS(_data["structLayoutAttribute"], _mappings) : <any>null;
            this.typeInitializer = _data["typeInitializer"] ? ConstructorInfo.fromJS(_data["typeInitializer"], _mappings) : <any>null;
            this.typeHandle = _data["typeHandle"] ? RuntimeTypeHandle.fromJS(_data["typeHandle"], _mappings) : <any>null;
            (<any>this).guid = _data["guid"] !== undefined ? _data["guid"] : <any>null;
            this.baseType = _data["baseType"] ? Type.fromJS(_data["baseType"], _mappings) : <any>null;
            (<any>this).isSerializable = _data["isSerializable"] !== undefined ? _data["isSerializable"] : <any>null;
            (<any>this).containsGenericParameters = _data["containsGenericParameters"] !== undefined ? _data["containsGenericParameters"] : <any>null;
            (<any>this).isVisible = _data["isVisible"] !== undefined ? _data["isVisible"] : <any>null;
            (<any>this).name = _data["name"] !== undefined ? _data["name"] : <any>null;
            if (Array.isArray(_data["customAttributes"])) {
                (<any>this).customAttributes = [] as any;
                for (let item of _data["customAttributes"])
                    (<any>this).customAttributes!.push(CustomAttributeData.fromJS(item, _mappings));
            }
            (<any>this).isCollectible = _data["isCollectible"] !== undefined ? _data["isCollectible"] : <any>null;
            (<any>this).metadataToken = _data["metadataToken"] !== undefined ? _data["metadataToken"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): TypeInfo {
        data = typeof data === 'object' ? data : {};
        return createInstance<TypeInfo>(data, _mappings, TypeInfo);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.genericTypeParameters)) {
            data["genericTypeParameters"] = [];
            for (let item of this.genericTypeParameters)
                data["genericTypeParameters"].push(item.toJSON());
        }
        if (Array.isArray(this.declaredConstructors)) {
            data["declaredConstructors"] = [];
            for (let item of this.declaredConstructors)
                data["declaredConstructors"].push(item.toJSON());
        }
        if (Array.isArray(this.declaredEvents)) {
            data["declaredEvents"] = [];
            for (let item of this.declaredEvents)
                data["declaredEvents"].push(item.toJSON());
        }
        if (Array.isArray(this.declaredFields)) {
            data["declaredFields"] = [];
            for (let item of this.declaredFields)
                data["declaredFields"].push(item.toJSON());
        }
        if (Array.isArray(this.declaredMembers)) {
            data["declaredMembers"] = [];
            for (let item of this.declaredMembers)
                data["declaredMembers"].push(item.toJSON());
        }
        if (Array.isArray(this.declaredMethods)) {
            data["declaredMethods"] = [];
            for (let item of this.declaredMethods)
                data["declaredMethods"].push(item.toJSON());
        }
        if (Array.isArray(this.declaredNestedTypes)) {
            data["declaredNestedTypes"] = [];
            for (let item of this.declaredNestedTypes)
                data["declaredNestedTypes"].push(item.toJSON());
        }
        if (Array.isArray(this.declaredProperties)) {
            data["declaredProperties"] = [];
            for (let item of this.declaredProperties)
                data["declaredProperties"].push(item.toJSON());
        }
        if (Array.isArray(this.implementedInterfaces)) {
            data["implementedInterfaces"] = [];
            for (let item of this.implementedInterfaces)
                data["implementedInterfaces"].push(item.toJSON());
        }
        data["isInterface"] = this.isInterface !== undefined ? this.isInterface : <any>null;
        data["memberType"] = this.memberType !== undefined ? this.memberType : <any>null;
        data["namespace"] = this.namespace !== undefined ? this.namespace : <any>null;
        data["assemblyQualifiedName"] = this.assemblyQualifiedName !== undefined ? this.assemblyQualifiedName : <any>null;
        data["fullName"] = this.fullName !== undefined ? this.fullName : <any>null;
        data["assembly"] = this.assembly ? this.assembly.toJSON() : <any>null;
        data["module"] = this.module ? this.module.toJSON() : <any>null;
        data["isNested"] = this.isNested !== undefined ? this.isNested : <any>null;
        data["declaringType"] = this.declaringType ? this.declaringType.toJSON() : <any>null;
        data["declaringMethod"] = this.declaringMethod ? this.declaringMethod.toJSON() : <any>null;
        data["reflectedType"] = this.reflectedType ? this.reflectedType.toJSON() : <any>null;
        data["underlyingSystemType"] = this.underlyingSystemType ? this.underlyingSystemType.toJSON() : <any>null;
        data["isTypeDefinition"] = this.isTypeDefinition !== undefined ? this.isTypeDefinition : <any>null;
        data["isArray"] = this.isArray !== undefined ? this.isArray : <any>null;
        data["isByRef"] = this.isByRef !== undefined ? this.isByRef : <any>null;
        data["isPointer"] = this.isPointer !== undefined ? this.isPointer : <any>null;
        data["isConstructedGenericType"] = this.isConstructedGenericType !== undefined ? this.isConstructedGenericType : <any>null;
        data["isGenericParameter"] = this.isGenericParameter !== undefined ? this.isGenericParameter : <any>null;
        data["isGenericTypeParameter"] = this.isGenericTypeParameter !== undefined ? this.isGenericTypeParameter : <any>null;
        data["isGenericMethodParameter"] = this.isGenericMethodParameter !== undefined ? this.isGenericMethodParameter : <any>null;
        data["isGenericType"] = this.isGenericType !== undefined ? this.isGenericType : <any>null;
        data["isGenericTypeDefinition"] = this.isGenericTypeDefinition !== undefined ? this.isGenericTypeDefinition : <any>null;
        data["isSZArray"] = this.isSZArray !== undefined ? this.isSZArray : <any>null;
        data["isVariableBoundArray"] = this.isVariableBoundArray !== undefined ? this.isVariableBoundArray : <any>null;
        data["isByRefLike"] = this.isByRefLike !== undefined ? this.isByRefLike : <any>null;
        data["hasElementType"] = this.hasElementType !== undefined ? this.hasElementType : <any>null;
        if (Array.isArray(this.genericTypeArguments)) {
            data["genericTypeArguments"] = [];
            for (let item of this.genericTypeArguments)
                data["genericTypeArguments"].push(item.toJSON());
        }
        data["genericParameterPosition"] = this.genericParameterPosition !== undefined ? this.genericParameterPosition : <any>null;
        data["genericParameterAttributes"] = this.genericParameterAttributes !== undefined ? this.genericParameterAttributes : <any>null;
        data["attributes"] = this.attributes !== undefined ? this.attributes : <any>null;
        data["isAbstract"] = this.isAbstract !== undefined ? this.isAbstract : <any>null;
        data["isImport"] = this.isImport !== undefined ? this.isImport : <any>null;
        data["isSealed"] = this.isSealed !== undefined ? this.isSealed : <any>null;
        data["isSpecialName"] = this.isSpecialName !== undefined ? this.isSpecialName : <any>null;
        data["isClass"] = this.isClass !== undefined ? this.isClass : <any>null;
        data["isNestedAssembly"] = this.isNestedAssembly !== undefined ? this.isNestedAssembly : <any>null;
        data["isNestedFamANDAssem"] = this.isNestedFamANDAssem !== undefined ? this.isNestedFamANDAssem : <any>null;
        data["isNestedFamily"] = this.isNestedFamily !== undefined ? this.isNestedFamily : <any>null;
        data["isNestedFamORAssem"] = this.isNestedFamORAssem !== undefined ? this.isNestedFamORAssem : <any>null;
        data["isNestedPrivate"] = this.isNestedPrivate !== undefined ? this.isNestedPrivate : <any>null;
        data["isNestedPublic"] = this.isNestedPublic !== undefined ? this.isNestedPublic : <any>null;
        data["isNotPublic"] = this.isNotPublic !== undefined ? this.isNotPublic : <any>null;
        data["isPublic"] = this.isPublic !== undefined ? this.isPublic : <any>null;
        data["isAutoLayout"] = this.isAutoLayout !== undefined ? this.isAutoLayout : <any>null;
        data["isExplicitLayout"] = this.isExplicitLayout !== undefined ? this.isExplicitLayout : <any>null;
        data["isLayoutSequential"] = this.isLayoutSequential !== undefined ? this.isLayoutSequential : <any>null;
        data["isAnsiClass"] = this.isAnsiClass !== undefined ? this.isAnsiClass : <any>null;
        data["isAutoClass"] = this.isAutoClass !== undefined ? this.isAutoClass : <any>null;
        data["isUnicodeClass"] = this.isUnicodeClass !== undefined ? this.isUnicodeClass : <any>null;
        data["isCOMObject"] = this.isCOMObject !== undefined ? this.isCOMObject : <any>null;
        data["isContextful"] = this.isContextful !== undefined ? this.isContextful : <any>null;
        data["isEnum"] = this.isEnum !== undefined ? this.isEnum : <any>null;
        data["isMarshalByRef"] = this.isMarshalByRef !== undefined ? this.isMarshalByRef : <any>null;
        data["isPrimitive"] = this.isPrimitive !== undefined ? this.isPrimitive : <any>null;
        data["isValueType"] = this.isValueType !== undefined ? this.isValueType : <any>null;
        data["isSignatureType"] = this.isSignatureType !== undefined ? this.isSignatureType : <any>null;
        data["isSecurityCritical"] = this.isSecurityCritical !== undefined ? this.isSecurityCritical : <any>null;
        data["isSecuritySafeCritical"] = this.isSecuritySafeCritical !== undefined ? this.isSecuritySafeCritical : <any>null;
        data["isSecurityTransparent"] = this.isSecurityTransparent !== undefined ? this.isSecurityTransparent : <any>null;
        data["structLayoutAttribute"] = this.structLayoutAttribute ? this.structLayoutAttribute.toJSON() : <any>null;
        data["typeInitializer"] = this.typeInitializer ? this.typeInitializer.toJSON() : <any>null;
        data["typeHandle"] = this.typeHandle ? this.typeHandle.toJSON() : <any>null;
        data["guid"] = this.guid !== undefined ? this.guid : <any>null;
        data["baseType"] = this.baseType ? this.baseType.toJSON() : <any>null;
        data["isSerializable"] = this.isSerializable !== undefined ? this.isSerializable : <any>null;
        data["containsGenericParameters"] = this.containsGenericParameters !== undefined ? this.containsGenericParameters : <any>null;
        data["isVisible"] = this.isVisible !== undefined ? this.isVisible : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        if (Array.isArray(this.customAttributes)) {
            data["customAttributes"] = [];
            for (let item of this.customAttributes)
                data["customAttributes"].push(item.toJSON());
        }
        data["isCollectible"] = this.isCollectible !== undefined ? this.isCollectible : <any>null;
        data["metadataToken"] = this.metadataToken !== undefined ? this.metadataToken : <any>null;
        return data; 
    }
}

export enum SecurityRuleSet {
    None = 0,
    Level1 = 1,
    Level2 = 2,
}

export class Assembly {
    readonly definedTypes!: TypeInfo[] | null;
    readonly exportedTypes!: Type[] | null;
    readonly codeBase!: string | null;
    entryPoint!: MethodInfo;
    readonly fullName!: string | null;
    readonly imageRuntimeVersion!: string | null;
    readonly isDynamic!: boolean;
    readonly location!: string | null;
    readonly reflectionOnly!: boolean;
    readonly isCollectible!: boolean;
    readonly isFullyTrusted!: boolean;
    readonly customAttributes!: CustomAttributeData[] | null;
    readonly escapedCodeBase!: string | null;
    manifestModule!: Module;
    readonly modules!: Module[] | null;
    readonly globalAssemblyCache!: boolean;
    readonly hostContext!: number;
    securityRuleSet!: SecurityRuleSet;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            if (Array.isArray(_data["definedTypes"])) {
                (<any>this).definedTypes = [] as any;
                for (let item of _data["definedTypes"])
                    (<any>this).definedTypes!.push(TypeInfo.fromJS(item, _mappings));
            }
            if (Array.isArray(_data["exportedTypes"])) {
                (<any>this).exportedTypes = [] as any;
                for (let item of _data["exportedTypes"])
                    (<any>this).exportedTypes!.push(Type.fromJS(item, _mappings));
            }
            (<any>this).codeBase = _data["codeBase"] !== undefined ? _data["codeBase"] : <any>null;
            this.entryPoint = _data["entryPoint"] ? MethodInfo.fromJS(_data["entryPoint"], _mappings) : <any>null;
            (<any>this).fullName = _data["fullName"] !== undefined ? _data["fullName"] : <any>null;
            (<any>this).imageRuntimeVersion = _data["imageRuntimeVersion"] !== undefined ? _data["imageRuntimeVersion"] : <any>null;
            (<any>this).isDynamic = _data["isDynamic"] !== undefined ? _data["isDynamic"] : <any>null;
            (<any>this).location = _data["location"] !== undefined ? _data["location"] : <any>null;
            (<any>this).reflectionOnly = _data["reflectionOnly"] !== undefined ? _data["reflectionOnly"] : <any>null;
            (<any>this).isCollectible = _data["isCollectible"] !== undefined ? _data["isCollectible"] : <any>null;
            (<any>this).isFullyTrusted = _data["isFullyTrusted"] !== undefined ? _data["isFullyTrusted"] : <any>null;
            if (Array.isArray(_data["customAttributes"])) {
                (<any>this).customAttributes = [] as any;
                for (let item of _data["customAttributes"])
                    (<any>this).customAttributes!.push(CustomAttributeData.fromJS(item, _mappings));
            }
            (<any>this).escapedCodeBase = _data["escapedCodeBase"] !== undefined ? _data["escapedCodeBase"] : <any>null;
            this.manifestModule = _data["manifestModule"] ? Module.fromJS(_data["manifestModule"], _mappings) : <any>null;
            if (Array.isArray(_data["modules"])) {
                (<any>this).modules = [] as any;
                for (let item of _data["modules"])
                    (<any>this).modules!.push(Module.fromJS(item, _mappings));
            }
            (<any>this).globalAssemblyCache = _data["globalAssemblyCache"] !== undefined ? _data["globalAssemblyCache"] : <any>null;
            (<any>this).hostContext = _data["hostContext"] !== undefined ? _data["hostContext"] : <any>null;
            this.securityRuleSet = _data["securityRuleSet"] !== undefined ? _data["securityRuleSet"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): Assembly {
        data = typeof data === 'object' ? data : {};
        return createInstance<Assembly>(data, _mappings, Assembly);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.definedTypes)) {
            data["definedTypes"] = [];
            for (let item of this.definedTypes)
                data["definedTypes"].push(item.toJSON());
        }
        if (Array.isArray(this.exportedTypes)) {
            data["exportedTypes"] = [];
            for (let item of this.exportedTypes)
                data["exportedTypes"].push(item.toJSON());
        }
        data["codeBase"] = this.codeBase !== undefined ? this.codeBase : <any>null;
        data["entryPoint"] = this.entryPoint ? this.entryPoint.toJSON() : <any>null;
        data["fullName"] = this.fullName !== undefined ? this.fullName : <any>null;
        data["imageRuntimeVersion"] = this.imageRuntimeVersion !== undefined ? this.imageRuntimeVersion : <any>null;
        data["isDynamic"] = this.isDynamic !== undefined ? this.isDynamic : <any>null;
        data["location"] = this.location !== undefined ? this.location : <any>null;
        data["reflectionOnly"] = this.reflectionOnly !== undefined ? this.reflectionOnly : <any>null;
        data["isCollectible"] = this.isCollectible !== undefined ? this.isCollectible : <any>null;
        data["isFullyTrusted"] = this.isFullyTrusted !== undefined ? this.isFullyTrusted : <any>null;
        if (Array.isArray(this.customAttributes)) {
            data["customAttributes"] = [];
            for (let item of this.customAttributes)
                data["customAttributes"].push(item.toJSON());
        }
        data["escapedCodeBase"] = this.escapedCodeBase !== undefined ? this.escapedCodeBase : <any>null;
        data["manifestModule"] = this.manifestModule ? this.manifestModule.toJSON() : <any>null;
        if (Array.isArray(this.modules)) {
            data["modules"] = [];
            for (let item of this.modules)
                data["modules"].push(item.toJSON());
        }
        data["globalAssemblyCache"] = this.globalAssemblyCache !== undefined ? this.globalAssemblyCache : <any>null;
        data["hostContext"] = this.hostContext !== undefined ? this.hostContext : <any>null;
        data["securityRuleSet"] = this.securityRuleSet !== undefined ? this.securityRuleSet : <any>null;
        return data; 
    }
}

export class Type {
    readonly isInterface!: boolean;
    memberType!: MemberTypes;
    readonly namespace!: string | null;
    readonly assemblyQualifiedName!: string | null;
    readonly fullName!: string | null;
    assembly!: Assembly;
    module!: Module;
    readonly isNested!: boolean;
    declaringType!: Type;
    declaringMethod!: MethodBase;
    reflectedType!: Type;
    underlyingSystemType!: Type;
    readonly isTypeDefinition!: boolean;
    readonly isArray!: boolean;
    readonly isByRef!: boolean;
    readonly isPointer!: boolean;
    readonly isConstructedGenericType!: boolean;
    readonly isGenericParameter!: boolean;
    readonly isGenericTypeParameter!: boolean;
    readonly isGenericMethodParameter!: boolean;
    readonly isGenericType!: boolean;
    readonly isGenericTypeDefinition!: boolean;
    readonly isSZArray!: boolean;
    readonly isVariableBoundArray!: boolean;
    readonly isByRefLike!: boolean;
    readonly hasElementType!: boolean;
    readonly genericTypeArguments!: Type[] | null;
    readonly genericParameterPosition!: number;
    genericParameterAttributes!: GenericParameterAttributes;
    attributes!: TypeAttributes;
    readonly isAbstract!: boolean;
    readonly isImport!: boolean;
    readonly isSealed!: boolean;
    readonly isSpecialName!: boolean;
    readonly isClass!: boolean;
    readonly isNestedAssembly!: boolean;
    readonly isNestedFamANDAssem!: boolean;
    readonly isNestedFamily!: boolean;
    readonly isNestedFamORAssem!: boolean;
    readonly isNestedPrivate!: boolean;
    readonly isNestedPublic!: boolean;
    readonly isNotPublic!: boolean;
    readonly isPublic!: boolean;
    readonly isAutoLayout!: boolean;
    readonly isExplicitLayout!: boolean;
    readonly isLayoutSequential!: boolean;
    readonly isAnsiClass!: boolean;
    readonly isAutoClass!: boolean;
    readonly isUnicodeClass!: boolean;
    readonly isCOMObject!: boolean;
    readonly isContextful!: boolean;
    readonly isEnum!: boolean;
    readonly isMarshalByRef!: boolean;
    readonly isPrimitive!: boolean;
    readonly isValueType!: boolean;
    readonly isSignatureType!: boolean;
    readonly isSecurityCritical!: boolean;
    readonly isSecuritySafeCritical!: boolean;
    readonly isSecurityTransparent!: boolean;
    structLayoutAttribute!: StructLayoutAttribute;
    typeInitializer!: ConstructorInfo;
    typeHandle!: RuntimeTypeHandle;
    readonly guid!: string;
    baseType!: Type;
    readonly isSerializable!: boolean;
    readonly containsGenericParameters!: boolean;
    readonly isVisible!: boolean;
    readonly name!: string | null;
    readonly customAttributes!: CustomAttributeData[] | null;
    readonly isCollectible!: boolean;
    readonly metadataToken!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            (<any>this).isInterface = _data["isInterface"] !== undefined ? _data["isInterface"] : <any>null;
            this.memberType = _data["memberType"] !== undefined ? _data["memberType"] : <any>null;
            (<any>this).namespace = _data["namespace"] !== undefined ? _data["namespace"] : <any>null;
            (<any>this).assemblyQualifiedName = _data["assemblyQualifiedName"] !== undefined ? _data["assemblyQualifiedName"] : <any>null;
            (<any>this).fullName = _data["fullName"] !== undefined ? _data["fullName"] : <any>null;
            this.assembly = _data["assembly"] ? Assembly.fromJS(_data["assembly"], _mappings) : <any>null;
            this.module = _data["module"] ? Module.fromJS(_data["module"], _mappings) : <any>null;
            (<any>this).isNested = _data["isNested"] !== undefined ? _data["isNested"] : <any>null;
            this.declaringType = _data["declaringType"] ? Type.fromJS(_data["declaringType"], _mappings) : <any>null;
            this.declaringMethod = _data["declaringMethod"] ? MethodBase.fromJS(_data["declaringMethod"], _mappings) : <any>null;
            this.reflectedType = _data["reflectedType"] ? Type.fromJS(_data["reflectedType"], _mappings) : <any>null;
            this.underlyingSystemType = _data["underlyingSystemType"] ? Type.fromJS(_data["underlyingSystemType"], _mappings) : <any>null;
            (<any>this).isTypeDefinition = _data["isTypeDefinition"] !== undefined ? _data["isTypeDefinition"] : <any>null;
            (<any>this).isArray = _data["isArray"] !== undefined ? _data["isArray"] : <any>null;
            (<any>this).isByRef = _data["isByRef"] !== undefined ? _data["isByRef"] : <any>null;
            (<any>this).isPointer = _data["isPointer"] !== undefined ? _data["isPointer"] : <any>null;
            (<any>this).isConstructedGenericType = _data["isConstructedGenericType"] !== undefined ? _data["isConstructedGenericType"] : <any>null;
            (<any>this).isGenericParameter = _data["isGenericParameter"] !== undefined ? _data["isGenericParameter"] : <any>null;
            (<any>this).isGenericTypeParameter = _data["isGenericTypeParameter"] !== undefined ? _data["isGenericTypeParameter"] : <any>null;
            (<any>this).isGenericMethodParameter = _data["isGenericMethodParameter"] !== undefined ? _data["isGenericMethodParameter"] : <any>null;
            (<any>this).isGenericType = _data["isGenericType"] !== undefined ? _data["isGenericType"] : <any>null;
            (<any>this).isGenericTypeDefinition = _data["isGenericTypeDefinition"] !== undefined ? _data["isGenericTypeDefinition"] : <any>null;
            (<any>this).isSZArray = _data["isSZArray"] !== undefined ? _data["isSZArray"] : <any>null;
            (<any>this).isVariableBoundArray = _data["isVariableBoundArray"] !== undefined ? _data["isVariableBoundArray"] : <any>null;
            (<any>this).isByRefLike = _data["isByRefLike"] !== undefined ? _data["isByRefLike"] : <any>null;
            (<any>this).hasElementType = _data["hasElementType"] !== undefined ? _data["hasElementType"] : <any>null;
            if (Array.isArray(_data["genericTypeArguments"])) {
                (<any>this).genericTypeArguments = [] as any;
                for (let item of _data["genericTypeArguments"])
                    (<any>this).genericTypeArguments!.push(Type.fromJS(item, _mappings));
            }
            (<any>this).genericParameterPosition = _data["genericParameterPosition"] !== undefined ? _data["genericParameterPosition"] : <any>null;
            this.genericParameterAttributes = _data["genericParameterAttributes"] !== undefined ? _data["genericParameterAttributes"] : <any>null;
            this.attributes = _data["attributes"] !== undefined ? _data["attributes"] : <any>null;
            (<any>this).isAbstract = _data["isAbstract"] !== undefined ? _data["isAbstract"] : <any>null;
            (<any>this).isImport = _data["isImport"] !== undefined ? _data["isImport"] : <any>null;
            (<any>this).isSealed = _data["isSealed"] !== undefined ? _data["isSealed"] : <any>null;
            (<any>this).isSpecialName = _data["isSpecialName"] !== undefined ? _data["isSpecialName"] : <any>null;
            (<any>this).isClass = _data["isClass"] !== undefined ? _data["isClass"] : <any>null;
            (<any>this).isNestedAssembly = _data["isNestedAssembly"] !== undefined ? _data["isNestedAssembly"] : <any>null;
            (<any>this).isNestedFamANDAssem = _data["isNestedFamANDAssem"] !== undefined ? _data["isNestedFamANDAssem"] : <any>null;
            (<any>this).isNestedFamily = _data["isNestedFamily"] !== undefined ? _data["isNestedFamily"] : <any>null;
            (<any>this).isNestedFamORAssem = _data["isNestedFamORAssem"] !== undefined ? _data["isNestedFamORAssem"] : <any>null;
            (<any>this).isNestedPrivate = _data["isNestedPrivate"] !== undefined ? _data["isNestedPrivate"] : <any>null;
            (<any>this).isNestedPublic = _data["isNestedPublic"] !== undefined ? _data["isNestedPublic"] : <any>null;
            (<any>this).isNotPublic = _data["isNotPublic"] !== undefined ? _data["isNotPublic"] : <any>null;
            (<any>this).isPublic = _data["isPublic"] !== undefined ? _data["isPublic"] : <any>null;
            (<any>this).isAutoLayout = _data["isAutoLayout"] !== undefined ? _data["isAutoLayout"] : <any>null;
            (<any>this).isExplicitLayout = _data["isExplicitLayout"] !== undefined ? _data["isExplicitLayout"] : <any>null;
            (<any>this).isLayoutSequential = _data["isLayoutSequential"] !== undefined ? _data["isLayoutSequential"] : <any>null;
            (<any>this).isAnsiClass = _data["isAnsiClass"] !== undefined ? _data["isAnsiClass"] : <any>null;
            (<any>this).isAutoClass = _data["isAutoClass"] !== undefined ? _data["isAutoClass"] : <any>null;
            (<any>this).isUnicodeClass = _data["isUnicodeClass"] !== undefined ? _data["isUnicodeClass"] : <any>null;
            (<any>this).isCOMObject = _data["isCOMObject"] !== undefined ? _data["isCOMObject"] : <any>null;
            (<any>this).isContextful = _data["isContextful"] !== undefined ? _data["isContextful"] : <any>null;
            (<any>this).isEnum = _data["isEnum"] !== undefined ? _data["isEnum"] : <any>null;
            (<any>this).isMarshalByRef = _data["isMarshalByRef"] !== undefined ? _data["isMarshalByRef"] : <any>null;
            (<any>this).isPrimitive = _data["isPrimitive"] !== undefined ? _data["isPrimitive"] : <any>null;
            (<any>this).isValueType = _data["isValueType"] !== undefined ? _data["isValueType"] : <any>null;
            (<any>this).isSignatureType = _data["isSignatureType"] !== undefined ? _data["isSignatureType"] : <any>null;
            (<any>this).isSecurityCritical = _data["isSecurityCritical"] !== undefined ? _data["isSecurityCritical"] : <any>null;
            (<any>this).isSecuritySafeCritical = _data["isSecuritySafeCritical"] !== undefined ? _data["isSecuritySafeCritical"] : <any>null;
            (<any>this).isSecurityTransparent = _data["isSecurityTransparent"] !== undefined ? _data["isSecurityTransparent"] : <any>null;
            this.structLayoutAttribute = _data["structLayoutAttribute"] ? StructLayoutAttribute.fromJS(_data["structLayoutAttribute"], _mappings) : <any>null;
            this.typeInitializer = _data["typeInitializer"] ? ConstructorInfo.fromJS(_data["typeInitializer"], _mappings) : <any>null;
            this.typeHandle = _data["typeHandle"] ? RuntimeTypeHandle.fromJS(_data["typeHandle"], _mappings) : <any>null;
            (<any>this).guid = _data["guid"] !== undefined ? _data["guid"] : <any>null;
            this.baseType = _data["baseType"] ? Type.fromJS(_data["baseType"], _mappings) : <any>null;
            (<any>this).isSerializable = _data["isSerializable"] !== undefined ? _data["isSerializable"] : <any>null;
            (<any>this).containsGenericParameters = _data["containsGenericParameters"] !== undefined ? _data["containsGenericParameters"] : <any>null;
            (<any>this).isVisible = _data["isVisible"] !== undefined ? _data["isVisible"] : <any>null;
            (<any>this).name = _data["name"] !== undefined ? _data["name"] : <any>null;
            if (Array.isArray(_data["customAttributes"])) {
                (<any>this).customAttributes = [] as any;
                for (let item of _data["customAttributes"])
                    (<any>this).customAttributes!.push(CustomAttributeData.fromJS(item, _mappings));
            }
            (<any>this).isCollectible = _data["isCollectible"] !== undefined ? _data["isCollectible"] : <any>null;
            (<any>this).metadataToken = _data["metadataToken"] !== undefined ? _data["metadataToken"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): Type {
        data = typeof data === 'object' ? data : {};
        return createInstance<Type>(data, _mappings, Type);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isInterface"] = this.isInterface !== undefined ? this.isInterface : <any>null;
        data["memberType"] = this.memberType !== undefined ? this.memberType : <any>null;
        data["namespace"] = this.namespace !== undefined ? this.namespace : <any>null;
        data["assemblyQualifiedName"] = this.assemblyQualifiedName !== undefined ? this.assemblyQualifiedName : <any>null;
        data["fullName"] = this.fullName !== undefined ? this.fullName : <any>null;
        data["assembly"] = this.assembly ? this.assembly.toJSON() : <any>null;
        data["module"] = this.module ? this.module.toJSON() : <any>null;
        data["isNested"] = this.isNested !== undefined ? this.isNested : <any>null;
        data["declaringType"] = this.declaringType ? this.declaringType.toJSON() : <any>null;
        data["declaringMethod"] = this.declaringMethod ? this.declaringMethod.toJSON() : <any>null;
        data["reflectedType"] = this.reflectedType ? this.reflectedType.toJSON() : <any>null;
        data["underlyingSystemType"] = this.underlyingSystemType ? this.underlyingSystemType.toJSON() : <any>null;
        data["isTypeDefinition"] = this.isTypeDefinition !== undefined ? this.isTypeDefinition : <any>null;
        data["isArray"] = this.isArray !== undefined ? this.isArray : <any>null;
        data["isByRef"] = this.isByRef !== undefined ? this.isByRef : <any>null;
        data["isPointer"] = this.isPointer !== undefined ? this.isPointer : <any>null;
        data["isConstructedGenericType"] = this.isConstructedGenericType !== undefined ? this.isConstructedGenericType : <any>null;
        data["isGenericParameter"] = this.isGenericParameter !== undefined ? this.isGenericParameter : <any>null;
        data["isGenericTypeParameter"] = this.isGenericTypeParameter !== undefined ? this.isGenericTypeParameter : <any>null;
        data["isGenericMethodParameter"] = this.isGenericMethodParameter !== undefined ? this.isGenericMethodParameter : <any>null;
        data["isGenericType"] = this.isGenericType !== undefined ? this.isGenericType : <any>null;
        data["isGenericTypeDefinition"] = this.isGenericTypeDefinition !== undefined ? this.isGenericTypeDefinition : <any>null;
        data["isSZArray"] = this.isSZArray !== undefined ? this.isSZArray : <any>null;
        data["isVariableBoundArray"] = this.isVariableBoundArray !== undefined ? this.isVariableBoundArray : <any>null;
        data["isByRefLike"] = this.isByRefLike !== undefined ? this.isByRefLike : <any>null;
        data["hasElementType"] = this.hasElementType !== undefined ? this.hasElementType : <any>null;
        if (Array.isArray(this.genericTypeArguments)) {
            data["genericTypeArguments"] = [];
            for (let item of this.genericTypeArguments)
                data["genericTypeArguments"].push(item.toJSON());
        }
        data["genericParameterPosition"] = this.genericParameterPosition !== undefined ? this.genericParameterPosition : <any>null;
        data["genericParameterAttributes"] = this.genericParameterAttributes !== undefined ? this.genericParameterAttributes : <any>null;
        data["attributes"] = this.attributes !== undefined ? this.attributes : <any>null;
        data["isAbstract"] = this.isAbstract !== undefined ? this.isAbstract : <any>null;
        data["isImport"] = this.isImport !== undefined ? this.isImport : <any>null;
        data["isSealed"] = this.isSealed !== undefined ? this.isSealed : <any>null;
        data["isSpecialName"] = this.isSpecialName !== undefined ? this.isSpecialName : <any>null;
        data["isClass"] = this.isClass !== undefined ? this.isClass : <any>null;
        data["isNestedAssembly"] = this.isNestedAssembly !== undefined ? this.isNestedAssembly : <any>null;
        data["isNestedFamANDAssem"] = this.isNestedFamANDAssem !== undefined ? this.isNestedFamANDAssem : <any>null;
        data["isNestedFamily"] = this.isNestedFamily !== undefined ? this.isNestedFamily : <any>null;
        data["isNestedFamORAssem"] = this.isNestedFamORAssem !== undefined ? this.isNestedFamORAssem : <any>null;
        data["isNestedPrivate"] = this.isNestedPrivate !== undefined ? this.isNestedPrivate : <any>null;
        data["isNestedPublic"] = this.isNestedPublic !== undefined ? this.isNestedPublic : <any>null;
        data["isNotPublic"] = this.isNotPublic !== undefined ? this.isNotPublic : <any>null;
        data["isPublic"] = this.isPublic !== undefined ? this.isPublic : <any>null;
        data["isAutoLayout"] = this.isAutoLayout !== undefined ? this.isAutoLayout : <any>null;
        data["isExplicitLayout"] = this.isExplicitLayout !== undefined ? this.isExplicitLayout : <any>null;
        data["isLayoutSequential"] = this.isLayoutSequential !== undefined ? this.isLayoutSequential : <any>null;
        data["isAnsiClass"] = this.isAnsiClass !== undefined ? this.isAnsiClass : <any>null;
        data["isAutoClass"] = this.isAutoClass !== undefined ? this.isAutoClass : <any>null;
        data["isUnicodeClass"] = this.isUnicodeClass !== undefined ? this.isUnicodeClass : <any>null;
        data["isCOMObject"] = this.isCOMObject !== undefined ? this.isCOMObject : <any>null;
        data["isContextful"] = this.isContextful !== undefined ? this.isContextful : <any>null;
        data["isEnum"] = this.isEnum !== undefined ? this.isEnum : <any>null;
        data["isMarshalByRef"] = this.isMarshalByRef !== undefined ? this.isMarshalByRef : <any>null;
        data["isPrimitive"] = this.isPrimitive !== undefined ? this.isPrimitive : <any>null;
        data["isValueType"] = this.isValueType !== undefined ? this.isValueType : <any>null;
        data["isSignatureType"] = this.isSignatureType !== undefined ? this.isSignatureType : <any>null;
        data["isSecurityCritical"] = this.isSecurityCritical !== undefined ? this.isSecurityCritical : <any>null;
        data["isSecuritySafeCritical"] = this.isSecuritySafeCritical !== undefined ? this.isSecuritySafeCritical : <any>null;
        data["isSecurityTransparent"] = this.isSecurityTransparent !== undefined ? this.isSecurityTransparent : <any>null;
        data["structLayoutAttribute"] = this.structLayoutAttribute ? this.structLayoutAttribute.toJSON() : <any>null;
        data["typeInitializer"] = this.typeInitializer ? this.typeInitializer.toJSON() : <any>null;
        data["typeHandle"] = this.typeHandle ? this.typeHandle.toJSON() : <any>null;
        data["guid"] = this.guid !== undefined ? this.guid : <any>null;
        data["baseType"] = this.baseType ? this.baseType.toJSON() : <any>null;
        data["isSerializable"] = this.isSerializable !== undefined ? this.isSerializable : <any>null;
        data["containsGenericParameters"] = this.containsGenericParameters !== undefined ? this.containsGenericParameters : <any>null;
        data["isVisible"] = this.isVisible !== undefined ? this.isVisible : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        if (Array.isArray(this.customAttributes)) {
            data["customAttributes"] = [];
            for (let item of this.customAttributes)
                data["customAttributes"].push(item.toJSON());
        }
        data["isCollectible"] = this.isCollectible !== undefined ? this.isCollectible : <any>null;
        data["metadataToken"] = this.metadataToken !== undefined ? this.metadataToken : <any>null;
        return data; 
    }
}

export class MemberInfo {
    memberType!: MemberTypes;
    readonly name!: string | null;
    declaringType!: Type;
    reflectedType!: Type;
    module!: Module;
    readonly customAttributes!: CustomAttributeData[] | null;
    readonly isCollectible!: boolean;
    readonly metadataToken!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.memberType = _data["memberType"] !== undefined ? _data["memberType"] : <any>null;
            (<any>this).name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.declaringType = _data["declaringType"] ? Type.fromJS(_data["declaringType"], _mappings) : <any>null;
            this.reflectedType = _data["reflectedType"] ? Type.fromJS(_data["reflectedType"], _mappings) : <any>null;
            this.module = _data["module"] ? Module.fromJS(_data["module"], _mappings) : <any>null;
            if (Array.isArray(_data["customAttributes"])) {
                (<any>this).customAttributes = [] as any;
                for (let item of _data["customAttributes"])
                    (<any>this).customAttributes!.push(CustomAttributeData.fromJS(item, _mappings));
            }
            (<any>this).isCollectible = _data["isCollectible"] !== undefined ? _data["isCollectible"] : <any>null;
            (<any>this).metadataToken = _data["metadataToken"] !== undefined ? _data["metadataToken"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): MemberInfo {
        data = typeof data === 'object' ? data : {};
        return createInstance<MemberInfo>(data, _mappings, MemberInfo);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["memberType"] = this.memberType !== undefined ? this.memberType : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["declaringType"] = this.declaringType ? this.declaringType.toJSON() : <any>null;
        data["reflectedType"] = this.reflectedType ? this.reflectedType.toJSON() : <any>null;
        data["module"] = this.module ? this.module.toJSON() : <any>null;
        if (Array.isArray(this.customAttributes)) {
            data["customAttributes"] = [];
            for (let item of this.customAttributes)
                data["customAttributes"].push(item.toJSON());
        }
        data["isCollectible"] = this.isCollectible !== undefined ? this.isCollectible : <any>null;
        data["metadataToken"] = this.metadataToken !== undefined ? this.metadataToken : <any>null;
        return data; 
    }
}

export class ParameterInfo {
    attributes!: ParameterAttributes;
    member!: MemberInfo;
    readonly name!: string | null;
    parameterType!: Type;
    readonly position!: number;
    readonly isIn!: boolean;
    readonly isLcid!: boolean;
    readonly isOptional!: boolean;
    readonly isOut!: boolean;
    readonly isRetval!: boolean;
    readonly defaultValue!: any | null;
    readonly rawDefaultValue!: any | null;
    readonly hasDefaultValue!: boolean;
    readonly customAttributes!: CustomAttributeData[] | null;
    readonly metadataToken!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.attributes = _data["attributes"] !== undefined ? _data["attributes"] : <any>null;
            this.member = _data["member"] ? MemberInfo.fromJS(_data["member"], _mappings) : <any>null;
            (<any>this).name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.parameterType = _data["parameterType"] ? Type.fromJS(_data["parameterType"], _mappings) : <any>null;
            (<any>this).position = _data["position"] !== undefined ? _data["position"] : <any>null;
            (<any>this).isIn = _data["isIn"] !== undefined ? _data["isIn"] : <any>null;
            (<any>this).isLcid = _data["isLcid"] !== undefined ? _data["isLcid"] : <any>null;
            (<any>this).isOptional = _data["isOptional"] !== undefined ? _data["isOptional"] : <any>null;
            (<any>this).isOut = _data["isOut"] !== undefined ? _data["isOut"] : <any>null;
            (<any>this).isRetval = _data["isRetval"] !== undefined ? _data["isRetval"] : <any>null;
            (<any>this).defaultValue = _data["defaultValue"] !== undefined ? _data["defaultValue"] : <any>null;
            (<any>this).rawDefaultValue = _data["rawDefaultValue"] !== undefined ? _data["rawDefaultValue"] : <any>null;
            (<any>this).hasDefaultValue = _data["hasDefaultValue"] !== undefined ? _data["hasDefaultValue"] : <any>null;
            if (Array.isArray(_data["customAttributes"])) {
                (<any>this).customAttributes = [] as any;
                for (let item of _data["customAttributes"])
                    (<any>this).customAttributes!.push(CustomAttributeData.fromJS(item, _mappings));
            }
            (<any>this).metadataToken = _data["metadataToken"] !== undefined ? _data["metadataToken"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): ParameterInfo {
        data = typeof data === 'object' ? data : {};
        return createInstance<ParameterInfo>(data, _mappings, ParameterInfo);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["attributes"] = this.attributes !== undefined ? this.attributes : <any>null;
        data["member"] = this.member ? this.member.toJSON() : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["parameterType"] = this.parameterType ? this.parameterType.toJSON() : <any>null;
        data["position"] = this.position !== undefined ? this.position : <any>null;
        data["isIn"] = this.isIn !== undefined ? this.isIn : <any>null;
        data["isLcid"] = this.isLcid !== undefined ? this.isLcid : <any>null;
        data["isOptional"] = this.isOptional !== undefined ? this.isOptional : <any>null;
        data["isOut"] = this.isOut !== undefined ? this.isOut : <any>null;
        data["isRetval"] = this.isRetval !== undefined ? this.isRetval : <any>null;
        data["defaultValue"] = this.defaultValue !== undefined ? this.defaultValue : <any>null;
        data["rawDefaultValue"] = this.rawDefaultValue !== undefined ? this.rawDefaultValue : <any>null;
        data["hasDefaultValue"] = this.hasDefaultValue !== undefined ? this.hasDefaultValue : <any>null;
        if (Array.isArray(this.customAttributes)) {
            data["customAttributes"] = [];
            for (let item of this.customAttributes)
                data["customAttributes"].push(item.toJSON());
        }
        data["metadataToken"] = this.metadataToken !== undefined ? this.metadataToken : <any>null;
        return data; 
    }
}

export class ICustomAttributeProvider {

    init(_data?: any, _mappings?: any) {
    }

    static fromJS(data: any, _mappings?: any): ICustomAttributeProvider {
        data = typeof data === 'object' ? data : {};
        return createInstance<ICustomAttributeProvider>(data, _mappings, ICustomAttributeProvider);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data; 
    }
}

export class MethodInfo {
    memberType!: MemberTypes;
    returnParameter!: ParameterInfo;
    returnType!: Type;
    returnTypeCustomAttributes!: ICustomAttributeProvider;
    attributes!: MethodAttributes;
    methodImplementationFlags!: MethodImplAttributes;
    callingConvention!: CallingConventions;
    readonly isAbstract!: boolean;
    readonly isConstructor!: boolean;
    readonly isFinal!: boolean;
    readonly isHideBySig!: boolean;
    readonly isSpecialName!: boolean;
    readonly isStatic!: boolean;
    readonly isVirtual!: boolean;
    readonly isAssembly!: boolean;
    readonly isFamily!: boolean;
    readonly isFamilyAndAssembly!: boolean;
    readonly isFamilyOrAssembly!: boolean;
    readonly isPrivate!: boolean;
    readonly isPublic!: boolean;
    readonly isConstructedGenericMethod!: boolean;
    readonly isGenericMethod!: boolean;
    readonly isGenericMethodDefinition!: boolean;
    readonly containsGenericParameters!: boolean;
    methodHandle!: RuntimeMethodHandle;
    readonly isSecurityCritical!: boolean;
    readonly isSecuritySafeCritical!: boolean;
    readonly isSecurityTransparent!: boolean;
    readonly name!: string | null;
    declaringType!: Type;
    reflectedType!: Type;
    module!: Module;
    readonly customAttributes!: CustomAttributeData[] | null;
    readonly isCollectible!: boolean;
    readonly metadataToken!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.memberType = _data["memberType"] !== undefined ? _data["memberType"] : <any>null;
            this.returnParameter = _data["returnParameter"] ? ParameterInfo.fromJS(_data["returnParameter"], _mappings) : <any>null;
            this.returnType = _data["returnType"] ? Type.fromJS(_data["returnType"], _mappings) : <any>null;
            this.returnTypeCustomAttributes = _data["returnTypeCustomAttributes"] ? ICustomAttributeProvider.fromJS(_data["returnTypeCustomAttributes"], _mappings) : <any>null;
            this.attributes = _data["attributes"] !== undefined ? _data["attributes"] : <any>null;
            this.methodImplementationFlags = _data["methodImplementationFlags"] !== undefined ? _data["methodImplementationFlags"] : <any>null;
            this.callingConvention = _data["callingConvention"] !== undefined ? _data["callingConvention"] : <any>null;
            (<any>this).isAbstract = _data["isAbstract"] !== undefined ? _data["isAbstract"] : <any>null;
            (<any>this).isConstructor = _data["isConstructor"] !== undefined ? _data["isConstructor"] : <any>null;
            (<any>this).isFinal = _data["isFinal"] !== undefined ? _data["isFinal"] : <any>null;
            (<any>this).isHideBySig = _data["isHideBySig"] !== undefined ? _data["isHideBySig"] : <any>null;
            (<any>this).isSpecialName = _data["isSpecialName"] !== undefined ? _data["isSpecialName"] : <any>null;
            (<any>this).isStatic = _data["isStatic"] !== undefined ? _data["isStatic"] : <any>null;
            (<any>this).isVirtual = _data["isVirtual"] !== undefined ? _data["isVirtual"] : <any>null;
            (<any>this).isAssembly = _data["isAssembly"] !== undefined ? _data["isAssembly"] : <any>null;
            (<any>this).isFamily = _data["isFamily"] !== undefined ? _data["isFamily"] : <any>null;
            (<any>this).isFamilyAndAssembly = _data["isFamilyAndAssembly"] !== undefined ? _data["isFamilyAndAssembly"] : <any>null;
            (<any>this).isFamilyOrAssembly = _data["isFamilyOrAssembly"] !== undefined ? _data["isFamilyOrAssembly"] : <any>null;
            (<any>this).isPrivate = _data["isPrivate"] !== undefined ? _data["isPrivate"] : <any>null;
            (<any>this).isPublic = _data["isPublic"] !== undefined ? _data["isPublic"] : <any>null;
            (<any>this).isConstructedGenericMethod = _data["isConstructedGenericMethod"] !== undefined ? _data["isConstructedGenericMethod"] : <any>null;
            (<any>this).isGenericMethod = _data["isGenericMethod"] !== undefined ? _data["isGenericMethod"] : <any>null;
            (<any>this).isGenericMethodDefinition = _data["isGenericMethodDefinition"] !== undefined ? _data["isGenericMethodDefinition"] : <any>null;
            (<any>this).containsGenericParameters = _data["containsGenericParameters"] !== undefined ? _data["containsGenericParameters"] : <any>null;
            this.methodHandle = _data["methodHandle"] ? RuntimeMethodHandle.fromJS(_data["methodHandle"], _mappings) : <any>null;
            (<any>this).isSecurityCritical = _data["isSecurityCritical"] !== undefined ? _data["isSecurityCritical"] : <any>null;
            (<any>this).isSecuritySafeCritical = _data["isSecuritySafeCritical"] !== undefined ? _data["isSecuritySafeCritical"] : <any>null;
            (<any>this).isSecurityTransparent = _data["isSecurityTransparent"] !== undefined ? _data["isSecurityTransparent"] : <any>null;
            (<any>this).name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.declaringType = _data["declaringType"] ? Type.fromJS(_data["declaringType"], _mappings) : <any>null;
            this.reflectedType = _data["reflectedType"] ? Type.fromJS(_data["reflectedType"], _mappings) : <any>null;
            this.module = _data["module"] ? Module.fromJS(_data["module"], _mappings) : <any>null;
            if (Array.isArray(_data["customAttributes"])) {
                (<any>this).customAttributes = [] as any;
                for (let item of _data["customAttributes"])
                    (<any>this).customAttributes!.push(CustomAttributeData.fromJS(item, _mappings));
            }
            (<any>this).isCollectible = _data["isCollectible"] !== undefined ? _data["isCollectible"] : <any>null;
            (<any>this).metadataToken = _data["metadataToken"] !== undefined ? _data["metadataToken"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): MethodInfo {
        data = typeof data === 'object' ? data : {};
        return createInstance<MethodInfo>(data, _mappings, MethodInfo);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["memberType"] = this.memberType !== undefined ? this.memberType : <any>null;
        data["returnParameter"] = this.returnParameter ? this.returnParameter.toJSON() : <any>null;
        data["returnType"] = this.returnType ? this.returnType.toJSON() : <any>null;
        data["returnTypeCustomAttributes"] = this.returnTypeCustomAttributes ? this.returnTypeCustomAttributes.toJSON() : <any>null;
        data["attributes"] = this.attributes !== undefined ? this.attributes : <any>null;
        data["methodImplementationFlags"] = this.methodImplementationFlags !== undefined ? this.methodImplementationFlags : <any>null;
        data["callingConvention"] = this.callingConvention !== undefined ? this.callingConvention : <any>null;
        data["isAbstract"] = this.isAbstract !== undefined ? this.isAbstract : <any>null;
        data["isConstructor"] = this.isConstructor !== undefined ? this.isConstructor : <any>null;
        data["isFinal"] = this.isFinal !== undefined ? this.isFinal : <any>null;
        data["isHideBySig"] = this.isHideBySig !== undefined ? this.isHideBySig : <any>null;
        data["isSpecialName"] = this.isSpecialName !== undefined ? this.isSpecialName : <any>null;
        data["isStatic"] = this.isStatic !== undefined ? this.isStatic : <any>null;
        data["isVirtual"] = this.isVirtual !== undefined ? this.isVirtual : <any>null;
        data["isAssembly"] = this.isAssembly !== undefined ? this.isAssembly : <any>null;
        data["isFamily"] = this.isFamily !== undefined ? this.isFamily : <any>null;
        data["isFamilyAndAssembly"] = this.isFamilyAndAssembly !== undefined ? this.isFamilyAndAssembly : <any>null;
        data["isFamilyOrAssembly"] = this.isFamilyOrAssembly !== undefined ? this.isFamilyOrAssembly : <any>null;
        data["isPrivate"] = this.isPrivate !== undefined ? this.isPrivate : <any>null;
        data["isPublic"] = this.isPublic !== undefined ? this.isPublic : <any>null;
        data["isConstructedGenericMethod"] = this.isConstructedGenericMethod !== undefined ? this.isConstructedGenericMethod : <any>null;
        data["isGenericMethod"] = this.isGenericMethod !== undefined ? this.isGenericMethod : <any>null;
        data["isGenericMethodDefinition"] = this.isGenericMethodDefinition !== undefined ? this.isGenericMethodDefinition : <any>null;
        data["containsGenericParameters"] = this.containsGenericParameters !== undefined ? this.containsGenericParameters : <any>null;
        data["methodHandle"] = this.methodHandle ? this.methodHandle.toJSON() : <any>null;
        data["isSecurityCritical"] = this.isSecurityCritical !== undefined ? this.isSecurityCritical : <any>null;
        data["isSecuritySafeCritical"] = this.isSecuritySafeCritical !== undefined ? this.isSecuritySafeCritical : <any>null;
        data["isSecurityTransparent"] = this.isSecurityTransparent !== undefined ? this.isSecurityTransparent : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["declaringType"] = this.declaringType ? this.declaringType.toJSON() : <any>null;
        data["reflectedType"] = this.reflectedType ? this.reflectedType.toJSON() : <any>null;
        data["module"] = this.module ? this.module.toJSON() : <any>null;
        if (Array.isArray(this.customAttributes)) {
            data["customAttributes"] = [];
            for (let item of this.customAttributes)
                data["customAttributes"].push(item.toJSON());
        }
        data["isCollectible"] = this.isCollectible !== undefined ? this.isCollectible : <any>null;
        data["metadataToken"] = this.metadataToken !== undefined ? this.metadataToken : <any>null;
        return data; 
    }
}

export class Action {
    readonly target!: any | null;
    method!: MethodInfo;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            (<any>this).target = _data["target"] !== undefined ? _data["target"] : <any>null;
            this.method = _data["method"] ? MethodInfo.fromJS(_data["method"], _mappings) : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): Action {
        data = typeof data === 'object' ? data : {};
        return createInstance<Action>(data, _mappings, Action);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["target"] = this.target !== undefined ? this.target : <any>null;
        data["method"] = this.method ? this.method.toJSON() : <any>null;
        return data; 
    }
}

export class BAUPCParams {
    shape!: string | null;
    finalUse!: string | null;
    externaldiameter!: number;
    thickness!: number;
    aperture!: number;
    abrasivMaterials!: string | null;
    binder!: string | null;
    granularity!: number;
    hardness!: string | null;
    organizationNumber!: string | null;
    lineSpeed!: string | null;
    externalStandard!: string | null;
    isFromADW!: boolean | null;
    errmsg!: string | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.shape = _data["shape"] !== undefined ? _data["shape"] : <any>null;
            this.finalUse = _data["finalUse"] !== undefined ? _data["finalUse"] : <any>null;
            this.externaldiameter = _data["externaldiameter"] !== undefined ? _data["externaldiameter"] : <any>null;
            this.thickness = _data["thickness"] !== undefined ? _data["thickness"] : <any>null;
            this.aperture = _data["aperture"] !== undefined ? _data["aperture"] : <any>null;
            this.abrasivMaterials = _data["abrasivMaterials"] !== undefined ? _data["abrasivMaterials"] : <any>null;
            this.binder = _data["binder"] !== undefined ? _data["binder"] : <any>null;
            this.granularity = _data["granularity"] !== undefined ? _data["granularity"] : <any>null;
            this.hardness = _data["hardness"] !== undefined ? _data["hardness"] : <any>null;
            this.organizationNumber = _data["organizationNumber"] !== undefined ? _data["organizationNumber"] : <any>null;
            this.lineSpeed = _data["lineSpeed"] !== undefined ? _data["lineSpeed"] : <any>null;
            this.externalStandard = _data["externalStandard"] !== undefined ? _data["externalStandard"] : <any>null;
            this.isFromADW = _data["isFromADW"] !== undefined ? _data["isFromADW"] : <any>null;
            this.errmsg = _data["errmsg"] !== undefined ? _data["errmsg"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): BAUPCParams {
        data = typeof data === 'object' ? data : {};
        return createInstance<BAUPCParams>(data, _mappings, BAUPCParams);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shape"] = this.shape !== undefined ? this.shape : <any>null;
        data["finalUse"] = this.finalUse !== undefined ? this.finalUse : <any>null;
        data["externaldiameter"] = this.externaldiameter !== undefined ? this.externaldiameter : <any>null;
        data["thickness"] = this.thickness !== undefined ? this.thickness : <any>null;
        data["aperture"] = this.aperture !== undefined ? this.aperture : <any>null;
        data["abrasivMaterials"] = this.abrasivMaterials !== undefined ? this.abrasivMaterials : <any>null;
        data["binder"] = this.binder !== undefined ? this.binder : <any>null;
        data["granularity"] = this.granularity !== undefined ? this.granularity : <any>null;
        data["hardness"] = this.hardness !== undefined ? this.hardness : <any>null;
        data["organizationNumber"] = this.organizationNumber !== undefined ? this.organizationNumber : <any>null;
        data["lineSpeed"] = this.lineSpeed !== undefined ? this.lineSpeed : <any>null;
        data["externalStandard"] = this.externalStandard !== undefined ? this.externalStandard : <any>null;
        data["isFromADW"] = this.isFromADW !== undefined ? this.isFromADW : <any>null;
        data["errmsg"] = this.errmsg !== undefined ? this.errmsg : <any>null;
        return data; 
    }
}

export class UPCDescribe {
    isStandardPro!: boolean;
    outerUPCDesc!: string | null;
    upcDesc!: string | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.isStandardPro = _data["isStandardPro"] !== undefined ? _data["isStandardPro"] : <any>null;
            this.outerUPCDesc = _data["outerUPCDesc"] !== undefined ? _data["outerUPCDesc"] : <any>null;
            this.upcDesc = _data["upcDesc"] !== undefined ? _data["upcDesc"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): UPCDescribe {
        data = typeof data === 'object' ? data : {};
        return createInstance<UPCDescribe>(data, _mappings, UPCDescribe);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isStandardPro"] = this.isStandardPro !== undefined ? this.isStandardPro : <any>null;
        data["outerUPCDesc"] = this.outerUPCDesc !== undefined ? this.outerUPCDesc : <any>null;
        data["upcDesc"] = this.upcDesc !== undefined ? this.upcDesc : <any>null;
        return data; 
    }
}

export class UPCTest {
    upc!: string | null;
    subPlatform!: string | null;
    pricingType!: string | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.upc = _data["upc"] !== undefined ? _data["upc"] : <any>null;
            this.subPlatform = _data["subPlatform"] !== undefined ? _data["subPlatform"] : <any>null;
            this.pricingType = _data["pricingType"] !== undefined ? _data["pricingType"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): UPCTest {
        data = typeof data === 'object' ? data : {};
        return createInstance<UPCTest>(data, _mappings, UPCTest);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["upc"] = this.upc !== undefined ? this.upc : <any>null;
        data["subPlatform"] = this.subPlatform !== undefined ? this.subPlatform : <any>null;
        data["pricingType"] = this.pricingType !== undefined ? this.pricingType : <any>null;
        return data; 
    }
}

export class UPCPrice {
    upc!: string | null;
    price!: any | null;
    error!: string | null;
    wheelType!: string | null;
    finalUse!: string | null;
    externaldiameter!: number | null;
    thickness!: number | null;
    aperture!: number | null;
    abrasivMaterials!: string | null;
    binder!: string | null;
    granularity!: number | null;
    hardness!: string | null;
    organizationNumber!: string | null;
    lineSpeed!: string | null;
    externalStandard!: string | null;
    upcInfo!: string | null;
    ffc!: number | null;
    fiveThCMPrice!: number | null;
    nineThCMPrice!: number | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.upc = _data["upc"] !== undefined ? _data["upc"] : <any>null;
            this.price = _data["price"] !== undefined ? _data["price"] : <any>null;
            this.error = _data["error"] !== undefined ? _data["error"] : <any>null;
            this.wheelType = _data["wheelType"] !== undefined ? _data["wheelType"] : <any>null;
            this.finalUse = _data["finalUse"] !== undefined ? _data["finalUse"] : <any>null;
            this.externaldiameter = _data["externaldiameter"] !== undefined ? _data["externaldiameter"] : <any>null;
            this.thickness = _data["thickness"] !== undefined ? _data["thickness"] : <any>null;
            this.aperture = _data["aperture"] !== undefined ? _data["aperture"] : <any>null;
            this.abrasivMaterials = _data["abrasivMaterials"] !== undefined ? _data["abrasivMaterials"] : <any>null;
            this.binder = _data["binder"] !== undefined ? _data["binder"] : <any>null;
            this.granularity = _data["granularity"] !== undefined ? _data["granularity"] : <any>null;
            this.hardness = _data["hardness"] !== undefined ? _data["hardness"] : <any>null;
            this.organizationNumber = _data["organizationNumber"] !== undefined ? _data["organizationNumber"] : <any>null;
            this.lineSpeed = _data["lineSpeed"] !== undefined ? _data["lineSpeed"] : <any>null;
            this.externalStandard = _data["externalStandard"] !== undefined ? _data["externalStandard"] : <any>null;
            this.upcInfo = _data["upcInfo"] !== undefined ? _data["upcInfo"] : <any>null;
            this.ffc = _data["ffc"] !== undefined ? _data["ffc"] : <any>null;
            this.fiveThCMPrice = _data["fiveThCMPrice"] !== undefined ? _data["fiveThCMPrice"] : <any>null;
            this.nineThCMPrice = _data["nineThCMPrice"] !== undefined ? _data["nineThCMPrice"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): UPCPrice {
        data = typeof data === 'object' ? data : {};
        return createInstance<UPCPrice>(data, _mappings, UPCPrice);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["upc"] = this.upc !== undefined ? this.upc : <any>null;
        data["price"] = this.price !== undefined ? this.price : <any>null;
        data["error"] = this.error !== undefined ? this.error : <any>null;
        data["wheelType"] = this.wheelType !== undefined ? this.wheelType : <any>null;
        data["finalUse"] = this.finalUse !== undefined ? this.finalUse : <any>null;
        data["externaldiameter"] = this.externaldiameter !== undefined ? this.externaldiameter : <any>null;
        data["thickness"] = this.thickness !== undefined ? this.thickness : <any>null;
        data["aperture"] = this.aperture !== undefined ? this.aperture : <any>null;
        data["abrasivMaterials"] = this.abrasivMaterials !== undefined ? this.abrasivMaterials : <any>null;
        data["binder"] = this.binder !== undefined ? this.binder : <any>null;
        data["granularity"] = this.granularity !== undefined ? this.granularity : <any>null;
        data["hardness"] = this.hardness !== undefined ? this.hardness : <any>null;
        data["organizationNumber"] = this.organizationNumber !== undefined ? this.organizationNumber : <any>null;
        data["lineSpeed"] = this.lineSpeed !== undefined ? this.lineSpeed : <any>null;
        data["externalStandard"] = this.externalStandard !== undefined ? this.externalStandard : <any>null;
        data["upcInfo"] = this.upcInfo !== undefined ? this.upcInfo : <any>null;
        data["ffc"] = this.ffc !== undefined ? this.ffc : <any>null;
        data["fiveThCMPrice"] = this.fiveThCMPrice !== undefined ? this.fiveThCMPrice : <any>null;
        data["nineThCMPrice"] = this.nineThCMPrice !== undefined ? this.nineThCMPrice : <any>null;
        return data; 
    }
}

export class QuotationThCMPrice {
    fiveThCMPrice!: number | null;
    nineThCMPrice!: number | null;
    ffc!: number | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.fiveThCMPrice = _data["fiveThCMPrice"] !== undefined ? _data["fiveThCMPrice"] : <any>null;
            this.nineThCMPrice = _data["nineThCMPrice"] !== undefined ? _data["nineThCMPrice"] : <any>null;
            this.ffc = _data["ffc"] !== undefined ? _data["ffc"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): QuotationThCMPrice {
        data = typeof data === 'object' ? data : {};
        return createInstance<QuotationThCMPrice>(data, _mappings, QuotationThCMPrice);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fiveThCMPrice"] = this.fiveThCMPrice !== undefined ? this.fiveThCMPrice : <any>null;
        data["nineThCMPrice"] = this.nineThCMPrice !== undefined ? this.nineThCMPrice : <any>null;
        data["ffc"] = this.ffc !== undefined ? this.ffc : <any>null;
        return data; 
    }
}

export class QuotationFiftyThPrice {
    fiftyThPricePrice!: number | null;
    ffc!: number | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.fiftyThPricePrice = _data["fiftyThPricePrice"] !== undefined ? _data["fiftyThPricePrice"] : <any>null;
            this.ffc = _data["ffc"] !== undefined ? _data["ffc"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): QuotationFiftyThPrice {
        data = typeof data === 'object' ? data : {};
        return createInstance<QuotationFiftyThPrice>(data, _mappings, QuotationFiftyThPrice);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fiftyThPricePrice"] = this.fiftyThPricePrice !== undefined ? this.fiftyThPricePrice : <any>null;
        data["ffc"] = this.ffc !== undefined ? this.ffc : <any>null;
        return data; 
    }
}

export class QuotationOfPricesListDto {
    id!: number;
    mail!: string | null;
    createBy!: string | null;
    createDate!: Date | null;
    custName!: string | null;
    status!: number | null;
    priceForm!: string | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.mail = _data["mail"] !== undefined ? _data["mail"] : <any>null;
            this.createBy = _data["createBy"] !== undefined ? _data["createBy"] : <any>null;
            this.createDate = _data["createDate"] ? new Date(_data["createDate"].toString()) : <any>null;
            this.custName = _data["custName"] !== undefined ? _data["custName"] : <any>null;
            this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
            this.priceForm = _data["priceForm"] !== undefined ? _data["priceForm"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): QuotationOfPricesListDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<QuotationOfPricesListDto>(data, _mappings, QuotationOfPricesListDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["mail"] = this.mail !== undefined ? this.mail : <any>null;
        data["createBy"] = this.createBy !== undefined ? this.createBy : <any>null;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>null;
        data["custName"] = this.custName !== undefined ? this.custName : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["priceForm"] = this.priceForm !== undefined ? this.priceForm : <any>null;
        return data; 
    }
}

export class PagedResultDtoOfQuotationOfPricesListDto {
    totalCount!: number;
    items!: QuotationOfPricesListDto[] | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"] !== undefined ? _data["totalCount"] : <any>null;
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(QuotationOfPricesListDto.fromJS(item, _mappings));
            }
        }
    }

    static fromJS(data: any, _mappings?: any): PagedResultDtoOfQuotationOfPricesListDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<PagedResultDtoOfQuotationOfPricesListDto>(data, _mappings, PagedResultDtoOfQuotationOfPricesListDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : <any>null;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export enum QuotationPriceFrom {
    Caculate = 0,
    PE = 1,
    PriceBook = 2,
    SpecialPrice_OneTime = 3,
    SpecialPrice_FullYear = 4,
    FFC = 11,
}

export class Vw_QuotationDetails {
    id!: number;
    custNum!: string | null;
    markFor!: string | null;
    upc!: string | null;
    upcPrice!: number | null;
    totalCost!: number | null;
    fixedCost!: number | null;
    upcDesc!: string | null;
    applicationStatus!: number;
    submitDate!: Date | null;
    isNoParameter!: boolean | null;
    specialRequirements!: string | null;
    detailDesc!: string | null;
    createBy!: string | null;
    createDate!: Date | null;
    margin!: number | null;
    contributionMargin!: number | null;
    facePrice!: number | null;
    quotationByUPC!: number | null;
    caculateError!: string | null;
    soa!: string | null;
    productCategory!: string | null;
    productApply!: string | null;
    inquiryData!: string | null;
    customerGroupName!: string | null;
    customerGroup!: string | null;
    priceListType!: string | null;
    formData!: string | null;
    salseFormData!: string | null;
    whetherImport!: string | null;
    priceCount!: number | null;
    tvmk!: string | null;
    militaryCustomers!: string | null;
    selecT_Text!: string | null;
    selecT_Index!: number | null;
    extData!: string | null;
    pEinputPrice!: string | null;
    salesInputPrice!: string | null;
    displayName!: string | null;
    cnTy!: string | null;
    specialPriceCaseID!: number | null;
    soldToName!: string | null;
    foreignEmail!: string | null;
    assignedTo!: string | null;
    priceGroup!: string | null;
    address!: string | null;
    phone!: string | null;
    markForName!: string | null;
    salesOrg!: string | null;
    idFrom!: number | null;
    priceFrom!: QuotationPriceFrom;
    priceFromList!: QuotationPriceFrom;
    globalDescrip!: string | null;
    hopeDays!: number | null;
    maintaincePEPrice!: boolean | null;
    maintainceSalesPrice!: boolean | null;
    priceId!: number | null;
    validFrom!: Date | null;
    validTo!: Date | null;
    currency!: string | null;
    uoM!: string | null;
    amount!: number | null;
    endAmount!: number | null;
    notUsed!: boolean | null;
    unit!: number | null;
    pePrice!: number | null;
    discont!: number | null;
    outerUPCDesc!: string | null;
    productRemarks!: string | null;
    salseUpc!: string | null;
    priceLogicForm!: number | null;
    salseOuterUPCDesc!: string | null;
    salseInnerUPCDesc!: string | null;
    listPriceType!: string | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.custNum = _data["custNum"] !== undefined ? _data["custNum"] : <any>null;
            this.markFor = _data["markFor"] !== undefined ? _data["markFor"] : <any>null;
            this.upc = _data["upc"] !== undefined ? _data["upc"] : <any>null;
            this.upcPrice = _data["upcPrice"] !== undefined ? _data["upcPrice"] : <any>null;
            this.totalCost = _data["totalCost"] !== undefined ? _data["totalCost"] : <any>null;
            this.fixedCost = _data["fixedCost"] !== undefined ? _data["fixedCost"] : <any>null;
            this.upcDesc = _data["upcDesc"] !== undefined ? _data["upcDesc"] : <any>null;
            this.applicationStatus = _data["applicationStatus"] !== undefined ? _data["applicationStatus"] : <any>null;
            this.submitDate = _data["submitDate"] ? new Date(_data["submitDate"].toString()) : <any>null;
            this.isNoParameter = _data["isNoParameter"] !== undefined ? _data["isNoParameter"] : <any>null;
            this.specialRequirements = _data["specialRequirements"] !== undefined ? _data["specialRequirements"] : <any>null;
            this.detailDesc = _data["detailDesc"] !== undefined ? _data["detailDesc"] : <any>null;
            this.createBy = _data["createBy"] !== undefined ? _data["createBy"] : <any>null;
            this.createDate = _data["createDate"] ? new Date(_data["createDate"].toString()) : <any>null;
            this.margin = _data["margin"] !== undefined ? _data["margin"] : <any>null;
            this.contributionMargin = _data["contributionMargin"] !== undefined ? _data["contributionMargin"] : <any>null;
            this.facePrice = _data["facePrice"] !== undefined ? _data["facePrice"] : <any>null;
            this.quotationByUPC = _data["quotationByUPC"] !== undefined ? _data["quotationByUPC"] : <any>null;
            this.caculateError = _data["caculateError"] !== undefined ? _data["caculateError"] : <any>null;
            this.soa = _data["soa"] !== undefined ? _data["soa"] : <any>null;
            this.productCategory = _data["productCategory"] !== undefined ? _data["productCategory"] : <any>null;
            this.productApply = _data["productApply"] !== undefined ? _data["productApply"] : <any>null;
            this.inquiryData = _data["inquiryData"] !== undefined ? _data["inquiryData"] : <any>null;
            this.customerGroupName = _data["customerGroupName"] !== undefined ? _data["customerGroupName"] : <any>null;
            this.customerGroup = _data["customerGroup"] !== undefined ? _data["customerGroup"] : <any>null;
            this.priceListType = _data["priceListType"] !== undefined ? _data["priceListType"] : <any>null;
            this.formData = _data["formData"] !== undefined ? _data["formData"] : <any>null;
            this.salseFormData = _data["salseFormData"] !== undefined ? _data["salseFormData"] : <any>null;
            this.whetherImport = _data["whetherImport"] !== undefined ? _data["whetherImport"] : <any>null;
            this.priceCount = _data["priceCount"] !== undefined ? _data["priceCount"] : <any>null;
            this.tvmk = _data["tvmk"] !== undefined ? _data["tvmk"] : <any>null;
            this.militaryCustomers = _data["militaryCustomers"] !== undefined ? _data["militaryCustomers"] : <any>null;
            this.selecT_Text = _data["selecT_Text"] !== undefined ? _data["selecT_Text"] : <any>null;
            this.selecT_Index = _data["selecT_Index"] !== undefined ? _data["selecT_Index"] : <any>null;
            this.extData = _data["extData"] !== undefined ? _data["extData"] : <any>null;
            this.pEinputPrice = _data["pEinputPrice"] !== undefined ? _data["pEinputPrice"] : <any>null;
            this.salesInputPrice = _data["salesInputPrice"] !== undefined ? _data["salesInputPrice"] : <any>null;
            this.displayName = _data["displayName"] !== undefined ? _data["displayName"] : <any>null;
            this.cnTy = _data["cnTy"] !== undefined ? _data["cnTy"] : <any>null;
            this.specialPriceCaseID = _data["specialPriceCaseID"] !== undefined ? _data["specialPriceCaseID"] : <any>null;
            this.soldToName = _data["soldToName"] !== undefined ? _data["soldToName"] : <any>null;
            this.foreignEmail = _data["foreignEmail"] !== undefined ? _data["foreignEmail"] : <any>null;
            this.assignedTo = _data["assignedTo"] !== undefined ? _data["assignedTo"] : <any>null;
            this.priceGroup = _data["priceGroup"] !== undefined ? _data["priceGroup"] : <any>null;
            this.address = _data["address"] !== undefined ? _data["address"] : <any>null;
            this.phone = _data["phone"] !== undefined ? _data["phone"] : <any>null;
            this.markForName = _data["markForName"] !== undefined ? _data["markForName"] : <any>null;
            this.salesOrg = _data["salesOrg"] !== undefined ? _data["salesOrg"] : <any>null;
            this.idFrom = _data["idFrom"] !== undefined ? _data["idFrom"] : <any>null;
            this.priceFrom = _data["priceFrom"] !== undefined ? _data["priceFrom"] : <any>null;
            this.priceFromList = _data["priceFromList"] !== undefined ? _data["priceFromList"] : <any>null;
            this.globalDescrip = _data["globalDescrip"] !== undefined ? _data["globalDescrip"] : <any>null;
            this.hopeDays = _data["hopeDays"] !== undefined ? _data["hopeDays"] : <any>null;
            this.maintaincePEPrice = _data["maintaincePEPrice"] !== undefined ? _data["maintaincePEPrice"] : <any>null;
            this.maintainceSalesPrice = _data["maintainceSalesPrice"] !== undefined ? _data["maintainceSalesPrice"] : <any>null;
            this.priceId = _data["priceId"] !== undefined ? _data["priceId"] : <any>null;
            this.validFrom = _data["validFrom"] ? new Date(_data["validFrom"].toString()) : <any>null;
            this.validTo = _data["validTo"] ? new Date(_data["validTo"].toString()) : <any>null;
            this.currency = _data["currency"] !== undefined ? _data["currency"] : <any>null;
            this.uoM = _data["uoM"] !== undefined ? _data["uoM"] : <any>null;
            this.amount = _data["amount"] !== undefined ? _data["amount"] : <any>null;
            this.endAmount = _data["endAmount"] !== undefined ? _data["endAmount"] : <any>null;
            this.notUsed = _data["notUsed"] !== undefined ? _data["notUsed"] : <any>null;
            this.unit = _data["unit"] !== undefined ? _data["unit"] : <any>null;
            this.pePrice = _data["pePrice"] !== undefined ? _data["pePrice"] : <any>null;
            this.discont = _data["discont"] !== undefined ? _data["discont"] : <any>null;
            this.outerUPCDesc = _data["outerUPCDesc"] !== undefined ? _data["outerUPCDesc"] : <any>null;
            this.productRemarks = _data["productRemarks"] !== undefined ? _data["productRemarks"] : <any>null;
            this.salseUpc = _data["salseUpc"] !== undefined ? _data["salseUpc"] : <any>null;
            this.priceLogicForm = _data["priceLogicForm"] !== undefined ? _data["priceLogicForm"] : <any>null;
            this.salseOuterUPCDesc = _data["salseOuterUPCDesc"] !== undefined ? _data["salseOuterUPCDesc"] : <any>null;
            this.salseInnerUPCDesc = _data["salseInnerUPCDesc"] !== undefined ? _data["salseInnerUPCDesc"] : <any>null;
            this.listPriceType = _data["listPriceType"] !== undefined ? _data["listPriceType"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): Vw_QuotationDetails {
        data = typeof data === 'object' ? data : {};
        return createInstance<Vw_QuotationDetails>(data, _mappings, Vw_QuotationDetails);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["custNum"] = this.custNum !== undefined ? this.custNum : <any>null;
        data["markFor"] = this.markFor !== undefined ? this.markFor : <any>null;
        data["upc"] = this.upc !== undefined ? this.upc : <any>null;
        data["upcPrice"] = this.upcPrice !== undefined ? this.upcPrice : <any>null;
        data["totalCost"] = this.totalCost !== undefined ? this.totalCost : <any>null;
        data["fixedCost"] = this.fixedCost !== undefined ? this.fixedCost : <any>null;
        data["upcDesc"] = this.upcDesc !== undefined ? this.upcDesc : <any>null;
        data["applicationStatus"] = this.applicationStatus !== undefined ? this.applicationStatus : <any>null;
        data["submitDate"] = this.submitDate ? this.submitDate.toISOString() : <any>null;
        data["isNoParameter"] = this.isNoParameter !== undefined ? this.isNoParameter : <any>null;
        data["specialRequirements"] = this.specialRequirements !== undefined ? this.specialRequirements : <any>null;
        data["detailDesc"] = this.detailDesc !== undefined ? this.detailDesc : <any>null;
        data["createBy"] = this.createBy !== undefined ? this.createBy : <any>null;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>null;
        data["margin"] = this.margin !== undefined ? this.margin : <any>null;
        data["contributionMargin"] = this.contributionMargin !== undefined ? this.contributionMargin : <any>null;
        data["facePrice"] = this.facePrice !== undefined ? this.facePrice : <any>null;
        data["quotationByUPC"] = this.quotationByUPC !== undefined ? this.quotationByUPC : <any>null;
        data["caculateError"] = this.caculateError !== undefined ? this.caculateError : <any>null;
        data["soa"] = this.soa !== undefined ? this.soa : <any>null;
        data["productCategory"] = this.productCategory !== undefined ? this.productCategory : <any>null;
        data["productApply"] = this.productApply !== undefined ? this.productApply : <any>null;
        data["inquiryData"] = this.inquiryData !== undefined ? this.inquiryData : <any>null;
        data["customerGroupName"] = this.customerGroupName !== undefined ? this.customerGroupName : <any>null;
        data["customerGroup"] = this.customerGroup !== undefined ? this.customerGroup : <any>null;
        data["priceListType"] = this.priceListType !== undefined ? this.priceListType : <any>null;
        data["formData"] = this.formData !== undefined ? this.formData : <any>null;
        data["salseFormData"] = this.salseFormData !== undefined ? this.salseFormData : <any>null;
        data["whetherImport"] = this.whetherImport !== undefined ? this.whetherImport : <any>null;
        data["priceCount"] = this.priceCount !== undefined ? this.priceCount : <any>null;
        data["tvmk"] = this.tvmk !== undefined ? this.tvmk : <any>null;
        data["militaryCustomers"] = this.militaryCustomers !== undefined ? this.militaryCustomers : <any>null;
        data["selecT_Text"] = this.selecT_Text !== undefined ? this.selecT_Text : <any>null;
        data["selecT_Index"] = this.selecT_Index !== undefined ? this.selecT_Index : <any>null;
        data["extData"] = this.extData !== undefined ? this.extData : <any>null;
        data["pEinputPrice"] = this.pEinputPrice !== undefined ? this.pEinputPrice : <any>null;
        data["salesInputPrice"] = this.salesInputPrice !== undefined ? this.salesInputPrice : <any>null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : <any>null;
        data["cnTy"] = this.cnTy !== undefined ? this.cnTy : <any>null;
        data["specialPriceCaseID"] = this.specialPriceCaseID !== undefined ? this.specialPriceCaseID : <any>null;
        data["soldToName"] = this.soldToName !== undefined ? this.soldToName : <any>null;
        data["foreignEmail"] = this.foreignEmail !== undefined ? this.foreignEmail : <any>null;
        data["assignedTo"] = this.assignedTo !== undefined ? this.assignedTo : <any>null;
        data["priceGroup"] = this.priceGroup !== undefined ? this.priceGroup : <any>null;
        data["address"] = this.address !== undefined ? this.address : <any>null;
        data["phone"] = this.phone !== undefined ? this.phone : <any>null;
        data["markForName"] = this.markForName !== undefined ? this.markForName : <any>null;
        data["salesOrg"] = this.salesOrg !== undefined ? this.salesOrg : <any>null;
        data["idFrom"] = this.idFrom !== undefined ? this.idFrom : <any>null;
        data["priceFrom"] = this.priceFrom !== undefined ? this.priceFrom : <any>null;
        data["priceFromList"] = this.priceFromList !== undefined ? this.priceFromList : <any>null;
        data["globalDescrip"] = this.globalDescrip !== undefined ? this.globalDescrip : <any>null;
        data["hopeDays"] = this.hopeDays !== undefined ? this.hopeDays : <any>null;
        data["maintaincePEPrice"] = this.maintaincePEPrice !== undefined ? this.maintaincePEPrice : <any>null;
        data["maintainceSalesPrice"] = this.maintainceSalesPrice !== undefined ? this.maintainceSalesPrice : <any>null;
        data["priceId"] = this.priceId !== undefined ? this.priceId : <any>null;
        data["validFrom"] = this.validFrom ? this.validFrom.toISOString() : <any>null;
        data["validTo"] = this.validTo ? this.validTo.toISOString() : <any>null;
        data["currency"] = this.currency !== undefined ? this.currency : <any>null;
        data["uoM"] = this.uoM !== undefined ? this.uoM : <any>null;
        data["amount"] = this.amount !== undefined ? this.amount : <any>null;
        data["endAmount"] = this.endAmount !== undefined ? this.endAmount : <any>null;
        data["notUsed"] = this.notUsed !== undefined ? this.notUsed : <any>null;
        data["unit"] = this.unit !== undefined ? this.unit : <any>null;
        data["pePrice"] = this.pePrice !== undefined ? this.pePrice : <any>null;
        data["discont"] = this.discont !== undefined ? this.discont : <any>null;
        data["outerUPCDesc"] = this.outerUPCDesc !== undefined ? this.outerUPCDesc : <any>null;
        data["productRemarks"] = this.productRemarks !== undefined ? this.productRemarks : <any>null;
        data["salseUpc"] = this.salseUpc !== undefined ? this.salseUpc : <any>null;
        data["priceLogicForm"] = this.priceLogicForm !== undefined ? this.priceLogicForm : <any>null;
        data["salseOuterUPCDesc"] = this.salseOuterUPCDesc !== undefined ? this.salseOuterUPCDesc : <any>null;
        data["salseInnerUPCDesc"] = this.salseInnerUPCDesc !== undefined ? this.salseInnerUPCDesc : <any>null;
        data["listPriceType"] = this.listPriceType !== undefined ? this.listPriceType : <any>null;
        return data; 
    }
}

export class PagedResultDtoOfvw_QuotationDetails {
    totalCount!: number;
    items!: Vw_QuotationDetails[] | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"] !== undefined ? _data["totalCount"] : <any>null;
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(Vw_QuotationDetails.fromJS(item, _mappings));
            }
        }
    }

    static fromJS(data: any, _mappings?: any): PagedResultDtoOfvw_QuotationDetails {
        data = typeof data === 'object' ? data : {};
        return createInstance<PagedResultDtoOfvw_QuotationDetails>(data, _mappings, PagedResultDtoOfvw_QuotationDetails);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : <any>null;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export class CustomerDropDownDto {
    custNum!: string | null;
    custName!: string | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.custNum = _data["custNum"] !== undefined ? _data["custNum"] : <any>null;
            this.custName = _data["custName"] !== undefined ? _data["custName"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): CustomerDropDownDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<CustomerDropDownDto>(data, _mappings, CustomerDropDownDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["custNum"] = this.custNum !== undefined ? this.custNum : <any>null;
        data["custName"] = this.custName !== undefined ? this.custName : <any>null;
        return data; 
    }
}

export class CreateQuotationInput {
    quotationList!: Vw_QuotationDetails[] | null;
    mail!: string | null;
    custNum!: string | null;
    quotationOfPricesListId!: number | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            if (Array.isArray(_data["quotationList"])) {
                this.quotationList = [] as any;
                for (let item of _data["quotationList"])
                    this.quotationList!.push(Vw_QuotationDetails.fromJS(item, _mappings));
            }
            this.mail = _data["mail"] !== undefined ? _data["mail"] : <any>null;
            this.custNum = _data["custNum"] !== undefined ? _data["custNum"] : <any>null;
            this.quotationOfPricesListId = _data["quotationOfPricesListId"] !== undefined ? _data["quotationOfPricesListId"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): CreateQuotationInput {
        data = typeof data === 'object' ? data : {};
        return createInstance<CreateQuotationInput>(data, _mappings, CreateQuotationInput);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.quotationList)) {
            data["quotationList"] = [];
            for (let item of this.quotationList)
                data["quotationList"].push(item.toJSON());
        }
        data["mail"] = this.mail !== undefined ? this.mail : <any>null;
        data["custNum"] = this.custNum !== undefined ? this.custNum : <any>null;
        data["quotationOfPricesListId"] = this.quotationOfPricesListId !== undefined ? this.quotationOfPricesListId : <any>null;
        return data; 
    }
}

export enum QuotationAppStatus {
    Saved = 0,
    AssignedToPE = 15,
    WaitSalesConfirm = 20,
    ReturnToSales = 21,
    NeedFFC = 24,
    WaitingForApproval = 26,
    WaitingConfirmCreateUPC = 27,
    WaitingForCreateUPC = 28,
    ToCOPrice = 30,
    Completed = 40,
    Ordered = 50,
}

export class NewQuotationUPCApplication {
    custNum!: string | null;
    markFor!: string | null;
    upc!: string | null;
    salseUpc!: string | null;
    upcPrice!: number | null;
    totalCost!: number | null;
    fixedCost!: number | null;
    upcDesc!: string | null;
    outerUPCDesc!: string | null;
    salseOuterUPCDesc!: string | null;
    salseInnerUPCDesc!: string | null;
    applicationStatus!: QuotationAppStatus;
    specialRequirements!: string | null;
    detailDesc!: string | null;
    createBy!: string | null;
    margin!: number | null;
    contributionMargin!: number | null;
    facePrice!: number | null;
    quotationByUPC!: number | null;
    caculateError!: string | null;
    soa!: string | null;
    productCategory!: string | null;
    productApply!: string | null;
    inquiryData!: string | null;
    customerGroupName!: string | null;
    customerGroup!: string | null;
    priceListType!: string | null;
    formData!: string | null;
    salseFormData!: string | null;
    whetherImport!: string | null;
    priceCount!: number | null;
    tvmk!: string | null;
    militaryCustomers!: string | null;
    specialPriceCaseID!: number | null;
    cnTy!: string | null;
    assignedTo!: string | null;
    foreignEmail!: string | null;
    priceFrom!: QuotationPriceFrom;
    isFinishHighPrice!: string | null;
    isNoParameter!: boolean | null;
    idFrom!: number | null;
    hopeDays!: number | null;
    submitDate!: Date | null;
    productRemarks!: string | null;
    priceLogicForm!: number | null;
    subPlanFormId!: number | null;
    subPlatFormCode!: string | null;
    referenceUPC!: string | null;
    size!: string | null;
    bond!: string | null;
    subPlatFormError!: string | null;
    subPlanFormSource!: number;
    subPlanFormType!: string | null;
    notifyCreationUPC!: boolean | null;
    baBackwardDeduction!: boolean | null;
    saleIsPrice!: boolean | null;
    externaldiameter!: string | null;
    thickness!: string | null;
    aperture!: string | null;
    abrasivMaterials!: string | null;
    binder!: string | null;
    granularity!: string | null;
    hardness!: string | null;
    organizationNumber!: string | null;
    shape!: string | null;
    finalUse!: string | null;
    externalStandard!: string | null;
    lineSpeed!: string | null;
    extensionData!: string | null;
    ffc!: number | null;
    expectedPrice!: number | null;
    pricingPE!: string | null;
    priceComments!: string | null;
    isDeleted!: boolean;
    deleterUserId!: number | null;
    deletionTime!: Date | null;
    lastModificationTime!: Date | null;
    lastModifierUserId!: number | null;
    creationTime!: Date;
    creatorUserId!: number | null;
    id!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.custNum = _data["custNum"] !== undefined ? _data["custNum"] : <any>null;
            this.markFor = _data["markFor"] !== undefined ? _data["markFor"] : <any>null;
            this.upc = _data["upc"] !== undefined ? _data["upc"] : <any>null;
            this.salseUpc = _data["salseUpc"] !== undefined ? _data["salseUpc"] : <any>null;
            this.upcPrice = _data["upcPrice"] !== undefined ? _data["upcPrice"] : <any>null;
            this.totalCost = _data["totalCost"] !== undefined ? _data["totalCost"] : <any>null;
            this.fixedCost = _data["fixedCost"] !== undefined ? _data["fixedCost"] : <any>null;
            this.upcDesc = _data["upcDesc"] !== undefined ? _data["upcDesc"] : <any>null;
            this.outerUPCDesc = _data["outerUPCDesc"] !== undefined ? _data["outerUPCDesc"] : <any>null;
            this.salseOuterUPCDesc = _data["salseOuterUPCDesc"] !== undefined ? _data["salseOuterUPCDesc"] : <any>null;
            this.salseInnerUPCDesc = _data["salseInnerUPCDesc"] !== undefined ? _data["salseInnerUPCDesc"] : <any>null;
            this.applicationStatus = _data["applicationStatus"] !== undefined ? _data["applicationStatus"] : <any>null;
            this.specialRequirements = _data["specialRequirements"] !== undefined ? _data["specialRequirements"] : <any>null;
            this.detailDesc = _data["detailDesc"] !== undefined ? _data["detailDesc"] : <any>null;
            this.createBy = _data["createBy"] !== undefined ? _data["createBy"] : <any>null;
            this.margin = _data["margin"] !== undefined ? _data["margin"] : <any>null;
            this.contributionMargin = _data["contributionMargin"] !== undefined ? _data["contributionMargin"] : <any>null;
            this.facePrice = _data["facePrice"] !== undefined ? _data["facePrice"] : <any>null;
            this.quotationByUPC = _data["quotationByUPC"] !== undefined ? _data["quotationByUPC"] : <any>null;
            this.caculateError = _data["caculateError"] !== undefined ? _data["caculateError"] : <any>null;
            this.soa = _data["soa"] !== undefined ? _data["soa"] : <any>null;
            this.productCategory = _data["productCategory"] !== undefined ? _data["productCategory"] : <any>null;
            this.productApply = _data["productApply"] !== undefined ? _data["productApply"] : <any>null;
            this.inquiryData = _data["inquiryData"] !== undefined ? _data["inquiryData"] : <any>null;
            this.customerGroupName = _data["customerGroupName"] !== undefined ? _data["customerGroupName"] : <any>null;
            this.customerGroup = _data["customerGroup"] !== undefined ? _data["customerGroup"] : <any>null;
            this.priceListType = _data["priceListType"] !== undefined ? _data["priceListType"] : <any>null;
            this.formData = _data["formData"] !== undefined ? _data["formData"] : <any>null;
            this.salseFormData = _data["salseFormData"] !== undefined ? _data["salseFormData"] : <any>null;
            this.whetherImport = _data["whetherImport"] !== undefined ? _data["whetherImport"] : <any>null;
            this.priceCount = _data["priceCount"] !== undefined ? _data["priceCount"] : <any>null;
            this.tvmk = _data["tvmk"] !== undefined ? _data["tvmk"] : <any>null;
            this.militaryCustomers = _data["militaryCustomers"] !== undefined ? _data["militaryCustomers"] : <any>null;
            this.specialPriceCaseID = _data["specialPriceCaseID"] !== undefined ? _data["specialPriceCaseID"] : <any>null;
            this.cnTy = _data["cnTy"] !== undefined ? _data["cnTy"] : <any>null;
            this.assignedTo = _data["assignedTo"] !== undefined ? _data["assignedTo"] : <any>null;
            this.foreignEmail = _data["foreignEmail"] !== undefined ? _data["foreignEmail"] : <any>null;
            this.priceFrom = _data["priceFrom"] !== undefined ? _data["priceFrom"] : <any>null;
            this.isFinishHighPrice = _data["isFinishHighPrice"] !== undefined ? _data["isFinishHighPrice"] : <any>null;
            this.isNoParameter = _data["isNoParameter"] !== undefined ? _data["isNoParameter"] : <any>null;
            this.idFrom = _data["idFrom"] !== undefined ? _data["idFrom"] : <any>null;
            this.hopeDays = _data["hopeDays"] !== undefined ? _data["hopeDays"] : <any>null;
            this.submitDate = _data["submitDate"] ? new Date(_data["submitDate"].toString()) : <any>null;
            this.productRemarks = _data["productRemarks"] !== undefined ? _data["productRemarks"] : <any>null;
            this.priceLogicForm = _data["priceLogicForm"] !== undefined ? _data["priceLogicForm"] : <any>null;
            this.subPlanFormId = _data["subPlanFormId"] !== undefined ? _data["subPlanFormId"] : <any>null;
            this.subPlatFormCode = _data["subPlatFormCode"] !== undefined ? _data["subPlatFormCode"] : <any>null;
            this.referenceUPC = _data["referenceUPC"] !== undefined ? _data["referenceUPC"] : <any>null;
            this.size = _data["size"] !== undefined ? _data["size"] : <any>null;
            this.bond = _data["bond"] !== undefined ? _data["bond"] : <any>null;
            this.subPlatFormError = _data["subPlatFormError"] !== undefined ? _data["subPlatFormError"] : <any>null;
            this.subPlanFormSource = _data["subPlanFormSource"] !== undefined ? _data["subPlanFormSource"] : <any>null;
            this.subPlanFormType = _data["subPlanFormType"] !== undefined ? _data["subPlanFormType"] : <any>null;
            this.notifyCreationUPC = _data["notifyCreationUPC"] !== undefined ? _data["notifyCreationUPC"] : <any>null;
            this.baBackwardDeduction = _data["baBackwardDeduction"] !== undefined ? _data["baBackwardDeduction"] : <any>null;
            this.saleIsPrice = _data["saleIsPrice"] !== undefined ? _data["saleIsPrice"] : <any>null;
            this.externaldiameter = _data["externaldiameter"] !== undefined ? _data["externaldiameter"] : <any>null;
            this.thickness = _data["thickness"] !== undefined ? _data["thickness"] : <any>null;
            this.aperture = _data["aperture"] !== undefined ? _data["aperture"] : <any>null;
            this.abrasivMaterials = _data["abrasivMaterials"] !== undefined ? _data["abrasivMaterials"] : <any>null;
            this.binder = _data["binder"] !== undefined ? _data["binder"] : <any>null;
            this.granularity = _data["granularity"] !== undefined ? _data["granularity"] : <any>null;
            this.hardness = _data["hardness"] !== undefined ? _data["hardness"] : <any>null;
            this.organizationNumber = _data["organizationNumber"] !== undefined ? _data["organizationNumber"] : <any>null;
            this.shape = _data["shape"] !== undefined ? _data["shape"] : <any>null;
            this.finalUse = _data["finalUse"] !== undefined ? _data["finalUse"] : <any>null;
            this.externalStandard = _data["externalStandard"] !== undefined ? _data["externalStandard"] : <any>null;
            this.lineSpeed = _data["lineSpeed"] !== undefined ? _data["lineSpeed"] : <any>null;
            this.extensionData = _data["extensionData"] !== undefined ? _data["extensionData"] : <any>null;
            this.ffc = _data["ffc"] !== undefined ? _data["ffc"] : <any>null;
            this.expectedPrice = _data["expectedPrice"] !== undefined ? _data["expectedPrice"] : <any>null;
            this.pricingPE = _data["pricingPE"] !== undefined ? _data["pricingPE"] : <any>null;
            this.priceComments = _data["priceComments"] !== undefined ? _data["priceComments"] : <any>null;
            this.isDeleted = _data["isDeleted"] !== undefined ? _data["isDeleted"] : <any>null;
            this.deleterUserId = _data["deleterUserId"] !== undefined ? _data["deleterUserId"] : <any>null;
            this.deletionTime = _data["deletionTime"] ? new Date(_data["deletionTime"].toString()) : <any>null;
            this.lastModificationTime = _data["lastModificationTime"] ? new Date(_data["lastModificationTime"].toString()) : <any>null;
            this.lastModifierUserId = _data["lastModifierUserId"] !== undefined ? _data["lastModifierUserId"] : <any>null;
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>null;
            this.creatorUserId = _data["creatorUserId"] !== undefined ? _data["creatorUserId"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): NewQuotationUPCApplication {
        data = typeof data === 'object' ? data : {};
        return createInstance<NewQuotationUPCApplication>(data, _mappings, NewQuotationUPCApplication);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["custNum"] = this.custNum !== undefined ? this.custNum : <any>null;
        data["markFor"] = this.markFor !== undefined ? this.markFor : <any>null;
        data["upc"] = this.upc !== undefined ? this.upc : <any>null;
        data["salseUpc"] = this.salseUpc !== undefined ? this.salseUpc : <any>null;
        data["upcPrice"] = this.upcPrice !== undefined ? this.upcPrice : <any>null;
        data["totalCost"] = this.totalCost !== undefined ? this.totalCost : <any>null;
        data["fixedCost"] = this.fixedCost !== undefined ? this.fixedCost : <any>null;
        data["upcDesc"] = this.upcDesc !== undefined ? this.upcDesc : <any>null;
        data["outerUPCDesc"] = this.outerUPCDesc !== undefined ? this.outerUPCDesc : <any>null;
        data["salseOuterUPCDesc"] = this.salseOuterUPCDesc !== undefined ? this.salseOuterUPCDesc : <any>null;
        data["salseInnerUPCDesc"] = this.salseInnerUPCDesc !== undefined ? this.salseInnerUPCDesc : <any>null;
        data["applicationStatus"] = this.applicationStatus !== undefined ? this.applicationStatus : <any>null;
        data["specialRequirements"] = this.specialRequirements !== undefined ? this.specialRequirements : <any>null;
        data["detailDesc"] = this.detailDesc !== undefined ? this.detailDesc : <any>null;
        data["createBy"] = this.createBy !== undefined ? this.createBy : <any>null;
        data["margin"] = this.margin !== undefined ? this.margin : <any>null;
        data["contributionMargin"] = this.contributionMargin !== undefined ? this.contributionMargin : <any>null;
        data["facePrice"] = this.facePrice !== undefined ? this.facePrice : <any>null;
        data["quotationByUPC"] = this.quotationByUPC !== undefined ? this.quotationByUPC : <any>null;
        data["caculateError"] = this.caculateError !== undefined ? this.caculateError : <any>null;
        data["soa"] = this.soa !== undefined ? this.soa : <any>null;
        data["productCategory"] = this.productCategory !== undefined ? this.productCategory : <any>null;
        data["productApply"] = this.productApply !== undefined ? this.productApply : <any>null;
        data["inquiryData"] = this.inquiryData !== undefined ? this.inquiryData : <any>null;
        data["customerGroupName"] = this.customerGroupName !== undefined ? this.customerGroupName : <any>null;
        data["customerGroup"] = this.customerGroup !== undefined ? this.customerGroup : <any>null;
        data["priceListType"] = this.priceListType !== undefined ? this.priceListType : <any>null;
        data["formData"] = this.formData !== undefined ? this.formData : <any>null;
        data["salseFormData"] = this.salseFormData !== undefined ? this.salseFormData : <any>null;
        data["whetherImport"] = this.whetherImport !== undefined ? this.whetherImport : <any>null;
        data["priceCount"] = this.priceCount !== undefined ? this.priceCount : <any>null;
        data["tvmk"] = this.tvmk !== undefined ? this.tvmk : <any>null;
        data["militaryCustomers"] = this.militaryCustomers !== undefined ? this.militaryCustomers : <any>null;
        data["specialPriceCaseID"] = this.specialPriceCaseID !== undefined ? this.specialPriceCaseID : <any>null;
        data["cnTy"] = this.cnTy !== undefined ? this.cnTy : <any>null;
        data["assignedTo"] = this.assignedTo !== undefined ? this.assignedTo : <any>null;
        data["foreignEmail"] = this.foreignEmail !== undefined ? this.foreignEmail : <any>null;
        data["priceFrom"] = this.priceFrom !== undefined ? this.priceFrom : <any>null;
        data["isFinishHighPrice"] = this.isFinishHighPrice !== undefined ? this.isFinishHighPrice : <any>null;
        data["isNoParameter"] = this.isNoParameter !== undefined ? this.isNoParameter : <any>null;
        data["idFrom"] = this.idFrom !== undefined ? this.idFrom : <any>null;
        data["hopeDays"] = this.hopeDays !== undefined ? this.hopeDays : <any>null;
        data["submitDate"] = this.submitDate ? this.submitDate.toISOString() : <any>null;
        data["productRemarks"] = this.productRemarks !== undefined ? this.productRemarks : <any>null;
        data["priceLogicForm"] = this.priceLogicForm !== undefined ? this.priceLogicForm : <any>null;
        data["subPlanFormId"] = this.subPlanFormId !== undefined ? this.subPlanFormId : <any>null;
        data["subPlatFormCode"] = this.subPlatFormCode !== undefined ? this.subPlatFormCode : <any>null;
        data["referenceUPC"] = this.referenceUPC !== undefined ? this.referenceUPC : <any>null;
        data["size"] = this.size !== undefined ? this.size : <any>null;
        data["bond"] = this.bond !== undefined ? this.bond : <any>null;
        data["subPlatFormError"] = this.subPlatFormError !== undefined ? this.subPlatFormError : <any>null;
        data["subPlanFormSource"] = this.subPlanFormSource !== undefined ? this.subPlanFormSource : <any>null;
        data["subPlanFormType"] = this.subPlanFormType !== undefined ? this.subPlanFormType : <any>null;
        data["notifyCreationUPC"] = this.notifyCreationUPC !== undefined ? this.notifyCreationUPC : <any>null;
        data["baBackwardDeduction"] = this.baBackwardDeduction !== undefined ? this.baBackwardDeduction : <any>null;
        data["saleIsPrice"] = this.saleIsPrice !== undefined ? this.saleIsPrice : <any>null;
        data["externaldiameter"] = this.externaldiameter !== undefined ? this.externaldiameter : <any>null;
        data["thickness"] = this.thickness !== undefined ? this.thickness : <any>null;
        data["aperture"] = this.aperture !== undefined ? this.aperture : <any>null;
        data["abrasivMaterials"] = this.abrasivMaterials !== undefined ? this.abrasivMaterials : <any>null;
        data["binder"] = this.binder !== undefined ? this.binder : <any>null;
        data["granularity"] = this.granularity !== undefined ? this.granularity : <any>null;
        data["hardness"] = this.hardness !== undefined ? this.hardness : <any>null;
        data["organizationNumber"] = this.organizationNumber !== undefined ? this.organizationNumber : <any>null;
        data["shape"] = this.shape !== undefined ? this.shape : <any>null;
        data["finalUse"] = this.finalUse !== undefined ? this.finalUse : <any>null;
        data["externalStandard"] = this.externalStandard !== undefined ? this.externalStandard : <any>null;
        data["lineSpeed"] = this.lineSpeed !== undefined ? this.lineSpeed : <any>null;
        data["extensionData"] = this.extensionData !== undefined ? this.extensionData : <any>null;
        data["ffc"] = this.ffc !== undefined ? this.ffc : <any>null;
        data["expectedPrice"] = this.expectedPrice !== undefined ? this.expectedPrice : <any>null;
        data["pricingPE"] = this.pricingPE !== undefined ? this.pricingPE : <any>null;
        data["priceComments"] = this.priceComments !== undefined ? this.priceComments : <any>null;
        data["isDeleted"] = this.isDeleted !== undefined ? this.isDeleted : <any>null;
        data["deleterUserId"] = this.deleterUserId !== undefined ? this.deleterUserId : <any>null;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>null;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>null;
        data["lastModifierUserId"] = this.lastModifierUserId !== undefined ? this.lastModifierUserId : <any>null;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>null;
        data["creatorUserId"] = this.creatorUserId !== undefined ? this.creatorUserId : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class QuotationApprovalMatrixDto {
    subPlatformCode!: string | null;
    subPlatformDescription!: string | null;
    priceType!: string | null;
    minPriceMarginRate!: number | null;
    fiftythMarginRate!: number | null;
    nineFiveMarginRate!: number | null;
    gmMarginRate!: number | null;
    sdMarginRate!: number | null;
    smMarginRate!: number | null;
    salesMarginRate!: string | null;
    cm!: boolean | null;
    margin!: boolean | null;
    validFrom!: Date | null;
    validTo!: Date | null;
    tenantId!: number | null;
    id!: number | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.subPlatformCode = _data["subPlatformCode"] !== undefined ? _data["subPlatformCode"] : <any>null;
            this.subPlatformDescription = _data["subPlatformDescription"] !== undefined ? _data["subPlatformDescription"] : <any>null;
            this.priceType = _data["priceType"] !== undefined ? _data["priceType"] : <any>null;
            this.minPriceMarginRate = _data["minPriceMarginRate"] !== undefined ? _data["minPriceMarginRate"] : <any>null;
            this.fiftythMarginRate = _data["fiftythMarginRate"] !== undefined ? _data["fiftythMarginRate"] : <any>null;
            this.nineFiveMarginRate = _data["nineFiveMarginRate"] !== undefined ? _data["nineFiveMarginRate"] : <any>null;
            this.gmMarginRate = _data["gmMarginRate"] !== undefined ? _data["gmMarginRate"] : <any>null;
            this.sdMarginRate = _data["sdMarginRate"] !== undefined ? _data["sdMarginRate"] : <any>null;
            this.smMarginRate = _data["smMarginRate"] !== undefined ? _data["smMarginRate"] : <any>null;
            this.salesMarginRate = _data["salesMarginRate"] !== undefined ? _data["salesMarginRate"] : <any>null;
            this.cm = _data["cm"] !== undefined ? _data["cm"] : <any>null;
            this.margin = _data["margin"] !== undefined ? _data["margin"] : <any>null;
            this.validFrom = _data["validFrom"] ? new Date(_data["validFrom"].toString()) : <any>null;
            this.validTo = _data["validTo"] ? new Date(_data["validTo"].toString()) : <any>null;
            this.tenantId = _data["tenantId"] !== undefined ? _data["tenantId"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): QuotationApprovalMatrixDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<QuotationApprovalMatrixDto>(data, _mappings, QuotationApprovalMatrixDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["subPlatformCode"] = this.subPlatformCode !== undefined ? this.subPlatformCode : <any>null;
        data["subPlatformDescription"] = this.subPlatformDescription !== undefined ? this.subPlatformDescription : <any>null;
        data["priceType"] = this.priceType !== undefined ? this.priceType : <any>null;
        data["minPriceMarginRate"] = this.minPriceMarginRate !== undefined ? this.minPriceMarginRate : <any>null;
        data["fiftythMarginRate"] = this.fiftythMarginRate !== undefined ? this.fiftythMarginRate : <any>null;
        data["nineFiveMarginRate"] = this.nineFiveMarginRate !== undefined ? this.nineFiveMarginRate : <any>null;
        data["gmMarginRate"] = this.gmMarginRate !== undefined ? this.gmMarginRate : <any>null;
        data["sdMarginRate"] = this.sdMarginRate !== undefined ? this.sdMarginRate : <any>null;
        data["smMarginRate"] = this.smMarginRate !== undefined ? this.smMarginRate : <any>null;
        data["salesMarginRate"] = this.salesMarginRate !== undefined ? this.salesMarginRate : <any>null;
        data["cm"] = this.cm !== undefined ? this.cm : <any>null;
        data["margin"] = this.margin !== undefined ? this.margin : <any>null;
        data["validFrom"] = this.validFrom ? this.validFrom.toISOString() : <any>null;
        data["validTo"] = this.validTo ? this.validTo.toISOString() : <any>null;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class PagedResultDtoOfQuotationApprovalMatrixDto {
    totalCount!: number;
    items!: QuotationApprovalMatrixDto[] | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"] !== undefined ? _data["totalCount"] : <any>null;
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(QuotationApprovalMatrixDto.fromJS(item, _mappings));
            }
        }
    }

    static fromJS(data: any, _mappings?: any): PagedResultDtoOfQuotationApprovalMatrixDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<PagedResultDtoOfQuotationApprovalMatrixDto>(data, _mappings, PagedResultDtoOfQuotationApprovalMatrixDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : <any>null;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export class CreateOrEditQuotationApprovalMatrixDto {
    subPlatformCode!: string | null;
    subPlatformDescription!: string | null;
    priceType!: string | null;
    minPriceMarginRate!: number | null;
    fiftythMarginRate!: number | null;
    nineFiveMarginRate!: number | null;
    gmMarginRate!: number | null;
    sdMarginRate!: number | null;
    smMarginRate!: number | null;
    salesMarginRate!: string | null;
    cm!: boolean | null;
    margin!: boolean | null;
    validFrom!: Date | null;
    validTo!: Date | null;
    id!: number | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.subPlatformCode = _data["subPlatformCode"] !== undefined ? _data["subPlatformCode"] : <any>null;
            this.subPlatformDescription = _data["subPlatformDescription"] !== undefined ? _data["subPlatformDescription"] : <any>null;
            this.priceType = _data["priceType"] !== undefined ? _data["priceType"] : <any>null;
            this.minPriceMarginRate = _data["minPriceMarginRate"] !== undefined ? _data["minPriceMarginRate"] : <any>null;
            this.fiftythMarginRate = _data["fiftythMarginRate"] !== undefined ? _data["fiftythMarginRate"] : <any>null;
            this.nineFiveMarginRate = _data["nineFiveMarginRate"] !== undefined ? _data["nineFiveMarginRate"] : <any>null;
            this.gmMarginRate = _data["gmMarginRate"] !== undefined ? _data["gmMarginRate"] : <any>null;
            this.sdMarginRate = _data["sdMarginRate"] !== undefined ? _data["sdMarginRate"] : <any>null;
            this.smMarginRate = _data["smMarginRate"] !== undefined ? _data["smMarginRate"] : <any>null;
            this.salesMarginRate = _data["salesMarginRate"] !== undefined ? _data["salesMarginRate"] : <any>null;
            this.cm = _data["cm"] !== undefined ? _data["cm"] : <any>null;
            this.margin = _data["margin"] !== undefined ? _data["margin"] : <any>null;
            this.validFrom = _data["validFrom"] ? new Date(_data["validFrom"].toString()) : <any>null;
            this.validTo = _data["validTo"] ? new Date(_data["validTo"].toString()) : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): CreateOrEditQuotationApprovalMatrixDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<CreateOrEditQuotationApprovalMatrixDto>(data, _mappings, CreateOrEditQuotationApprovalMatrixDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["subPlatformCode"] = this.subPlatformCode !== undefined ? this.subPlatformCode : <any>null;
        data["subPlatformDescription"] = this.subPlatformDescription !== undefined ? this.subPlatformDescription : <any>null;
        data["priceType"] = this.priceType !== undefined ? this.priceType : <any>null;
        data["minPriceMarginRate"] = this.minPriceMarginRate !== undefined ? this.minPriceMarginRate : <any>null;
        data["fiftythMarginRate"] = this.fiftythMarginRate !== undefined ? this.fiftythMarginRate : <any>null;
        data["nineFiveMarginRate"] = this.nineFiveMarginRate !== undefined ? this.nineFiveMarginRate : <any>null;
        data["gmMarginRate"] = this.gmMarginRate !== undefined ? this.gmMarginRate : <any>null;
        data["sdMarginRate"] = this.sdMarginRate !== undefined ? this.sdMarginRate : <any>null;
        data["smMarginRate"] = this.smMarginRate !== undefined ? this.smMarginRate : <any>null;
        data["salesMarginRate"] = this.salesMarginRate !== undefined ? this.salesMarginRate : <any>null;
        data["cm"] = this.cm !== undefined ? this.cm : <any>null;
        data["margin"] = this.margin !== undefined ? this.margin : <any>null;
        data["validFrom"] = this.validFrom ? this.validFrom.toISOString() : <any>null;
        data["validTo"] = this.validTo ? this.validTo.toISOString() : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class CreateOrEditBAQuotation_ApplicationLog {
    applicationId!: number;
    operatorBy!: string | null;
    originalStatus!: QuotationAppStatus;
    newStatus!: QuotationAppStatus;
    comments!: string | null;
    assignedTo!: string | null;
    isLast!: boolean;
    id!: number | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.applicationId = _data["applicationId"] !== undefined ? _data["applicationId"] : <any>null;
            this.operatorBy = _data["operatorBy"] !== undefined ? _data["operatorBy"] : <any>null;
            this.originalStatus = _data["originalStatus"] !== undefined ? _data["originalStatus"] : <any>null;
            this.newStatus = _data["newStatus"] !== undefined ? _data["newStatus"] : <any>null;
            this.comments = _data["comments"] !== undefined ? _data["comments"] : <any>null;
            this.assignedTo = _data["assignedTo"] !== undefined ? _data["assignedTo"] : <any>null;
            this.isLast = _data["isLast"] !== undefined ? _data["isLast"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): CreateOrEditBAQuotation_ApplicationLog {
        data = typeof data === 'object' ? data : {};
        return createInstance<CreateOrEditBAQuotation_ApplicationLog>(data, _mappings, CreateOrEditBAQuotation_ApplicationLog);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["applicationId"] = this.applicationId !== undefined ? this.applicationId : <any>null;
        data["operatorBy"] = this.operatorBy !== undefined ? this.operatorBy : <any>null;
        data["originalStatus"] = this.originalStatus !== undefined ? this.originalStatus : <any>null;
        data["newStatus"] = this.newStatus !== undefined ? this.newStatus : <any>null;
        data["comments"] = this.comments !== undefined ? this.comments : <any>null;
        data["assignedTo"] = this.assignedTo !== undefined ? this.assignedTo : <any>null;
        data["isLast"] = this.isLast !== undefined ? this.isLast : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class PESubmitPriceInput {
    applicationId!: number;
    assignedTo!: string | null;
    remark!: string | null;
    newStatus!: QuotationAppStatus;
    operatorBy!: string | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.applicationId = _data["applicationId"] !== undefined ? _data["applicationId"] : <any>null;
            this.assignedTo = _data["assignedTo"] !== undefined ? _data["assignedTo"] : <any>null;
            this.remark = _data["remark"] !== undefined ? _data["remark"] : <any>null;
            this.newStatus = _data["newStatus"] !== undefined ? _data["newStatus"] : <any>null;
            this.operatorBy = _data["operatorBy"] !== undefined ? _data["operatorBy"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): PESubmitPriceInput {
        data = typeof data === 'object' ? data : {};
        return createInstance<PESubmitPriceInput>(data, _mappings, PESubmitPriceInput);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["applicationId"] = this.applicationId !== undefined ? this.applicationId : <any>null;
        data["assignedTo"] = this.assignedTo !== undefined ? this.assignedTo : <any>null;
        data["remark"] = this.remark !== undefined ? this.remark : <any>null;
        data["newStatus"] = this.newStatus !== undefined ? this.newStatus : <any>null;
        data["operatorBy"] = this.operatorBy !== undefined ? this.operatorBy : <any>null;
        return data; 
    }
}

export class QuotationOtherInfo {
    brand!: string | null;
    marketPrice!: string | null;
    hopeDays!: string | null;
    rrp!: string | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.brand = _data["brand"] !== undefined ? _data["brand"] : <any>null;
            this.marketPrice = _data["marketPrice"] !== undefined ? _data["marketPrice"] : <any>null;
            this.hopeDays = _data["hopeDays"] !== undefined ? _data["hopeDays"] : <any>null;
            this.rrp = _data["rrp"] !== undefined ? _data["rrp"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): QuotationOtherInfo {
        data = typeof data === 'object' ? data : {};
        return createInstance<QuotationOtherInfo>(data, _mappings, QuotationOtherInfo);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["brand"] = this.brand !== undefined ? this.brand : <any>null;
        data["marketPrice"] = this.marketPrice !== undefined ? this.marketPrice : <any>null;
        data["hopeDays"] = this.hopeDays !== undefined ? this.hopeDays : <any>null;
        data["rrp"] = this.rrp !== undefined ? this.rrp : <any>null;
        return data; 
    }
}

export class SubPlatformErrorInput {
    quotationId!: number | null;
    soldTo!: string | null;
    upc!: string | null;
    subPlatForm!: string | null;
    pricingType!: string | null;
    remark!: string | null;
    loginUserName!: string | null;
    loginUserEmail!: string | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.quotationId = _data["quotationId"] !== undefined ? _data["quotationId"] : <any>null;
            this.soldTo = _data["soldTo"] !== undefined ? _data["soldTo"] : <any>null;
            this.upc = _data["upc"] !== undefined ? _data["upc"] : <any>null;
            this.subPlatForm = _data["subPlatForm"] !== undefined ? _data["subPlatForm"] : <any>null;
            this.pricingType = _data["pricingType"] !== undefined ? _data["pricingType"] : <any>null;
            this.remark = _data["remark"] !== undefined ? _data["remark"] : <any>null;
            this.loginUserName = _data["loginUserName"] !== undefined ? _data["loginUserName"] : <any>null;
            this.loginUserEmail = _data["loginUserEmail"] !== undefined ? _data["loginUserEmail"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): SubPlatformErrorInput {
        data = typeof data === 'object' ? data : {};
        return createInstance<SubPlatformErrorInput>(data, _mappings, SubPlatformErrorInput);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["quotationId"] = this.quotationId !== undefined ? this.quotationId : <any>null;
        data["soldTo"] = this.soldTo !== undefined ? this.soldTo : <any>null;
        data["upc"] = this.upc !== undefined ? this.upc : <any>null;
        data["subPlatForm"] = this.subPlatForm !== undefined ? this.subPlatForm : <any>null;
        data["pricingType"] = this.pricingType !== undefined ? this.pricingType : <any>null;
        data["remark"] = this.remark !== undefined ? this.remark : <any>null;
        data["loginUserName"] = this.loginUserName !== undefined ? this.loginUserName : <any>null;
        data["loginUserEmail"] = this.loginUserEmail !== undefined ? this.loginUserEmail : <any>null;
        return data; 
    }
}

export class CreateOrEditNewQuotationParams {
    tempId!: string | null;
    quotationApplicationID!: number | null;
    salesInputPrice!: string | null;
    pEinputPrice!: string | null;
    priceBookAmount!: number | null;
    amount!: number | null;
    endAmount!: number | null;
    facePrice!: number | null;
    discont!: number | null;
    currency!: string | null;
    material!: string | null;
    upcDescription!: string | null;
    cnTy!: string | null;
    unit!: number | null;
    uoM!: string | null;
    scaleQty!: number | null;
    validFrom!: Date | null;
    validTo!: Date | null;
    minOrderQty!: number | null;
    packageQty!: number | null;
    priceListType!: string | null;
    maintainceSalesPrice!: boolean | null;
    maintaincePEPrice!: boolean | null;
    priceFrom!: QuotationPriceFrom;
    salesInputPriceDate!: Date | null;
    peInputPriceDate!: Date | null;
    margin!: number | null;
    contributionMargin!: number | null;
    salesUnit!: string | null;
    markfor!: string | null;
    soa!: string | null;
    customerGroup!: string | null;
    soldto!: string | null;
    fixedCost!: number | null;
    specialPriceCaseID!: number | null;
    notUsed!: boolean | null;
    priceDataFromId!: number | null;
    listPriceType!: string | null;
    smInputPrice!: number | null;
    sdInputPrice!: number | null;
    gmInputPrice!: number | null;
    channelGMInputPrice!: number | null;
    lastApprovePrice!: number | null;
    acceptManagerPrice!: boolean | null;
    id!: number | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.tempId = _data["tempId"] !== undefined ? _data["tempId"] : <any>null;
            this.quotationApplicationID = _data["quotationApplicationID"] !== undefined ? _data["quotationApplicationID"] : <any>null;
            this.salesInputPrice = _data["salesInputPrice"] !== undefined ? _data["salesInputPrice"] : <any>null;
            this.pEinputPrice = _data["pEinputPrice"] !== undefined ? _data["pEinputPrice"] : <any>null;
            this.priceBookAmount = _data["priceBookAmount"] !== undefined ? _data["priceBookAmount"] : <any>null;
            this.amount = _data["amount"] !== undefined ? _data["amount"] : <any>null;
            this.endAmount = _data["endAmount"] !== undefined ? _data["endAmount"] : <any>null;
            this.facePrice = _data["facePrice"] !== undefined ? _data["facePrice"] : <any>null;
            this.discont = _data["discont"] !== undefined ? _data["discont"] : <any>null;
            this.currency = _data["currency"] !== undefined ? _data["currency"] : <any>null;
            this.material = _data["material"] !== undefined ? _data["material"] : <any>null;
            this.upcDescription = _data["upcDescription"] !== undefined ? _data["upcDescription"] : <any>null;
            this.cnTy = _data["cnTy"] !== undefined ? _data["cnTy"] : <any>null;
            this.unit = _data["unit"] !== undefined ? _data["unit"] : <any>null;
            this.uoM = _data["uoM"] !== undefined ? _data["uoM"] : <any>null;
            this.scaleQty = _data["scaleQty"] !== undefined ? _data["scaleQty"] : <any>null;
            this.validFrom = _data["validFrom"] ? new Date(_data["validFrom"].toString()) : <any>null;
            this.validTo = _data["validTo"] ? new Date(_data["validTo"].toString()) : <any>null;
            this.minOrderQty = _data["minOrderQty"] !== undefined ? _data["minOrderQty"] : <any>null;
            this.packageQty = _data["packageQty"] !== undefined ? _data["packageQty"] : <any>null;
            this.priceListType = _data["priceListType"] !== undefined ? _data["priceListType"] : <any>null;
            this.maintainceSalesPrice = _data["maintainceSalesPrice"] !== undefined ? _data["maintainceSalesPrice"] : <any>null;
            this.maintaincePEPrice = _data["maintaincePEPrice"] !== undefined ? _data["maintaincePEPrice"] : <any>null;
            this.priceFrom = _data["priceFrom"] !== undefined ? _data["priceFrom"] : <any>null;
            this.salesInputPriceDate = _data["salesInputPriceDate"] ? new Date(_data["salesInputPriceDate"].toString()) : <any>null;
            this.peInputPriceDate = _data["peInputPriceDate"] ? new Date(_data["peInputPriceDate"].toString()) : <any>null;
            this.margin = _data["margin"] !== undefined ? _data["margin"] : <any>null;
            this.contributionMargin = _data["contributionMargin"] !== undefined ? _data["contributionMargin"] : <any>null;
            this.salesUnit = _data["salesUnit"] !== undefined ? _data["salesUnit"] : <any>null;
            this.markfor = _data["markfor"] !== undefined ? _data["markfor"] : <any>null;
            this.soa = _data["soa"] !== undefined ? _data["soa"] : <any>null;
            this.customerGroup = _data["customerGroup"] !== undefined ? _data["customerGroup"] : <any>null;
            this.soldto = _data["soldto"] !== undefined ? _data["soldto"] : <any>null;
            this.fixedCost = _data["fixedCost"] !== undefined ? _data["fixedCost"] : <any>null;
            this.specialPriceCaseID = _data["specialPriceCaseID"] !== undefined ? _data["specialPriceCaseID"] : <any>null;
            this.notUsed = _data["notUsed"] !== undefined ? _data["notUsed"] : <any>null;
            this.priceDataFromId = _data["priceDataFromId"] !== undefined ? _data["priceDataFromId"] : <any>null;
            this.listPriceType = _data["listPriceType"] !== undefined ? _data["listPriceType"] : <any>null;
            this.smInputPrice = _data["smInputPrice"] !== undefined ? _data["smInputPrice"] : <any>null;
            this.sdInputPrice = _data["sdInputPrice"] !== undefined ? _data["sdInputPrice"] : <any>null;
            this.gmInputPrice = _data["gmInputPrice"] !== undefined ? _data["gmInputPrice"] : <any>null;
            this.channelGMInputPrice = _data["channelGMInputPrice"] !== undefined ? _data["channelGMInputPrice"] : <any>null;
            this.lastApprovePrice = _data["lastApprovePrice"] !== undefined ? _data["lastApprovePrice"] : <any>null;
            this.acceptManagerPrice = _data["acceptManagerPrice"] !== undefined ? _data["acceptManagerPrice"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): CreateOrEditNewQuotationParams {
        data = typeof data === 'object' ? data : {};
        return createInstance<CreateOrEditNewQuotationParams>(data, _mappings, CreateOrEditNewQuotationParams);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tempId"] = this.tempId !== undefined ? this.tempId : <any>null;
        data["quotationApplicationID"] = this.quotationApplicationID !== undefined ? this.quotationApplicationID : <any>null;
        data["salesInputPrice"] = this.salesInputPrice !== undefined ? this.salesInputPrice : <any>null;
        data["pEinputPrice"] = this.pEinputPrice !== undefined ? this.pEinputPrice : <any>null;
        data["priceBookAmount"] = this.priceBookAmount !== undefined ? this.priceBookAmount : <any>null;
        data["amount"] = this.amount !== undefined ? this.amount : <any>null;
        data["endAmount"] = this.endAmount !== undefined ? this.endAmount : <any>null;
        data["facePrice"] = this.facePrice !== undefined ? this.facePrice : <any>null;
        data["discont"] = this.discont !== undefined ? this.discont : <any>null;
        data["currency"] = this.currency !== undefined ? this.currency : <any>null;
        data["material"] = this.material !== undefined ? this.material : <any>null;
        data["upcDescription"] = this.upcDescription !== undefined ? this.upcDescription : <any>null;
        data["cnTy"] = this.cnTy !== undefined ? this.cnTy : <any>null;
        data["unit"] = this.unit !== undefined ? this.unit : <any>null;
        data["uoM"] = this.uoM !== undefined ? this.uoM : <any>null;
        data["scaleQty"] = this.scaleQty !== undefined ? this.scaleQty : <any>null;
        data["validFrom"] = this.validFrom ? this.validFrom.toISOString() : <any>null;
        data["validTo"] = this.validTo ? this.validTo.toISOString() : <any>null;
        data["minOrderQty"] = this.minOrderQty !== undefined ? this.minOrderQty : <any>null;
        data["packageQty"] = this.packageQty !== undefined ? this.packageQty : <any>null;
        data["priceListType"] = this.priceListType !== undefined ? this.priceListType : <any>null;
        data["maintainceSalesPrice"] = this.maintainceSalesPrice !== undefined ? this.maintainceSalesPrice : <any>null;
        data["maintaincePEPrice"] = this.maintaincePEPrice !== undefined ? this.maintaincePEPrice : <any>null;
        data["priceFrom"] = this.priceFrom !== undefined ? this.priceFrom : <any>null;
        data["salesInputPriceDate"] = this.salesInputPriceDate ? this.salesInputPriceDate.toISOString() : <any>null;
        data["peInputPriceDate"] = this.peInputPriceDate ? this.peInputPriceDate.toISOString() : <any>null;
        data["margin"] = this.margin !== undefined ? this.margin : <any>null;
        data["contributionMargin"] = this.contributionMargin !== undefined ? this.contributionMargin : <any>null;
        data["salesUnit"] = this.salesUnit !== undefined ? this.salesUnit : <any>null;
        data["markfor"] = this.markfor !== undefined ? this.markfor : <any>null;
        data["soa"] = this.soa !== undefined ? this.soa : <any>null;
        data["customerGroup"] = this.customerGroup !== undefined ? this.customerGroup : <any>null;
        data["soldto"] = this.soldto !== undefined ? this.soldto : <any>null;
        data["fixedCost"] = this.fixedCost !== undefined ? this.fixedCost : <any>null;
        data["specialPriceCaseID"] = this.specialPriceCaseID !== undefined ? this.specialPriceCaseID : <any>null;
        data["notUsed"] = this.notUsed !== undefined ? this.notUsed : <any>null;
        data["priceDataFromId"] = this.priceDataFromId !== undefined ? this.priceDataFromId : <any>null;
        data["listPriceType"] = this.listPriceType !== undefined ? this.listPriceType : <any>null;
        data["smInputPrice"] = this.smInputPrice !== undefined ? this.smInputPrice : <any>null;
        data["sdInputPrice"] = this.sdInputPrice !== undefined ? this.sdInputPrice : <any>null;
        data["gmInputPrice"] = this.gmInputPrice !== undefined ? this.gmInputPrice : <any>null;
        data["channelGMInputPrice"] = this.channelGMInputPrice !== undefined ? this.channelGMInputPrice : <any>null;
        data["lastApprovePrice"] = this.lastApprovePrice !== undefined ? this.lastApprovePrice : <any>null;
        data["acceptManagerPrice"] = this.acceptManagerPrice !== undefined ? this.acceptManagerPrice : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class NewQuotationParams {
    tempId!: string | null;
    quotationApplicationID!: number | null;
    salesInputPrice!: string | null;
    pEinputPrice!: string | null;
    priceBookAmount!: number | null;
    amount!: number | null;
    endAmount!: number | null;
    facePrice!: number | null;
    discont!: number | null;
    currency!: string | null;
    material!: string | null;
    upcDescription!: string | null;
    cnTy!: string | null;
    unit!: number | null;
    uoM!: string | null;
    scaleQty!: number | null;
    validFrom!: Date | null;
    validTo!: Date | null;
    minOrderQty!: number | null;
    packageQty!: number | null;
    priceListType!: string | null;
    maintainceSalesPrice!: boolean | null;
    maintaincePEPrice!: boolean | null;
    priceFrom!: QuotationPriceFrom;
    salesInputPriceDate!: Date | null;
    peInputPriceDate!: Date | null;
    margin!: number | null;
    contributionMargin!: number | null;
    salesUnit!: string | null;
    markfor!: string | null;
    soa!: string | null;
    customerGroup!: string | null;
    soldto!: string | null;
    fixedCost!: number | null;
    specialPriceCaseID!: number | null;
    notUsed!: boolean | null;
    priceDataFromId!: number | null;
    listPriceType!: string | null;
    smInputPrice!: number | null;
    sdInputPrice!: number | null;
    gmInputPrice!: number | null;
    channelGMInputPrice!: number | null;
    lastApprovePrice!: number | null;
    acceptManagerPrice!: boolean | null;
    isDeleted!: boolean;
    deleterUserId!: number | null;
    deletionTime!: Date | null;
    lastModificationTime!: Date | null;
    lastModifierUserId!: number | null;
    creationTime!: Date;
    creatorUserId!: number | null;
    id!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.tempId = _data["tempId"] !== undefined ? _data["tempId"] : <any>null;
            this.quotationApplicationID = _data["quotationApplicationID"] !== undefined ? _data["quotationApplicationID"] : <any>null;
            this.salesInputPrice = _data["salesInputPrice"] !== undefined ? _data["salesInputPrice"] : <any>null;
            this.pEinputPrice = _data["pEinputPrice"] !== undefined ? _data["pEinputPrice"] : <any>null;
            this.priceBookAmount = _data["priceBookAmount"] !== undefined ? _data["priceBookAmount"] : <any>null;
            this.amount = _data["amount"] !== undefined ? _data["amount"] : <any>null;
            this.endAmount = _data["endAmount"] !== undefined ? _data["endAmount"] : <any>null;
            this.facePrice = _data["facePrice"] !== undefined ? _data["facePrice"] : <any>null;
            this.discont = _data["discont"] !== undefined ? _data["discont"] : <any>null;
            this.currency = _data["currency"] !== undefined ? _data["currency"] : <any>null;
            this.material = _data["material"] !== undefined ? _data["material"] : <any>null;
            this.upcDescription = _data["upcDescription"] !== undefined ? _data["upcDescription"] : <any>null;
            this.cnTy = _data["cnTy"] !== undefined ? _data["cnTy"] : <any>null;
            this.unit = _data["unit"] !== undefined ? _data["unit"] : <any>null;
            this.uoM = _data["uoM"] !== undefined ? _data["uoM"] : <any>null;
            this.scaleQty = _data["scaleQty"] !== undefined ? _data["scaleQty"] : <any>null;
            this.validFrom = _data["validFrom"] ? new Date(_data["validFrom"].toString()) : <any>null;
            this.validTo = _data["validTo"] ? new Date(_data["validTo"].toString()) : <any>null;
            this.minOrderQty = _data["minOrderQty"] !== undefined ? _data["minOrderQty"] : <any>null;
            this.packageQty = _data["packageQty"] !== undefined ? _data["packageQty"] : <any>null;
            this.priceListType = _data["priceListType"] !== undefined ? _data["priceListType"] : <any>null;
            this.maintainceSalesPrice = _data["maintainceSalesPrice"] !== undefined ? _data["maintainceSalesPrice"] : <any>null;
            this.maintaincePEPrice = _data["maintaincePEPrice"] !== undefined ? _data["maintaincePEPrice"] : <any>null;
            this.priceFrom = _data["priceFrom"] !== undefined ? _data["priceFrom"] : <any>null;
            this.salesInputPriceDate = _data["salesInputPriceDate"] ? new Date(_data["salesInputPriceDate"].toString()) : <any>null;
            this.peInputPriceDate = _data["peInputPriceDate"] ? new Date(_data["peInputPriceDate"].toString()) : <any>null;
            this.margin = _data["margin"] !== undefined ? _data["margin"] : <any>null;
            this.contributionMargin = _data["contributionMargin"] !== undefined ? _data["contributionMargin"] : <any>null;
            this.salesUnit = _data["salesUnit"] !== undefined ? _data["salesUnit"] : <any>null;
            this.markfor = _data["markfor"] !== undefined ? _data["markfor"] : <any>null;
            this.soa = _data["soa"] !== undefined ? _data["soa"] : <any>null;
            this.customerGroup = _data["customerGroup"] !== undefined ? _data["customerGroup"] : <any>null;
            this.soldto = _data["soldto"] !== undefined ? _data["soldto"] : <any>null;
            this.fixedCost = _data["fixedCost"] !== undefined ? _data["fixedCost"] : <any>null;
            this.specialPriceCaseID = _data["specialPriceCaseID"] !== undefined ? _data["specialPriceCaseID"] : <any>null;
            this.notUsed = _data["notUsed"] !== undefined ? _data["notUsed"] : <any>null;
            this.priceDataFromId = _data["priceDataFromId"] !== undefined ? _data["priceDataFromId"] : <any>null;
            this.listPriceType = _data["listPriceType"] !== undefined ? _data["listPriceType"] : <any>null;
            this.smInputPrice = _data["smInputPrice"] !== undefined ? _data["smInputPrice"] : <any>null;
            this.sdInputPrice = _data["sdInputPrice"] !== undefined ? _data["sdInputPrice"] : <any>null;
            this.gmInputPrice = _data["gmInputPrice"] !== undefined ? _data["gmInputPrice"] : <any>null;
            this.channelGMInputPrice = _data["channelGMInputPrice"] !== undefined ? _data["channelGMInputPrice"] : <any>null;
            this.lastApprovePrice = _data["lastApprovePrice"] !== undefined ? _data["lastApprovePrice"] : <any>null;
            this.acceptManagerPrice = _data["acceptManagerPrice"] !== undefined ? _data["acceptManagerPrice"] : <any>null;
            this.isDeleted = _data["isDeleted"] !== undefined ? _data["isDeleted"] : <any>null;
            this.deleterUserId = _data["deleterUserId"] !== undefined ? _data["deleterUserId"] : <any>null;
            this.deletionTime = _data["deletionTime"] ? new Date(_data["deletionTime"].toString()) : <any>null;
            this.lastModificationTime = _data["lastModificationTime"] ? new Date(_data["lastModificationTime"].toString()) : <any>null;
            this.lastModifierUserId = _data["lastModifierUserId"] !== undefined ? _data["lastModifierUserId"] : <any>null;
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>null;
            this.creatorUserId = _data["creatorUserId"] !== undefined ? _data["creatorUserId"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): NewQuotationParams {
        data = typeof data === 'object' ? data : {};
        return createInstance<NewQuotationParams>(data, _mappings, NewQuotationParams);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tempId"] = this.tempId !== undefined ? this.tempId : <any>null;
        data["quotationApplicationID"] = this.quotationApplicationID !== undefined ? this.quotationApplicationID : <any>null;
        data["salesInputPrice"] = this.salesInputPrice !== undefined ? this.salesInputPrice : <any>null;
        data["pEinputPrice"] = this.pEinputPrice !== undefined ? this.pEinputPrice : <any>null;
        data["priceBookAmount"] = this.priceBookAmount !== undefined ? this.priceBookAmount : <any>null;
        data["amount"] = this.amount !== undefined ? this.amount : <any>null;
        data["endAmount"] = this.endAmount !== undefined ? this.endAmount : <any>null;
        data["facePrice"] = this.facePrice !== undefined ? this.facePrice : <any>null;
        data["discont"] = this.discont !== undefined ? this.discont : <any>null;
        data["currency"] = this.currency !== undefined ? this.currency : <any>null;
        data["material"] = this.material !== undefined ? this.material : <any>null;
        data["upcDescription"] = this.upcDescription !== undefined ? this.upcDescription : <any>null;
        data["cnTy"] = this.cnTy !== undefined ? this.cnTy : <any>null;
        data["unit"] = this.unit !== undefined ? this.unit : <any>null;
        data["uoM"] = this.uoM !== undefined ? this.uoM : <any>null;
        data["scaleQty"] = this.scaleQty !== undefined ? this.scaleQty : <any>null;
        data["validFrom"] = this.validFrom ? this.validFrom.toISOString() : <any>null;
        data["validTo"] = this.validTo ? this.validTo.toISOString() : <any>null;
        data["minOrderQty"] = this.minOrderQty !== undefined ? this.minOrderQty : <any>null;
        data["packageQty"] = this.packageQty !== undefined ? this.packageQty : <any>null;
        data["priceListType"] = this.priceListType !== undefined ? this.priceListType : <any>null;
        data["maintainceSalesPrice"] = this.maintainceSalesPrice !== undefined ? this.maintainceSalesPrice : <any>null;
        data["maintaincePEPrice"] = this.maintaincePEPrice !== undefined ? this.maintaincePEPrice : <any>null;
        data["priceFrom"] = this.priceFrom !== undefined ? this.priceFrom : <any>null;
        data["salesInputPriceDate"] = this.salesInputPriceDate ? this.salesInputPriceDate.toISOString() : <any>null;
        data["peInputPriceDate"] = this.peInputPriceDate ? this.peInputPriceDate.toISOString() : <any>null;
        data["margin"] = this.margin !== undefined ? this.margin : <any>null;
        data["contributionMargin"] = this.contributionMargin !== undefined ? this.contributionMargin : <any>null;
        data["salesUnit"] = this.salesUnit !== undefined ? this.salesUnit : <any>null;
        data["markfor"] = this.markfor !== undefined ? this.markfor : <any>null;
        data["soa"] = this.soa !== undefined ? this.soa : <any>null;
        data["customerGroup"] = this.customerGroup !== undefined ? this.customerGroup : <any>null;
        data["soldto"] = this.soldto !== undefined ? this.soldto : <any>null;
        data["fixedCost"] = this.fixedCost !== undefined ? this.fixedCost : <any>null;
        data["specialPriceCaseID"] = this.specialPriceCaseID !== undefined ? this.specialPriceCaseID : <any>null;
        data["notUsed"] = this.notUsed !== undefined ? this.notUsed : <any>null;
        data["priceDataFromId"] = this.priceDataFromId !== undefined ? this.priceDataFromId : <any>null;
        data["listPriceType"] = this.listPriceType !== undefined ? this.listPriceType : <any>null;
        data["smInputPrice"] = this.smInputPrice !== undefined ? this.smInputPrice : <any>null;
        data["sdInputPrice"] = this.sdInputPrice !== undefined ? this.sdInputPrice : <any>null;
        data["gmInputPrice"] = this.gmInputPrice !== undefined ? this.gmInputPrice : <any>null;
        data["channelGMInputPrice"] = this.channelGMInputPrice !== undefined ? this.channelGMInputPrice : <any>null;
        data["lastApprovePrice"] = this.lastApprovePrice !== undefined ? this.lastApprovePrice : <any>null;
        data["acceptManagerPrice"] = this.acceptManagerPrice !== undefined ? this.acceptManagerPrice : <any>null;
        data["isDeleted"] = this.isDeleted !== undefined ? this.isDeleted : <any>null;
        data["deleterUserId"] = this.deleterUserId !== undefined ? this.deleterUserId : <any>null;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>null;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>null;
        data["lastModifierUserId"] = this.lastModifierUserId !== undefined ? this.lastModifierUserId : <any>null;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>null;
        data["creatorUserId"] = this.creatorUserId !== undefined ? this.creatorUserId : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class SelectDto {
    text!: string | null;
    value!: string | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.text = _data["text"] !== undefined ? _data["text"] : <any>null;
            this.value = _data["value"] !== undefined ? _data["value"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): SelectDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<SelectDto>(data, _mappings, SelectDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["text"] = this.text !== undefined ? this.text : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        return data; 
    }
}

export class SavePePriceInput {
    quotationParams!: CreateOrEditNewQuotationParams[] | null;
    upcDesc!: string | null;
    id!: number;
    cnty!: string | null;
    priceListType!: string | null;
    soaDiscont!: number | null;
    custDiscount!: number | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            if (Array.isArray(_data["quotationParams"])) {
                this.quotationParams = [] as any;
                for (let item of _data["quotationParams"])
                    this.quotationParams!.push(CreateOrEditNewQuotationParams.fromJS(item, _mappings));
            }
            this.upcDesc = _data["upcDesc"] !== undefined ? _data["upcDesc"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.cnty = _data["cnty"] !== undefined ? _data["cnty"] : <any>null;
            this.priceListType = _data["priceListType"] !== undefined ? _data["priceListType"] : <any>null;
            this.soaDiscont = _data["soaDiscont"] !== undefined ? _data["soaDiscont"] : <any>null;
            this.custDiscount = _data["custDiscount"] !== undefined ? _data["custDiscount"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): SavePePriceInput {
        data = typeof data === 'object' ? data : {};
        return createInstance<SavePePriceInput>(data, _mappings, SavePePriceInput);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.quotationParams)) {
            data["quotationParams"] = [];
            for (let item of this.quotationParams)
                data["quotationParams"].push(item.toJSON());
        }
        data["upcDesc"] = this.upcDesc !== undefined ? this.upcDesc : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["cnty"] = this.cnty !== undefined ? this.cnty : <any>null;
        data["priceListType"] = this.priceListType !== undefined ? this.priceListType : <any>null;
        data["soaDiscont"] = this.soaDiscont !== undefined ? this.soaDiscont : <any>null;
        data["custDiscount"] = this.custDiscount !== undefined ? this.custDiscount : <any>null;
        return data; 
    }
}

export class NewQuotationPriceDto {
    cnTy!: string | null;
    salesOrg!: string | null;
    listPriceType!: string | null;
    currency!: string | null;
    scaleQty!: number | null;
    specialPriceCaseID!: number | null;
    priceFrom!: QuotationPriceFrom;
    soldto!: string | null;
    markFor!: string | null;
    customerGroup!: string | null;
    material!: string | null;
    soa!: string | null;
    validFrom!: Date | null;
    validTo!: Date | null;
    uoM!: string | null;
    unit!: number | null;
    amount!: number | null;
    priceDataFromId!: number | null;
    oneTimeSP_MaxQuaty!: number | null;
    spqty!: number | null;
    materialPriceType!: string | null;
    remark!: string | null;
    tenantId!: number | null;
    isDelete!: boolean;
    minOrderQty!: number | null;
    packageQty!: number | null;
    id!: number | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.cnTy = _data["cnTy"] !== undefined ? _data["cnTy"] : <any>null;
            this.salesOrg = _data["salesOrg"] !== undefined ? _data["salesOrg"] : <any>null;
            this.listPriceType = _data["listPriceType"] !== undefined ? _data["listPriceType"] : <any>null;
            this.currency = _data["currency"] !== undefined ? _data["currency"] : <any>null;
            this.scaleQty = _data["scaleQty"] !== undefined ? _data["scaleQty"] : <any>null;
            this.specialPriceCaseID = _data["specialPriceCaseID"] !== undefined ? _data["specialPriceCaseID"] : <any>null;
            this.priceFrom = _data["priceFrom"] !== undefined ? _data["priceFrom"] : <any>null;
            this.soldto = _data["soldto"] !== undefined ? _data["soldto"] : <any>null;
            this.markFor = _data["markFor"] !== undefined ? _data["markFor"] : <any>null;
            this.customerGroup = _data["customerGroup"] !== undefined ? _data["customerGroup"] : <any>null;
            this.material = _data["material"] !== undefined ? _data["material"] : <any>null;
            this.soa = _data["soa"] !== undefined ? _data["soa"] : <any>null;
            this.validFrom = _data["validFrom"] ? new Date(_data["validFrom"].toString()) : <any>null;
            this.validTo = _data["validTo"] ? new Date(_data["validTo"].toString()) : <any>null;
            this.uoM = _data["uoM"] !== undefined ? _data["uoM"] : <any>null;
            this.unit = _data["unit"] !== undefined ? _data["unit"] : <any>null;
            this.amount = _data["amount"] !== undefined ? _data["amount"] : <any>null;
            this.priceDataFromId = _data["priceDataFromId"] !== undefined ? _data["priceDataFromId"] : <any>null;
            this.oneTimeSP_MaxQuaty = _data["oneTimeSP_MaxQuaty"] !== undefined ? _data["oneTimeSP_MaxQuaty"] : <any>null;
            this.spqty = _data["spqty"] !== undefined ? _data["spqty"] : <any>null;
            this.materialPriceType = _data["materialPriceType"] !== undefined ? _data["materialPriceType"] : <any>null;
            this.remark = _data["remark"] !== undefined ? _data["remark"] : <any>null;
            this.tenantId = _data["tenantId"] !== undefined ? _data["tenantId"] : <any>null;
            this.isDelete = _data["isDelete"] !== undefined ? _data["isDelete"] : <any>null;
            this.minOrderQty = _data["minOrderQty"] !== undefined ? _data["minOrderQty"] : <any>null;
            this.packageQty = _data["packageQty"] !== undefined ? _data["packageQty"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): NewQuotationPriceDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<NewQuotationPriceDto>(data, _mappings, NewQuotationPriceDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cnTy"] = this.cnTy !== undefined ? this.cnTy : <any>null;
        data["salesOrg"] = this.salesOrg !== undefined ? this.salesOrg : <any>null;
        data["listPriceType"] = this.listPriceType !== undefined ? this.listPriceType : <any>null;
        data["currency"] = this.currency !== undefined ? this.currency : <any>null;
        data["scaleQty"] = this.scaleQty !== undefined ? this.scaleQty : <any>null;
        data["specialPriceCaseID"] = this.specialPriceCaseID !== undefined ? this.specialPriceCaseID : <any>null;
        data["priceFrom"] = this.priceFrom !== undefined ? this.priceFrom : <any>null;
        data["soldto"] = this.soldto !== undefined ? this.soldto : <any>null;
        data["markFor"] = this.markFor !== undefined ? this.markFor : <any>null;
        data["customerGroup"] = this.customerGroup !== undefined ? this.customerGroup : <any>null;
        data["material"] = this.material !== undefined ? this.material : <any>null;
        data["soa"] = this.soa !== undefined ? this.soa : <any>null;
        data["validFrom"] = this.validFrom ? this.validFrom.toISOString() : <any>null;
        data["validTo"] = this.validTo ? this.validTo.toISOString() : <any>null;
        data["uoM"] = this.uoM !== undefined ? this.uoM : <any>null;
        data["unit"] = this.unit !== undefined ? this.unit : <any>null;
        data["amount"] = this.amount !== undefined ? this.amount : <any>null;
        data["priceDataFromId"] = this.priceDataFromId !== undefined ? this.priceDataFromId : <any>null;
        data["oneTimeSP_MaxQuaty"] = this.oneTimeSP_MaxQuaty !== undefined ? this.oneTimeSP_MaxQuaty : <any>null;
        data["spqty"] = this.spqty !== undefined ? this.spqty : <any>null;
        data["materialPriceType"] = this.materialPriceType !== undefined ? this.materialPriceType : <any>null;
        data["remark"] = this.remark !== undefined ? this.remark : <any>null;
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : <any>null;
        data["isDelete"] = this.isDelete !== undefined ? this.isDelete : <any>null;
        data["minOrderQty"] = this.minOrderQty !== undefined ? this.minOrderQty : <any>null;
        data["packageQty"] = this.packageQty !== undefined ? this.packageQty : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class PagedResultDtoOfNewQuotationPriceDto {
    totalCount!: number;
    items!: NewQuotationPriceDto[] | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"] !== undefined ? _data["totalCount"] : <any>null;
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(NewQuotationPriceDto.fromJS(item, _mappings));
            }
        }
    }

    static fromJS(data: any, _mappings?: any): PagedResultDtoOfNewQuotationPriceDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<PagedResultDtoOfNewQuotationPriceDto>(data, _mappings, PagedResultDtoOfNewQuotationPriceDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : <any>null;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export class CreateOrEditNewQuotationPrice {
    cnTy!: string | null;
    salesOrg!: string | null;
    listPriceType!: string | null;
    currency!: string | null;
    scaleQty!: number | null;
    specialPriceCaseID!: number | null;
    priceFrom!: QuotationPriceFrom;
    soldto!: string | null;
    markFor!: string | null;
    customerGroup!: string | null;
    material!: string | null;
    soa!: string | null;
    validFrom!: Date | null;
    validTo!: Date | null;
    creationTime!: Date | null;
    uoM!: string | null;
    unit!: number | null;
    amount!: number | null;
    priceDataFromId!: number | null;
    oneTimeSP_MaxQuaty!: number | null;
    spqty!: number | null;
    materialPriceType!: string | null;
    remark!: string | null;
    id!: number | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.cnTy = _data["cnTy"] !== undefined ? _data["cnTy"] : <any>null;
            this.salesOrg = _data["salesOrg"] !== undefined ? _data["salesOrg"] : <any>null;
            this.listPriceType = _data["listPriceType"] !== undefined ? _data["listPriceType"] : <any>null;
            this.currency = _data["currency"] !== undefined ? _data["currency"] : <any>null;
            this.scaleQty = _data["scaleQty"] !== undefined ? _data["scaleQty"] : <any>null;
            this.specialPriceCaseID = _data["specialPriceCaseID"] !== undefined ? _data["specialPriceCaseID"] : <any>null;
            this.priceFrom = _data["priceFrom"] !== undefined ? _data["priceFrom"] : <any>null;
            this.soldto = _data["soldto"] !== undefined ? _data["soldto"] : <any>null;
            this.markFor = _data["markFor"] !== undefined ? _data["markFor"] : <any>null;
            this.customerGroup = _data["customerGroup"] !== undefined ? _data["customerGroup"] : <any>null;
            this.material = _data["material"] !== undefined ? _data["material"] : <any>null;
            this.soa = _data["soa"] !== undefined ? _data["soa"] : <any>null;
            this.validFrom = _data["validFrom"] ? new Date(_data["validFrom"].toString()) : <any>null;
            this.validTo = _data["validTo"] ? new Date(_data["validTo"].toString()) : <any>null;
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>null;
            this.uoM = _data["uoM"] !== undefined ? _data["uoM"] : <any>null;
            this.unit = _data["unit"] !== undefined ? _data["unit"] : <any>null;
            this.amount = _data["amount"] !== undefined ? _data["amount"] : <any>null;
            this.priceDataFromId = _data["priceDataFromId"] !== undefined ? _data["priceDataFromId"] : <any>null;
            this.oneTimeSP_MaxQuaty = _data["oneTimeSP_MaxQuaty"] !== undefined ? _data["oneTimeSP_MaxQuaty"] : <any>null;
            this.spqty = _data["spqty"] !== undefined ? _data["spqty"] : <any>null;
            this.materialPriceType = _data["materialPriceType"] !== undefined ? _data["materialPriceType"] : <any>null;
            this.remark = _data["remark"] !== undefined ? _data["remark"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): CreateOrEditNewQuotationPrice {
        data = typeof data === 'object' ? data : {};
        return createInstance<CreateOrEditNewQuotationPrice>(data, _mappings, CreateOrEditNewQuotationPrice);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cnTy"] = this.cnTy !== undefined ? this.cnTy : <any>null;
        data["salesOrg"] = this.salesOrg !== undefined ? this.salesOrg : <any>null;
        data["listPriceType"] = this.listPriceType !== undefined ? this.listPriceType : <any>null;
        data["currency"] = this.currency !== undefined ? this.currency : <any>null;
        data["scaleQty"] = this.scaleQty !== undefined ? this.scaleQty : <any>null;
        data["specialPriceCaseID"] = this.specialPriceCaseID !== undefined ? this.specialPriceCaseID : <any>null;
        data["priceFrom"] = this.priceFrom !== undefined ? this.priceFrom : <any>null;
        data["soldto"] = this.soldto !== undefined ? this.soldto : <any>null;
        data["markFor"] = this.markFor !== undefined ? this.markFor : <any>null;
        data["customerGroup"] = this.customerGroup !== undefined ? this.customerGroup : <any>null;
        data["material"] = this.material !== undefined ? this.material : <any>null;
        data["soa"] = this.soa !== undefined ? this.soa : <any>null;
        data["validFrom"] = this.validFrom ? this.validFrom.toISOString() : <any>null;
        data["validTo"] = this.validTo ? this.validTo.toISOString() : <any>null;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>null;
        data["uoM"] = this.uoM !== undefined ? this.uoM : <any>null;
        data["unit"] = this.unit !== undefined ? this.unit : <any>null;
        data["amount"] = this.amount !== undefined ? this.amount : <any>null;
        data["priceDataFromId"] = this.priceDataFromId !== undefined ? this.priceDataFromId : <any>null;
        data["oneTimeSP_MaxQuaty"] = this.oneTimeSP_MaxQuaty !== undefined ? this.oneTimeSP_MaxQuaty : <any>null;
        data["spqty"] = this.spqty !== undefined ? this.spqty : <any>null;
        data["materialPriceType"] = this.materialPriceType !== undefined ? this.materialPriceType : <any>null;
        data["remark"] = this.remark !== undefined ? this.remark : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class MaterialOrderRecordDto {
    sdDocument!: string | null;
    item!: number;
    orderCreatedOnDate!: Date;
    markFor!: string | null;
    soldTo!: string | null;
    soldName!: string | null;
    upc!: string | null;
    orderQuantity!: number;
    orderUOM!: string | null;
    unitPrice!: number;
    soa!: string | null;
    custPO!: string | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.sdDocument = _data["sdDocument"] !== undefined ? _data["sdDocument"] : <any>null;
            this.item = _data["item"] !== undefined ? _data["item"] : <any>null;
            this.orderCreatedOnDate = _data["orderCreatedOnDate"] ? new Date(_data["orderCreatedOnDate"].toString()) : <any>null;
            this.markFor = _data["markFor"] !== undefined ? _data["markFor"] : <any>null;
            this.soldTo = _data["soldTo"] !== undefined ? _data["soldTo"] : <any>null;
            this.soldName = _data["soldName"] !== undefined ? _data["soldName"] : <any>null;
            this.upc = _data["upc"] !== undefined ? _data["upc"] : <any>null;
            this.orderQuantity = _data["orderQuantity"] !== undefined ? _data["orderQuantity"] : <any>null;
            this.orderUOM = _data["orderUOM"] !== undefined ? _data["orderUOM"] : <any>null;
            this.unitPrice = _data["unitPrice"] !== undefined ? _data["unitPrice"] : <any>null;
            this.soa = _data["soa"] !== undefined ? _data["soa"] : <any>null;
            this.custPO = _data["custPO"] !== undefined ? _data["custPO"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): MaterialOrderRecordDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<MaterialOrderRecordDto>(data, _mappings, MaterialOrderRecordDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sdDocument"] = this.sdDocument !== undefined ? this.sdDocument : <any>null;
        data["item"] = this.item !== undefined ? this.item : <any>null;
        data["orderCreatedOnDate"] = this.orderCreatedOnDate ? this.orderCreatedOnDate.toISOString() : <any>null;
        data["markFor"] = this.markFor !== undefined ? this.markFor : <any>null;
        data["soldTo"] = this.soldTo !== undefined ? this.soldTo : <any>null;
        data["soldName"] = this.soldName !== undefined ? this.soldName : <any>null;
        data["upc"] = this.upc !== undefined ? this.upc : <any>null;
        data["orderQuantity"] = this.orderQuantity !== undefined ? this.orderQuantity : <any>null;
        data["orderUOM"] = this.orderUOM !== undefined ? this.orderUOM : <any>null;
        data["unitPrice"] = this.unitPrice !== undefined ? this.unitPrice : <any>null;
        data["soa"] = this.soa !== undefined ? this.soa : <any>null;
        data["custPO"] = this.custPO !== undefined ? this.custPO : <any>null;
        return data; 
    }
}

export class MaterialFFC {
    materialNum!: string | null;
    ffc!: number;
    plantSpecificMatlStatus!: number;
    plant!: number;
    numerator!: number;
    baseUOM!: string | null;
    costingLotSize!: number;
    stdCostTotal!: number;
    fixedProdCost!: number;
    salesOrg!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.materialNum = _data["materialNum"] !== undefined ? _data["materialNum"] : <any>null;
            this.ffc = _data["ffc"] !== undefined ? _data["ffc"] : <any>null;
            this.plantSpecificMatlStatus = _data["plantSpecificMatlStatus"] !== undefined ? _data["plantSpecificMatlStatus"] : <any>null;
            this.plant = _data["plant"] !== undefined ? _data["plant"] : <any>null;
            this.numerator = _data["numerator"] !== undefined ? _data["numerator"] : <any>null;
            this.baseUOM = _data["baseUOM"] !== undefined ? _data["baseUOM"] : <any>null;
            this.costingLotSize = _data["costingLotSize"] !== undefined ? _data["costingLotSize"] : <any>null;
            this.stdCostTotal = _data["stdCostTotal"] !== undefined ? _data["stdCostTotal"] : <any>null;
            this.fixedProdCost = _data["fixedProdCost"] !== undefined ? _data["fixedProdCost"] : <any>null;
            this.salesOrg = _data["salesOrg"] !== undefined ? _data["salesOrg"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): MaterialFFC {
        data = typeof data === 'object' ? data : {};
        return createInstance<MaterialFFC>(data, _mappings, MaterialFFC);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["materialNum"] = this.materialNum !== undefined ? this.materialNum : <any>null;
        data["ffc"] = this.ffc !== undefined ? this.ffc : <any>null;
        data["plantSpecificMatlStatus"] = this.plantSpecificMatlStatus !== undefined ? this.plantSpecificMatlStatus : <any>null;
        data["plant"] = this.plant !== undefined ? this.plant : <any>null;
        data["numerator"] = this.numerator !== undefined ? this.numerator : <any>null;
        data["baseUOM"] = this.baseUOM !== undefined ? this.baseUOM : <any>null;
        data["costingLotSize"] = this.costingLotSize !== undefined ? this.costingLotSize : <any>null;
        data["stdCostTotal"] = this.stdCostTotal !== undefined ? this.stdCostTotal : <any>null;
        data["fixedProdCost"] = this.fixedProdCost !== undefined ? this.fixedProdCost : <any>null;
        data["salesOrg"] = this.salesOrg !== undefined ? this.salesOrg : <any>null;
        return data; 
    }
}

export class PricingLogisticsExcel {
    id!: number;
    the50thPrice!: string | null;
    the95thPrice!: string | null;
    channel!: string | null;
    channel2!: string | null;
    diameter!: string | null;
    division!: string | null;
    endUseCode!: string | null;
    endUseDesc!: string | null;
    externalMarkingSpec!: string | null;
    f1!: string | null;
    f2!: string | null;
    gmDiscountMinCMMargin!: string | null;
    inputManully!: string | null;
    kanonka!: string | null;
    l1Desc!: string | null;
    listPriceLP!: string | null;
    localSpec1!: string | null;
    marketingCapCode!: string | null;
    markfor!: string | null;
    materialDesc!: string | null;
    minPriceLogic!: string | null;
    owner!: string | null;
    pricingOwner!: string | null;
    pricingType!: string | null;
    productHierarchy!: string | null;
    remarksDiscountExcluded!: string | null;
    remarksDiscountIncluded!: string | null;
    saFamilyInADW!: string | null;
    salesOffice!: string | null;
    sdDiscountMinCMMargin!: string | null;
    sellingPlant!: string | null;
    smDiscountMinCMMargin!: string | null;
    soa!: string | null;
    soldToSeeDetailedList!: string | null;
    stepListPrice2LP!: string | null;
    subPlatFormCode!: string | null;
    subPlatformCode1!: string | null;
    subPlatformDescription!: string | null;
    tradingFlagInADWCategory!: string | null;
    upc!: string | null;
    wheelType!: string | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.the50thPrice = _data["the50thPrice"] !== undefined ? _data["the50thPrice"] : <any>null;
            this.the95thPrice = _data["the95thPrice"] !== undefined ? _data["the95thPrice"] : <any>null;
            this.channel = _data["channel"] !== undefined ? _data["channel"] : <any>null;
            this.channel2 = _data["channel2"] !== undefined ? _data["channel2"] : <any>null;
            this.diameter = _data["diameter"] !== undefined ? _data["diameter"] : <any>null;
            this.division = _data["division"] !== undefined ? _data["division"] : <any>null;
            this.endUseCode = _data["endUseCode"] !== undefined ? _data["endUseCode"] : <any>null;
            this.endUseDesc = _data["endUseDesc"] !== undefined ? _data["endUseDesc"] : <any>null;
            this.externalMarkingSpec = _data["externalMarkingSpec"] !== undefined ? _data["externalMarkingSpec"] : <any>null;
            this.f1 = _data["f1"] !== undefined ? _data["f1"] : <any>null;
            this.f2 = _data["f2"] !== undefined ? _data["f2"] : <any>null;
            this.gmDiscountMinCMMargin = _data["gmDiscountMinCMMargin"] !== undefined ? _data["gmDiscountMinCMMargin"] : <any>null;
            this.inputManully = _data["inputManully"] !== undefined ? _data["inputManully"] : <any>null;
            this.kanonka = _data["kanonka"] !== undefined ? _data["kanonka"] : <any>null;
            this.l1Desc = _data["l1Desc"] !== undefined ? _data["l1Desc"] : <any>null;
            this.listPriceLP = _data["listPriceLP"] !== undefined ? _data["listPriceLP"] : <any>null;
            this.localSpec1 = _data["localSpec1"] !== undefined ? _data["localSpec1"] : <any>null;
            this.marketingCapCode = _data["marketingCapCode"] !== undefined ? _data["marketingCapCode"] : <any>null;
            this.markfor = _data["markfor"] !== undefined ? _data["markfor"] : <any>null;
            this.materialDesc = _data["materialDesc"] !== undefined ? _data["materialDesc"] : <any>null;
            this.minPriceLogic = _data["minPriceLogic"] !== undefined ? _data["minPriceLogic"] : <any>null;
            this.owner = _data["owner"] !== undefined ? _data["owner"] : <any>null;
            this.pricingOwner = _data["pricingOwner"] !== undefined ? _data["pricingOwner"] : <any>null;
            this.pricingType = _data["pricingType"] !== undefined ? _data["pricingType"] : <any>null;
            this.productHierarchy = _data["productHierarchy"] !== undefined ? _data["productHierarchy"] : <any>null;
            this.remarksDiscountExcluded = _data["remarksDiscountExcluded"] !== undefined ? _data["remarksDiscountExcluded"] : <any>null;
            this.remarksDiscountIncluded = _data["remarksDiscountIncluded"] !== undefined ? _data["remarksDiscountIncluded"] : <any>null;
            this.saFamilyInADW = _data["saFamilyInADW"] !== undefined ? _data["saFamilyInADW"] : <any>null;
            this.salesOffice = _data["salesOffice"] !== undefined ? _data["salesOffice"] : <any>null;
            this.sdDiscountMinCMMargin = _data["sdDiscountMinCMMargin"] !== undefined ? _data["sdDiscountMinCMMargin"] : <any>null;
            this.sellingPlant = _data["sellingPlant"] !== undefined ? _data["sellingPlant"] : <any>null;
            this.smDiscountMinCMMargin = _data["smDiscountMinCMMargin"] !== undefined ? _data["smDiscountMinCMMargin"] : <any>null;
            this.soa = _data["soa"] !== undefined ? _data["soa"] : <any>null;
            this.soldToSeeDetailedList = _data["soldToSeeDetailedList"] !== undefined ? _data["soldToSeeDetailedList"] : <any>null;
            this.stepListPrice2LP = _data["stepListPrice2LP"] !== undefined ? _data["stepListPrice2LP"] : <any>null;
            this.subPlatFormCode = _data["subPlatFormCode"] !== undefined ? _data["subPlatFormCode"] : <any>null;
            this.subPlatformCode1 = _data["subPlatformCode1"] !== undefined ? _data["subPlatformCode1"] : <any>null;
            this.subPlatformDescription = _data["subPlatformDescription"] !== undefined ? _data["subPlatformDescription"] : <any>null;
            this.tradingFlagInADWCategory = _data["tradingFlagInADWCategory"] !== undefined ? _data["tradingFlagInADWCategory"] : <any>null;
            this.upc = _data["upc"] !== undefined ? _data["upc"] : <any>null;
            this.wheelType = _data["wheelType"] !== undefined ? _data["wheelType"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): PricingLogisticsExcel {
        data = typeof data === 'object' ? data : {};
        return createInstance<PricingLogisticsExcel>(data, _mappings, PricingLogisticsExcel);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["the50thPrice"] = this.the50thPrice !== undefined ? this.the50thPrice : <any>null;
        data["the95thPrice"] = this.the95thPrice !== undefined ? this.the95thPrice : <any>null;
        data["channel"] = this.channel !== undefined ? this.channel : <any>null;
        data["channel2"] = this.channel2 !== undefined ? this.channel2 : <any>null;
        data["diameter"] = this.diameter !== undefined ? this.diameter : <any>null;
        data["division"] = this.division !== undefined ? this.division : <any>null;
        data["endUseCode"] = this.endUseCode !== undefined ? this.endUseCode : <any>null;
        data["endUseDesc"] = this.endUseDesc !== undefined ? this.endUseDesc : <any>null;
        data["externalMarkingSpec"] = this.externalMarkingSpec !== undefined ? this.externalMarkingSpec : <any>null;
        data["f1"] = this.f1 !== undefined ? this.f1 : <any>null;
        data["f2"] = this.f2 !== undefined ? this.f2 : <any>null;
        data["gmDiscountMinCMMargin"] = this.gmDiscountMinCMMargin !== undefined ? this.gmDiscountMinCMMargin : <any>null;
        data["inputManully"] = this.inputManully !== undefined ? this.inputManully : <any>null;
        data["kanonka"] = this.kanonka !== undefined ? this.kanonka : <any>null;
        data["l1Desc"] = this.l1Desc !== undefined ? this.l1Desc : <any>null;
        data["listPriceLP"] = this.listPriceLP !== undefined ? this.listPriceLP : <any>null;
        data["localSpec1"] = this.localSpec1 !== undefined ? this.localSpec1 : <any>null;
        data["marketingCapCode"] = this.marketingCapCode !== undefined ? this.marketingCapCode : <any>null;
        data["markfor"] = this.markfor !== undefined ? this.markfor : <any>null;
        data["materialDesc"] = this.materialDesc !== undefined ? this.materialDesc : <any>null;
        data["minPriceLogic"] = this.minPriceLogic !== undefined ? this.minPriceLogic : <any>null;
        data["owner"] = this.owner !== undefined ? this.owner : <any>null;
        data["pricingOwner"] = this.pricingOwner !== undefined ? this.pricingOwner : <any>null;
        data["pricingType"] = this.pricingType !== undefined ? this.pricingType : <any>null;
        data["productHierarchy"] = this.productHierarchy !== undefined ? this.productHierarchy : <any>null;
        data["remarksDiscountExcluded"] = this.remarksDiscountExcluded !== undefined ? this.remarksDiscountExcluded : <any>null;
        data["remarksDiscountIncluded"] = this.remarksDiscountIncluded !== undefined ? this.remarksDiscountIncluded : <any>null;
        data["saFamilyInADW"] = this.saFamilyInADW !== undefined ? this.saFamilyInADW : <any>null;
        data["salesOffice"] = this.salesOffice !== undefined ? this.salesOffice : <any>null;
        data["sdDiscountMinCMMargin"] = this.sdDiscountMinCMMargin !== undefined ? this.sdDiscountMinCMMargin : <any>null;
        data["sellingPlant"] = this.sellingPlant !== undefined ? this.sellingPlant : <any>null;
        data["smDiscountMinCMMargin"] = this.smDiscountMinCMMargin !== undefined ? this.smDiscountMinCMMargin : <any>null;
        data["soa"] = this.soa !== undefined ? this.soa : <any>null;
        data["soldToSeeDetailedList"] = this.soldToSeeDetailedList !== undefined ? this.soldToSeeDetailedList : <any>null;
        data["stepListPrice2LP"] = this.stepListPrice2LP !== undefined ? this.stepListPrice2LP : <any>null;
        data["subPlatFormCode"] = this.subPlatFormCode !== undefined ? this.subPlatFormCode : <any>null;
        data["subPlatformCode1"] = this.subPlatformCode1 !== undefined ? this.subPlatformCode1 : <any>null;
        data["subPlatformDescription"] = this.subPlatformDescription !== undefined ? this.subPlatformDescription : <any>null;
        data["tradingFlagInADWCategory"] = this.tradingFlagInADWCategory !== undefined ? this.tradingFlagInADWCategory : <any>null;
        data["upc"] = this.upc !== undefined ? this.upc : <any>null;
        data["wheelType"] = this.wheelType !== undefined ? this.wheelType : <any>null;
        return data; 
    }
}

export class SoldToGroupPrice {
    selecT_Value!: string | null;
    selecT_Text!: string | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.selecT_Value = _data["selecT_Value"] !== undefined ? _data["selecT_Value"] : <any>null;
            this.selecT_Text = _data["selecT_Text"] !== undefined ? _data["selecT_Text"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): SoldToGroupPrice {
        data = typeof data === 'object' ? data : {};
        return createInstance<SoldToGroupPrice>(data, _mappings, SoldToGroupPrice);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["selecT_Value"] = this.selecT_Value !== undefined ? this.selecT_Value : <any>null;
        data["selecT_Text"] = this.selecT_Text !== undefined ? this.selecT_Text : <any>null;
        return data; 
    }
}

export class SAResinBondDto {
    bond!: string[] | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            if (Array.isArray(_data["bond"])) {
                this.bond = [] as any;
                for (let item of _data["bond"])
                    this.bond!.push(item);
            }
        }
    }

    static fromJS(data: any, _mappings?: any): SAResinBondDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<SAResinBondDto>(data, _mappings, SAResinBondDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.bond)) {
            data["bond"] = [];
            for (let item of this.bond)
                data["bond"].push(item);
        }
        return data; 
    }
}

export class SAResinSizeDto {
    size!: string[] | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            if (Array.isArray(_data["size"])) {
                this.size = [] as any;
                for (let item of _data["size"])
                    this.size!.push(item);
            }
        }
    }

    static fromJS(data: any, _mappings?: any): SAResinSizeDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<SAResinSizeDto>(data, _mappings, SAResinSizeDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.size)) {
            data["size"] = [];
            for (let item of this.size)
                data["size"].push(item);
        }
        return data; 
    }
}

export class SubPlatform_SAResinBond {
    size!: string | null;
    bond!: string | null;
    price!: number;
    discount!: number;
    validFrom!: Date;
    validTo!: Date;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.size = _data["size"] !== undefined ? _data["size"] : <any>null;
            this.bond = _data["bond"] !== undefined ? _data["bond"] : <any>null;
            this.price = _data["price"] !== undefined ? _data["price"] : <any>null;
            this.discount = _data["discount"] !== undefined ? _data["discount"] : <any>null;
            this.validFrom = _data["validFrom"] ? new Date(_data["validFrom"].toString()) : <any>null;
            this.validTo = _data["validTo"] ? new Date(_data["validTo"].toString()) : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): SubPlatform_SAResinBond {
        data = typeof data === 'object' ? data : {};
        return createInstance<SubPlatform_SAResinBond>(data, _mappings, SubPlatform_SAResinBond);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["size"] = this.size !== undefined ? this.size : <any>null;
        data["bond"] = this.bond !== undefined ? this.bond : <any>null;
        data["price"] = this.price !== undefined ? this.price : <any>null;
        data["discount"] = this.discount !== undefined ? this.discount : <any>null;
        data["validFrom"] = this.validFrom ? this.validFrom.toISOString() : <any>null;
        data["validTo"] = this.validTo ? this.validTo.toISOString() : <any>null;
        return data; 
    }
}

export enum PriceFrom {
    ZNP0_Group = 1,
    ZNP0_SoldTo = 2,
    ZPR0_SoldToAndC5 = 10,
    ZPR0_SoldTo = 11,
    ZPR0_C1 = 12,
    ZPR0_C5 = 13,
    ZPR0_SoldTo_PriceList = 14,
    ZNP0_FromPE = 15,
    ZPR0_FromPE = 16,
    PriceNotFound = 99,
}

export class PriceInfo {
    data!: NewQuotationPriceDto[] | null;
    from!: PriceFrom;
    discont!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(NewQuotationPriceDto.fromJS(item, _mappings));
            }
            this.from = _data["from"] !== undefined ? _data["from"] : <any>null;
            this.discont = _data["discont"] !== undefined ? _data["discont"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): PriceInfo {
        data = typeof data === 'object' ? data : {};
        return createInstance<PriceInfo>(data, _mappings, PriceInfo);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["from"] = this.from !== undefined ? this.from : <any>null;
        data["discont"] = this.discont !== undefined ? this.discont : <any>null;
        return data; 
    }
}

export class OperationLogDto {
    operatorName!: string | null;
    assinedToName!: string | null;
    applicationId!: number;
    operatorBy!: string | null;
    assignedTo!: string | null;
    originalStatus!: QuotationAppStatus;
    newStatus!: QuotationAppStatus;
    comments!: string | null;
    isLast!: boolean;
    isDeleted!: boolean;
    deleterUserId!: number | null;
    deletionTime!: Date | null;
    lastModificationTime!: Date | null;
    lastModifierUserId!: number | null;
    creationTime!: Date;
    creatorUserId!: number | null;
    id!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.operatorName = _data["operatorName"] !== undefined ? _data["operatorName"] : <any>null;
            this.assinedToName = _data["assinedToName"] !== undefined ? _data["assinedToName"] : <any>null;
            this.applicationId = _data["applicationId"] !== undefined ? _data["applicationId"] : <any>null;
            this.operatorBy = _data["operatorBy"] !== undefined ? _data["operatorBy"] : <any>null;
            this.assignedTo = _data["assignedTo"] !== undefined ? _data["assignedTo"] : <any>null;
            this.originalStatus = _data["originalStatus"] !== undefined ? _data["originalStatus"] : <any>null;
            this.newStatus = _data["newStatus"] !== undefined ? _data["newStatus"] : <any>null;
            this.comments = _data["comments"] !== undefined ? _data["comments"] : <any>null;
            this.isLast = _data["isLast"] !== undefined ? _data["isLast"] : <any>null;
            this.isDeleted = _data["isDeleted"] !== undefined ? _data["isDeleted"] : <any>null;
            this.deleterUserId = _data["deleterUserId"] !== undefined ? _data["deleterUserId"] : <any>null;
            this.deletionTime = _data["deletionTime"] ? new Date(_data["deletionTime"].toString()) : <any>null;
            this.lastModificationTime = _data["lastModificationTime"] ? new Date(_data["lastModificationTime"].toString()) : <any>null;
            this.lastModifierUserId = _data["lastModifierUserId"] !== undefined ? _data["lastModifierUserId"] : <any>null;
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>null;
            this.creatorUserId = _data["creatorUserId"] !== undefined ? _data["creatorUserId"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): OperationLogDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<OperationLogDto>(data, _mappings, OperationLogDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["operatorName"] = this.operatorName !== undefined ? this.operatorName : <any>null;
        data["assinedToName"] = this.assinedToName !== undefined ? this.assinedToName : <any>null;
        data["applicationId"] = this.applicationId !== undefined ? this.applicationId : <any>null;
        data["operatorBy"] = this.operatorBy !== undefined ? this.operatorBy : <any>null;
        data["assignedTo"] = this.assignedTo !== undefined ? this.assignedTo : <any>null;
        data["originalStatus"] = this.originalStatus !== undefined ? this.originalStatus : <any>null;
        data["newStatus"] = this.newStatus !== undefined ? this.newStatus : <any>null;
        data["comments"] = this.comments !== undefined ? this.comments : <any>null;
        data["isLast"] = this.isLast !== undefined ? this.isLast : <any>null;
        data["isDeleted"] = this.isDeleted !== undefined ? this.isDeleted : <any>null;
        data["deleterUserId"] = this.deleterUserId !== undefined ? this.deleterUserId : <any>null;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>null;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>null;
        data["lastModifierUserId"] = this.lastModifierUserId !== undefined ? this.lastModifierUserId : <any>null;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>null;
        data["creatorUserId"] = this.creatorUserId !== undefined ? this.creatorUserId : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class QuotationListInput {
    startDate!: string | null;
    endDate!: string | null;
    pendingForMe!: number;
    applicationStatus!: string | null;
    filter!: string | null;
    quotationIdList!: number[] | null;
    sorting!: string | null;
    skipCount!: number;
    maxResultCount!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.startDate = _data["startDate"] !== undefined ? _data["startDate"] : <any>null;
            this.endDate = _data["endDate"] !== undefined ? _data["endDate"] : <any>null;
            this.pendingForMe = _data["pendingForMe"] !== undefined ? _data["pendingForMe"] : <any>null;
            this.applicationStatus = _data["applicationStatus"] !== undefined ? _data["applicationStatus"] : <any>null;
            this.filter = _data["filter"] !== undefined ? _data["filter"] : <any>null;
            if (Array.isArray(_data["quotationIdList"])) {
                this.quotationIdList = [] as any;
                for (let item of _data["quotationIdList"])
                    this.quotationIdList!.push(item);
            }
            this.sorting = _data["sorting"] !== undefined ? _data["sorting"] : <any>null;
            this.skipCount = _data["skipCount"] !== undefined ? _data["skipCount"] : <any>null;
            this.maxResultCount = _data["maxResultCount"] !== undefined ? _data["maxResultCount"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): QuotationListInput {
        data = typeof data === 'object' ? data : {};
        return createInstance<QuotationListInput>(data, _mappings, QuotationListInput);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["startDate"] = this.startDate !== undefined ? this.startDate : <any>null;
        data["endDate"] = this.endDate !== undefined ? this.endDate : <any>null;
        data["pendingForMe"] = this.pendingForMe !== undefined ? this.pendingForMe : <any>null;
        data["applicationStatus"] = this.applicationStatus !== undefined ? this.applicationStatus : <any>null;
        data["filter"] = this.filter !== undefined ? this.filter : <any>null;
        if (Array.isArray(this.quotationIdList)) {
            data["quotationIdList"] = [];
            for (let item of this.quotationIdList)
                data["quotationIdList"].push(item);
        }
        data["sorting"] = this.sorting !== undefined ? this.sorting : <any>null;
        data["skipCount"] = this.skipCount !== undefined ? this.skipCount : <any>null;
        data["maxResultCount"] = this.maxResultCount !== undefined ? this.maxResultCount : <any>null;
        return data; 
    }
}

export class UpdateUPCInput {
    status!: string | null;
    type!: string | null;
    id!: string | null;
    facePrice!: number;
    totalCost!: number;
    fixedCost!: number;
    margin!: number;
    contributionMargin!: number;
    resaon!: string | null;
    upc!: string | null;
    upcPrice!: number;
    assignedTo!: string | null;
    onlyAddLog!: boolean;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.facePrice = _data["facePrice"] !== undefined ? _data["facePrice"] : <any>null;
            this.totalCost = _data["totalCost"] !== undefined ? _data["totalCost"] : <any>null;
            this.fixedCost = _data["fixedCost"] !== undefined ? _data["fixedCost"] : <any>null;
            this.margin = _data["margin"] !== undefined ? _data["margin"] : <any>null;
            this.contributionMargin = _data["contributionMargin"] !== undefined ? _data["contributionMargin"] : <any>null;
            this.resaon = _data["resaon"] !== undefined ? _data["resaon"] : <any>null;
            this.upc = _data["upc"] !== undefined ? _data["upc"] : <any>null;
            this.upcPrice = _data["upcPrice"] !== undefined ? _data["upcPrice"] : <any>null;
            this.assignedTo = _data["assignedTo"] !== undefined ? _data["assignedTo"] : <any>null;
            this.onlyAddLog = _data["onlyAddLog"] !== undefined ? _data["onlyAddLog"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): UpdateUPCInput {
        data = typeof data === 'object' ? data : {};
        return createInstance<UpdateUPCInput>(data, _mappings, UpdateUPCInput);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["facePrice"] = this.facePrice !== undefined ? this.facePrice : <any>null;
        data["totalCost"] = this.totalCost !== undefined ? this.totalCost : <any>null;
        data["fixedCost"] = this.fixedCost !== undefined ? this.fixedCost : <any>null;
        data["margin"] = this.margin !== undefined ? this.margin : <any>null;
        data["contributionMargin"] = this.contributionMargin !== undefined ? this.contributionMargin : <any>null;
        data["resaon"] = this.resaon !== undefined ? this.resaon : <any>null;
        data["upc"] = this.upc !== undefined ? this.upc : <any>null;
        data["upcPrice"] = this.upcPrice !== undefined ? this.upcPrice : <any>null;
        data["assignedTo"] = this.assignedTo !== undefined ? this.assignedTo : <any>null;
        data["onlyAddLog"] = this.onlyAddLog !== undefined ? this.onlyAddLog : <any>null;
        return data; 
    }
}

export class QuotationPeDto {
    sgid!: string | null;
    displayName!: string | null;
    soa!: string | null;
    type!: string | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.sgid = _data["sgid"] !== undefined ? _data["sgid"] : <any>null;
            this.displayName = _data["displayName"] !== undefined ? _data["displayName"] : <any>null;
            this.soa = _data["soa"] !== undefined ? _data["soa"] : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): QuotationPeDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<QuotationPeDto>(data, _mappings, QuotationPeDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sgid"] = this.sgid !== undefined ? this.sgid : <any>null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : <any>null;
        data["soa"] = this.soa !== undefined ? this.soa : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        return data; 
    }
}

export class PeSubPlatFormMapping {
    subPlatformCode!: string | null;
    subPlatformDescription!: string | null;
    pricingType!: string | null;
    soa!: string | null;
    soldto!: string | null;
    markfor!: string | null;
    segment!: string | null;
    productType!: string | null;
    pricingOwnerOfChannel!: string | null;
    maxCustomer!: string | null;
    name!: string | null;
    id!: number | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.subPlatformCode = _data["subPlatformCode"] !== undefined ? _data["subPlatformCode"] : <any>null;
            this.subPlatformDescription = _data["subPlatformDescription"] !== undefined ? _data["subPlatformDescription"] : <any>null;
            this.pricingType = _data["pricingType"] !== undefined ? _data["pricingType"] : <any>null;
            this.soa = _data["soa"] !== undefined ? _data["soa"] : <any>null;
            this.soldto = _data["soldto"] !== undefined ? _data["soldto"] : <any>null;
            this.markfor = _data["markfor"] !== undefined ? _data["markfor"] : <any>null;
            this.segment = _data["segment"] !== undefined ? _data["segment"] : <any>null;
            this.productType = _data["productType"] !== undefined ? _data["productType"] : <any>null;
            this.pricingOwnerOfChannel = _data["pricingOwnerOfChannel"] !== undefined ? _data["pricingOwnerOfChannel"] : <any>null;
            this.maxCustomer = _data["maxCustomer"] !== undefined ? _data["maxCustomer"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): PeSubPlatFormMapping {
        data = typeof data === 'object' ? data : {};
        return createInstance<PeSubPlatFormMapping>(data, _mappings, PeSubPlatFormMapping);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["subPlatformCode"] = this.subPlatformCode !== undefined ? this.subPlatformCode : <any>null;
        data["subPlatformDescription"] = this.subPlatformDescription !== undefined ? this.subPlatformDescription : <any>null;
        data["pricingType"] = this.pricingType !== undefined ? this.pricingType : <any>null;
        data["soa"] = this.soa !== undefined ? this.soa : <any>null;
        data["soldto"] = this.soldto !== undefined ? this.soldto : <any>null;
        data["markfor"] = this.markfor !== undefined ? this.markfor : <any>null;
        data["segment"] = this.segment !== undefined ? this.segment : <any>null;
        data["productType"] = this.productType !== undefined ? this.productType : <any>null;
        data["pricingOwnerOfChannel"] = this.pricingOwnerOfChannel !== undefined ? this.pricingOwnerOfChannel : <any>null;
        data["maxCustomer"] = this.maxCustomer !== undefined ? this.maxCustomer : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class ExportApplicationXLSInput {
    startDate!: string | null;
    endDate!: string | null;
    filterCase!: number;
    filter!: string | null;
    quotationIdList!: number[] | null;
    queryStatus!: number[] | null;
    querySOA!: string[] | null;
    pageName!: string | null;
    sorting!: string | null;
    skipCount!: number;
    maxResultCount!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.startDate = _data["startDate"] !== undefined ? _data["startDate"] : <any>null;
            this.endDate = _data["endDate"] !== undefined ? _data["endDate"] : <any>null;
            this.filterCase = _data["filterCase"] !== undefined ? _data["filterCase"] : <any>null;
            this.filter = _data["filter"] !== undefined ? _data["filter"] : <any>null;
            if (Array.isArray(_data["quotationIdList"])) {
                this.quotationIdList = [] as any;
                for (let item of _data["quotationIdList"])
                    this.quotationIdList!.push(item);
            }
            if (Array.isArray(_data["queryStatus"])) {
                this.queryStatus = [] as any;
                for (let item of _data["queryStatus"])
                    this.queryStatus!.push(item);
            }
            if (Array.isArray(_data["querySOA"])) {
                this.querySOA = [] as any;
                for (let item of _data["querySOA"])
                    this.querySOA!.push(item);
            }
            this.pageName = _data["pageName"] !== undefined ? _data["pageName"] : <any>null;
            this.sorting = _data["sorting"] !== undefined ? _data["sorting"] : <any>null;
            this.skipCount = _data["skipCount"] !== undefined ? _data["skipCount"] : <any>null;
            this.maxResultCount = _data["maxResultCount"] !== undefined ? _data["maxResultCount"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): ExportApplicationXLSInput {
        data = typeof data === 'object' ? data : {};
        return createInstance<ExportApplicationXLSInput>(data, _mappings, ExportApplicationXLSInput);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["startDate"] = this.startDate !== undefined ? this.startDate : <any>null;
        data["endDate"] = this.endDate !== undefined ? this.endDate : <any>null;
        data["filterCase"] = this.filterCase !== undefined ? this.filterCase : <any>null;
        data["filter"] = this.filter !== undefined ? this.filter : <any>null;
        if (Array.isArray(this.quotationIdList)) {
            data["quotationIdList"] = [];
            for (let item of this.quotationIdList)
                data["quotationIdList"].push(item);
        }
        if (Array.isArray(this.queryStatus)) {
            data["queryStatus"] = [];
            for (let item of this.queryStatus)
                data["queryStatus"].push(item);
        }
        if (Array.isArray(this.querySOA)) {
            data["querySOA"] = [];
            for (let item of this.querySOA)
                data["querySOA"].push(item);
        }
        data["pageName"] = this.pageName !== undefined ? this.pageName : <any>null;
        data["sorting"] = this.sorting !== undefined ? this.sorting : <any>null;
        data["skipCount"] = this.skipCount !== undefined ? this.skipCount : <any>null;
        data["maxResultCount"] = this.maxResultCount !== undefined ? this.maxResultCount : <any>null;
        return data; 
    }
}

export class QuotationApplicationExportDto {
    id!: number;
    assignedToName!: string | null;
    applicationStatus!: QuotationAppStatus;
    createDate!: Date | null;
    custName!: string | null;
    soa!: string | null;
    upc!: string | null;
    ischangeUPC!: string | null;
    outerUPCDesc!: string | null;
    endAmount!: number;
    externaldiameter!: string | null;
    thickness!: string | null;
    aperture!: string | null;
    abrasivMaterials!: string | null;
    creatorName!: string | null;
    upcPrice!: number;
    facePrice!: number;
    totalCost!: number;
    fixedCost!: number;
    margin!: number;
    contributionMargin!: number;
    globalDescrip!: string | null;
    shape!: string | null;
    binder!: string | null;
    granularity!: string | null;
    hardness!: string | null;
    organizationNumber!: string | null;
    lineSpeed!: string | null;
    externalStandard!: string | null;
    customerGroupName!: string | null;
    submitDate!: Date | null;
    markFor!: string | null;
    custNum!: string | null;
    detailDesc!: string | null;
    notifyCreationUPC!: boolean;
    hasFile!: number;
    finalUse!: string | null;
    specialRequirements!: string | null;
    applicationStatusname!: string | null;
    creatorMail!: string | null;
    createBy!: string | null;
    assignedTo!: string | null;
    quotationByUPC!: number;
    caculateError!: string | null;
    formData!: string | null;
    salseFormData!: string | null;
    subPlatFormCode!: string | null;
    subPlatFormDescription!: string | null;
    subPlatFormType!: string | null;
    reason!: string | null;
    saBond!: string | null;
    saSize!: string | null;
    caWidth!: number;
    caMaterialDescription!: string | null;
    caLength!: number;
    caGranularity!: string | null;
    amount!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.assignedToName = _data["assignedToName"] !== undefined ? _data["assignedToName"] : <any>null;
            this.applicationStatus = _data["applicationStatus"] !== undefined ? _data["applicationStatus"] : <any>null;
            this.createDate = _data["createDate"] ? new Date(_data["createDate"].toString()) : <any>null;
            this.custName = _data["custName"] !== undefined ? _data["custName"] : <any>null;
            this.soa = _data["soa"] !== undefined ? _data["soa"] : <any>null;
            this.upc = _data["upc"] !== undefined ? _data["upc"] : <any>null;
            this.ischangeUPC = _data["ischangeUPC"] !== undefined ? _data["ischangeUPC"] : <any>null;
            this.outerUPCDesc = _data["outerUPCDesc"] !== undefined ? _data["outerUPCDesc"] : <any>null;
            this.endAmount = _data["endAmount"] !== undefined ? _data["endAmount"] : <any>null;
            this.externaldiameter = _data["externaldiameter"] !== undefined ? _data["externaldiameter"] : <any>null;
            this.thickness = _data["thickness"] !== undefined ? _data["thickness"] : <any>null;
            this.aperture = _data["aperture"] !== undefined ? _data["aperture"] : <any>null;
            this.abrasivMaterials = _data["abrasivMaterials"] !== undefined ? _data["abrasivMaterials"] : <any>null;
            this.creatorName = _data["creatorName"] !== undefined ? _data["creatorName"] : <any>null;
            this.upcPrice = _data["upcPrice"] !== undefined ? _data["upcPrice"] : <any>null;
            this.facePrice = _data["facePrice"] !== undefined ? _data["facePrice"] : <any>null;
            this.totalCost = _data["totalCost"] !== undefined ? _data["totalCost"] : <any>null;
            this.fixedCost = _data["fixedCost"] !== undefined ? _data["fixedCost"] : <any>null;
            this.margin = _data["margin"] !== undefined ? _data["margin"] : <any>null;
            this.contributionMargin = _data["contributionMargin"] !== undefined ? _data["contributionMargin"] : <any>null;
            this.globalDescrip = _data["globalDescrip"] !== undefined ? _data["globalDescrip"] : <any>null;
            this.shape = _data["shape"] !== undefined ? _data["shape"] : <any>null;
            this.binder = _data["binder"] !== undefined ? _data["binder"] : <any>null;
            this.granularity = _data["granularity"] !== undefined ? _data["granularity"] : <any>null;
            this.hardness = _data["hardness"] !== undefined ? _data["hardness"] : <any>null;
            this.organizationNumber = _data["organizationNumber"] !== undefined ? _data["organizationNumber"] : <any>null;
            this.lineSpeed = _data["lineSpeed"] !== undefined ? _data["lineSpeed"] : <any>null;
            this.externalStandard = _data["externalStandard"] !== undefined ? _data["externalStandard"] : <any>null;
            this.customerGroupName = _data["customerGroupName"] !== undefined ? _data["customerGroupName"] : <any>null;
            this.submitDate = _data["submitDate"] ? new Date(_data["submitDate"].toString()) : <any>null;
            this.markFor = _data["markFor"] !== undefined ? _data["markFor"] : <any>null;
            this.custNum = _data["custNum"] !== undefined ? _data["custNum"] : <any>null;
            this.detailDesc = _data["detailDesc"] !== undefined ? _data["detailDesc"] : <any>null;
            this.notifyCreationUPC = _data["notifyCreationUPC"] !== undefined ? _data["notifyCreationUPC"] : <any>null;
            this.hasFile = _data["hasFile"] !== undefined ? _data["hasFile"] : <any>null;
            this.finalUse = _data["finalUse"] !== undefined ? _data["finalUse"] : <any>null;
            this.specialRequirements = _data["specialRequirements"] !== undefined ? _data["specialRequirements"] : <any>null;
            this.applicationStatusname = _data["applicationStatusname"] !== undefined ? _data["applicationStatusname"] : <any>null;
            this.creatorMail = _data["creatorMail"] !== undefined ? _data["creatorMail"] : <any>null;
            this.createBy = _data["createBy"] !== undefined ? _data["createBy"] : <any>null;
            this.assignedTo = _data["assignedTo"] !== undefined ? _data["assignedTo"] : <any>null;
            this.quotationByUPC = _data["quotationByUPC"] !== undefined ? _data["quotationByUPC"] : <any>null;
            this.caculateError = _data["caculateError"] !== undefined ? _data["caculateError"] : <any>null;
            this.formData = _data["formData"] !== undefined ? _data["formData"] : <any>null;
            this.salseFormData = _data["salseFormData"] !== undefined ? _data["salseFormData"] : <any>null;
            this.subPlatFormCode = _data["subPlatFormCode"] !== undefined ? _data["subPlatFormCode"] : <any>null;
            this.subPlatFormDescription = _data["subPlatFormDescription"] !== undefined ? _data["subPlatFormDescription"] : <any>null;
            this.subPlatFormType = _data["subPlatFormType"] !== undefined ? _data["subPlatFormType"] : <any>null;
            this.reason = _data["reason"] !== undefined ? _data["reason"] : <any>null;
            this.saBond = _data["saBond"] !== undefined ? _data["saBond"] : <any>null;
            this.saSize = _data["saSize"] !== undefined ? _data["saSize"] : <any>null;
            this.caWidth = _data["caWidth"] !== undefined ? _data["caWidth"] : <any>null;
            this.caMaterialDescription = _data["caMaterialDescription"] !== undefined ? _data["caMaterialDescription"] : <any>null;
            this.caLength = _data["caLength"] !== undefined ? _data["caLength"] : <any>null;
            this.caGranularity = _data["caGranularity"] !== undefined ? _data["caGranularity"] : <any>null;
            this.amount = _data["amount"] !== undefined ? _data["amount"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): QuotationApplicationExportDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<QuotationApplicationExportDto>(data, _mappings, QuotationApplicationExportDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["assignedToName"] = this.assignedToName !== undefined ? this.assignedToName : <any>null;
        data["applicationStatus"] = this.applicationStatus !== undefined ? this.applicationStatus : <any>null;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>null;
        data["custName"] = this.custName !== undefined ? this.custName : <any>null;
        data["soa"] = this.soa !== undefined ? this.soa : <any>null;
        data["upc"] = this.upc !== undefined ? this.upc : <any>null;
        data["ischangeUPC"] = this.ischangeUPC !== undefined ? this.ischangeUPC : <any>null;
        data["outerUPCDesc"] = this.outerUPCDesc !== undefined ? this.outerUPCDesc : <any>null;
        data["endAmount"] = this.endAmount !== undefined ? this.endAmount : <any>null;
        data["externaldiameter"] = this.externaldiameter !== undefined ? this.externaldiameter : <any>null;
        data["thickness"] = this.thickness !== undefined ? this.thickness : <any>null;
        data["aperture"] = this.aperture !== undefined ? this.aperture : <any>null;
        data["abrasivMaterials"] = this.abrasivMaterials !== undefined ? this.abrasivMaterials : <any>null;
        data["creatorName"] = this.creatorName !== undefined ? this.creatorName : <any>null;
        data["upcPrice"] = this.upcPrice !== undefined ? this.upcPrice : <any>null;
        data["facePrice"] = this.facePrice !== undefined ? this.facePrice : <any>null;
        data["totalCost"] = this.totalCost !== undefined ? this.totalCost : <any>null;
        data["fixedCost"] = this.fixedCost !== undefined ? this.fixedCost : <any>null;
        data["margin"] = this.margin !== undefined ? this.margin : <any>null;
        data["contributionMargin"] = this.contributionMargin !== undefined ? this.contributionMargin : <any>null;
        data["globalDescrip"] = this.globalDescrip !== undefined ? this.globalDescrip : <any>null;
        data["shape"] = this.shape !== undefined ? this.shape : <any>null;
        data["binder"] = this.binder !== undefined ? this.binder : <any>null;
        data["granularity"] = this.granularity !== undefined ? this.granularity : <any>null;
        data["hardness"] = this.hardness !== undefined ? this.hardness : <any>null;
        data["organizationNumber"] = this.organizationNumber !== undefined ? this.organizationNumber : <any>null;
        data["lineSpeed"] = this.lineSpeed !== undefined ? this.lineSpeed : <any>null;
        data["externalStandard"] = this.externalStandard !== undefined ? this.externalStandard : <any>null;
        data["customerGroupName"] = this.customerGroupName !== undefined ? this.customerGroupName : <any>null;
        data["submitDate"] = this.submitDate ? this.submitDate.toISOString() : <any>null;
        data["markFor"] = this.markFor !== undefined ? this.markFor : <any>null;
        data["custNum"] = this.custNum !== undefined ? this.custNum : <any>null;
        data["detailDesc"] = this.detailDesc !== undefined ? this.detailDesc : <any>null;
        data["notifyCreationUPC"] = this.notifyCreationUPC !== undefined ? this.notifyCreationUPC : <any>null;
        data["hasFile"] = this.hasFile !== undefined ? this.hasFile : <any>null;
        data["finalUse"] = this.finalUse !== undefined ? this.finalUse : <any>null;
        data["specialRequirements"] = this.specialRequirements !== undefined ? this.specialRequirements : <any>null;
        data["applicationStatusname"] = this.applicationStatusname !== undefined ? this.applicationStatusname : <any>null;
        data["creatorMail"] = this.creatorMail !== undefined ? this.creatorMail : <any>null;
        data["createBy"] = this.createBy !== undefined ? this.createBy : <any>null;
        data["assignedTo"] = this.assignedTo !== undefined ? this.assignedTo : <any>null;
        data["quotationByUPC"] = this.quotationByUPC !== undefined ? this.quotationByUPC : <any>null;
        data["caculateError"] = this.caculateError !== undefined ? this.caculateError : <any>null;
        data["formData"] = this.formData !== undefined ? this.formData : <any>null;
        data["salseFormData"] = this.salseFormData !== undefined ? this.salseFormData : <any>null;
        data["subPlatFormCode"] = this.subPlatFormCode !== undefined ? this.subPlatFormCode : <any>null;
        data["subPlatFormDescription"] = this.subPlatFormDescription !== undefined ? this.subPlatFormDescription : <any>null;
        data["subPlatFormType"] = this.subPlatFormType !== undefined ? this.subPlatFormType : <any>null;
        data["reason"] = this.reason !== undefined ? this.reason : <any>null;
        data["saBond"] = this.saBond !== undefined ? this.saBond : <any>null;
        data["saSize"] = this.saSize !== undefined ? this.saSize : <any>null;
        data["caWidth"] = this.caWidth !== undefined ? this.caWidth : <any>null;
        data["caMaterialDescription"] = this.caMaterialDescription !== undefined ? this.caMaterialDescription : <any>null;
        data["caLength"] = this.caLength !== undefined ? this.caLength : <any>null;
        data["caGranularity"] = this.caGranularity !== undefined ? this.caGranularity : <any>null;
        data["amount"] = this.amount !== undefined ? this.amount : <any>null;
        return data; 
    }
}

export class CreateOrEditNewQuotationUPCApplication {
    custNum!: string | null;
    markFor!: string | null;
    upc!: string | null;
    salseUpc!: string | null;
    upcPrice!: number | null;
    totalCost!: number | null;
    fixedCost!: number | null;
    upcDesc!: string | null;
    outerUPCDesc!: string | null;
    salseOuterUPCDesc!: string | null;
    salseInnerUPCDesc!: string | null;
    applicationStatus!: QuotationAppStatus;
    externaldiameter!: string | null;
    thickness!: string | null;
    aperture!: string | null;
    abrasivMaterials!: string | null;
    binder!: string | null;
    granularity!: string | null;
    hardness!: string | null;
    organizationNumber!: string | null;
    shape!: string | null;
    finalUse!: string | null;
    externalStandard!: string | null;
    lineSpeed!: string | null;
    specialRequirements!: string | null;
    detailDesc!: string | null;
    createBy!: string | null;
    createDate!: Date | null;
    margin!: number | null;
    contributionMargin!: number | null;
    facePrice!: number | null;
    quotationByUPC!: number | null;
    caculateError!: string | null;
    soa!: string | null;
    productCategory!: string | null;
    productApply!: string | null;
    inquiryData!: string | null;
    customerGroupName!: string | null;
    customerGroup!: string | null;
    priceListType!: string | null;
    formData!: string | null;
    salseFormData!: string | null;
    whetherImport!: string | null;
    priceCount!: number | null;
    tvmk!: string | null;
    militaryCustomers!: string | null;
    specialPriceCaseID!: number | null;
    cnTy!: string | null;
    assignedTo!: string | null;
    foreignEmail!: string | null;
    priceFrom!: QuotationPriceFrom;
    isFinishHighPrice!: string | null;
    isNoParameter!: boolean | null;
    idFrom!: number | null;
    hopeDays!: number | null;
    submitDate!: Date | null;
    productRemarks!: string | null;
    priceLogicForm!: number | null;
    subPlanFormId!: number | null;
    subPlatFormCode!: string | null;
    referenceUPC!: string | null;
    size!: string | null;
    bond!: string | null;
    subPlatFormError!: string | null;
    subPlanFormSource!: number;
    subPlanFormType!: string | null;
    notifyCreationUPC!: boolean | null;
    baBackwardDeduction!: boolean | null;
    saleIsPrice!: boolean | null;
    ffc!: number | null;
    expectedPrice!: number | null;
    extensionData!: string | null;
    pricingPE!: string | null;
    priceComments!: string | null;
    id!: number | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.custNum = _data["custNum"] !== undefined ? _data["custNum"] : <any>null;
            this.markFor = _data["markFor"] !== undefined ? _data["markFor"] : <any>null;
            this.upc = _data["upc"] !== undefined ? _data["upc"] : <any>null;
            this.salseUpc = _data["salseUpc"] !== undefined ? _data["salseUpc"] : <any>null;
            this.upcPrice = _data["upcPrice"] !== undefined ? _data["upcPrice"] : <any>null;
            this.totalCost = _data["totalCost"] !== undefined ? _data["totalCost"] : <any>null;
            this.fixedCost = _data["fixedCost"] !== undefined ? _data["fixedCost"] : <any>null;
            this.upcDesc = _data["upcDesc"] !== undefined ? _data["upcDesc"] : <any>null;
            this.outerUPCDesc = _data["outerUPCDesc"] !== undefined ? _data["outerUPCDesc"] : <any>null;
            this.salseOuterUPCDesc = _data["salseOuterUPCDesc"] !== undefined ? _data["salseOuterUPCDesc"] : <any>null;
            this.salseInnerUPCDesc = _data["salseInnerUPCDesc"] !== undefined ? _data["salseInnerUPCDesc"] : <any>null;
            this.applicationStatus = _data["applicationStatus"] !== undefined ? _data["applicationStatus"] : <any>null;
            this.externaldiameter = _data["externaldiameter"] !== undefined ? _data["externaldiameter"] : <any>null;
            this.thickness = _data["thickness"] !== undefined ? _data["thickness"] : <any>null;
            this.aperture = _data["aperture"] !== undefined ? _data["aperture"] : <any>null;
            this.abrasivMaterials = _data["abrasivMaterials"] !== undefined ? _data["abrasivMaterials"] : <any>null;
            this.binder = _data["binder"] !== undefined ? _data["binder"] : <any>null;
            this.granularity = _data["granularity"] !== undefined ? _data["granularity"] : <any>null;
            this.hardness = _data["hardness"] !== undefined ? _data["hardness"] : <any>null;
            this.organizationNumber = _data["organizationNumber"] !== undefined ? _data["organizationNumber"] : <any>null;
            this.shape = _data["shape"] !== undefined ? _data["shape"] : <any>null;
            this.finalUse = _data["finalUse"] !== undefined ? _data["finalUse"] : <any>null;
            this.externalStandard = _data["externalStandard"] !== undefined ? _data["externalStandard"] : <any>null;
            this.lineSpeed = _data["lineSpeed"] !== undefined ? _data["lineSpeed"] : <any>null;
            this.specialRequirements = _data["specialRequirements"] !== undefined ? _data["specialRequirements"] : <any>null;
            this.detailDesc = _data["detailDesc"] !== undefined ? _data["detailDesc"] : <any>null;
            this.createBy = _data["createBy"] !== undefined ? _data["createBy"] : <any>null;
            this.createDate = _data["createDate"] ? new Date(_data["createDate"].toString()) : <any>null;
            this.margin = _data["margin"] !== undefined ? _data["margin"] : <any>null;
            this.contributionMargin = _data["contributionMargin"] !== undefined ? _data["contributionMargin"] : <any>null;
            this.facePrice = _data["facePrice"] !== undefined ? _data["facePrice"] : <any>null;
            this.quotationByUPC = _data["quotationByUPC"] !== undefined ? _data["quotationByUPC"] : <any>null;
            this.caculateError = _data["caculateError"] !== undefined ? _data["caculateError"] : <any>null;
            this.soa = _data["soa"] !== undefined ? _data["soa"] : <any>null;
            this.productCategory = _data["productCategory"] !== undefined ? _data["productCategory"] : <any>null;
            this.productApply = _data["productApply"] !== undefined ? _data["productApply"] : <any>null;
            this.inquiryData = _data["inquiryData"] !== undefined ? _data["inquiryData"] : <any>null;
            this.customerGroupName = _data["customerGroupName"] !== undefined ? _data["customerGroupName"] : <any>null;
            this.customerGroup = _data["customerGroup"] !== undefined ? _data["customerGroup"] : <any>null;
            this.priceListType = _data["priceListType"] !== undefined ? _data["priceListType"] : <any>null;
            this.formData = _data["formData"] !== undefined ? _data["formData"] : <any>null;
            this.salseFormData = _data["salseFormData"] !== undefined ? _data["salseFormData"] : <any>null;
            this.whetherImport = _data["whetherImport"] !== undefined ? _data["whetherImport"] : <any>null;
            this.priceCount = _data["priceCount"] !== undefined ? _data["priceCount"] : <any>null;
            this.tvmk = _data["tvmk"] !== undefined ? _data["tvmk"] : <any>null;
            this.militaryCustomers = _data["militaryCustomers"] !== undefined ? _data["militaryCustomers"] : <any>null;
            this.specialPriceCaseID = _data["specialPriceCaseID"] !== undefined ? _data["specialPriceCaseID"] : <any>null;
            this.cnTy = _data["cnTy"] !== undefined ? _data["cnTy"] : <any>null;
            this.assignedTo = _data["assignedTo"] !== undefined ? _data["assignedTo"] : <any>null;
            this.foreignEmail = _data["foreignEmail"] !== undefined ? _data["foreignEmail"] : <any>null;
            this.priceFrom = _data["priceFrom"] !== undefined ? _data["priceFrom"] : <any>null;
            this.isFinishHighPrice = _data["isFinishHighPrice"] !== undefined ? _data["isFinishHighPrice"] : <any>null;
            this.isNoParameter = _data["isNoParameter"] !== undefined ? _data["isNoParameter"] : <any>null;
            this.idFrom = _data["idFrom"] !== undefined ? _data["idFrom"] : <any>null;
            this.hopeDays = _data["hopeDays"] !== undefined ? _data["hopeDays"] : <any>null;
            this.submitDate = _data["submitDate"] ? new Date(_data["submitDate"].toString()) : <any>null;
            this.productRemarks = _data["productRemarks"] !== undefined ? _data["productRemarks"] : <any>null;
            this.priceLogicForm = _data["priceLogicForm"] !== undefined ? _data["priceLogicForm"] : <any>null;
            this.subPlanFormId = _data["subPlanFormId"] !== undefined ? _data["subPlanFormId"] : <any>null;
            this.subPlatFormCode = _data["subPlatFormCode"] !== undefined ? _data["subPlatFormCode"] : <any>null;
            this.referenceUPC = _data["referenceUPC"] !== undefined ? _data["referenceUPC"] : <any>null;
            this.size = _data["size"] !== undefined ? _data["size"] : <any>null;
            this.bond = _data["bond"] !== undefined ? _data["bond"] : <any>null;
            this.subPlatFormError = _data["subPlatFormError"] !== undefined ? _data["subPlatFormError"] : <any>null;
            this.subPlanFormSource = _data["subPlanFormSource"] !== undefined ? _data["subPlanFormSource"] : <any>null;
            this.subPlanFormType = _data["subPlanFormType"] !== undefined ? _data["subPlanFormType"] : <any>null;
            this.notifyCreationUPC = _data["notifyCreationUPC"] !== undefined ? _data["notifyCreationUPC"] : <any>null;
            this.baBackwardDeduction = _data["baBackwardDeduction"] !== undefined ? _data["baBackwardDeduction"] : <any>null;
            this.saleIsPrice = _data["saleIsPrice"] !== undefined ? _data["saleIsPrice"] : <any>null;
            this.ffc = _data["ffc"] !== undefined ? _data["ffc"] : <any>null;
            this.expectedPrice = _data["expectedPrice"] !== undefined ? _data["expectedPrice"] : <any>null;
            this.extensionData = _data["extensionData"] !== undefined ? _data["extensionData"] : <any>null;
            this.pricingPE = _data["pricingPE"] !== undefined ? _data["pricingPE"] : <any>null;
            this.priceComments = _data["priceComments"] !== undefined ? _data["priceComments"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): CreateOrEditNewQuotationUPCApplication {
        data = typeof data === 'object' ? data : {};
        return createInstance<CreateOrEditNewQuotationUPCApplication>(data, _mappings, CreateOrEditNewQuotationUPCApplication);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["custNum"] = this.custNum !== undefined ? this.custNum : <any>null;
        data["markFor"] = this.markFor !== undefined ? this.markFor : <any>null;
        data["upc"] = this.upc !== undefined ? this.upc : <any>null;
        data["salseUpc"] = this.salseUpc !== undefined ? this.salseUpc : <any>null;
        data["upcPrice"] = this.upcPrice !== undefined ? this.upcPrice : <any>null;
        data["totalCost"] = this.totalCost !== undefined ? this.totalCost : <any>null;
        data["fixedCost"] = this.fixedCost !== undefined ? this.fixedCost : <any>null;
        data["upcDesc"] = this.upcDesc !== undefined ? this.upcDesc : <any>null;
        data["outerUPCDesc"] = this.outerUPCDesc !== undefined ? this.outerUPCDesc : <any>null;
        data["salseOuterUPCDesc"] = this.salseOuterUPCDesc !== undefined ? this.salseOuterUPCDesc : <any>null;
        data["salseInnerUPCDesc"] = this.salseInnerUPCDesc !== undefined ? this.salseInnerUPCDesc : <any>null;
        data["applicationStatus"] = this.applicationStatus !== undefined ? this.applicationStatus : <any>null;
        data["externaldiameter"] = this.externaldiameter !== undefined ? this.externaldiameter : <any>null;
        data["thickness"] = this.thickness !== undefined ? this.thickness : <any>null;
        data["aperture"] = this.aperture !== undefined ? this.aperture : <any>null;
        data["abrasivMaterials"] = this.abrasivMaterials !== undefined ? this.abrasivMaterials : <any>null;
        data["binder"] = this.binder !== undefined ? this.binder : <any>null;
        data["granularity"] = this.granularity !== undefined ? this.granularity : <any>null;
        data["hardness"] = this.hardness !== undefined ? this.hardness : <any>null;
        data["organizationNumber"] = this.organizationNumber !== undefined ? this.organizationNumber : <any>null;
        data["shape"] = this.shape !== undefined ? this.shape : <any>null;
        data["finalUse"] = this.finalUse !== undefined ? this.finalUse : <any>null;
        data["externalStandard"] = this.externalStandard !== undefined ? this.externalStandard : <any>null;
        data["lineSpeed"] = this.lineSpeed !== undefined ? this.lineSpeed : <any>null;
        data["specialRequirements"] = this.specialRequirements !== undefined ? this.specialRequirements : <any>null;
        data["detailDesc"] = this.detailDesc !== undefined ? this.detailDesc : <any>null;
        data["createBy"] = this.createBy !== undefined ? this.createBy : <any>null;
        data["createDate"] = this.createDate ? this.createDate.toISOString() : <any>null;
        data["margin"] = this.margin !== undefined ? this.margin : <any>null;
        data["contributionMargin"] = this.contributionMargin !== undefined ? this.contributionMargin : <any>null;
        data["facePrice"] = this.facePrice !== undefined ? this.facePrice : <any>null;
        data["quotationByUPC"] = this.quotationByUPC !== undefined ? this.quotationByUPC : <any>null;
        data["caculateError"] = this.caculateError !== undefined ? this.caculateError : <any>null;
        data["soa"] = this.soa !== undefined ? this.soa : <any>null;
        data["productCategory"] = this.productCategory !== undefined ? this.productCategory : <any>null;
        data["productApply"] = this.productApply !== undefined ? this.productApply : <any>null;
        data["inquiryData"] = this.inquiryData !== undefined ? this.inquiryData : <any>null;
        data["customerGroupName"] = this.customerGroupName !== undefined ? this.customerGroupName : <any>null;
        data["customerGroup"] = this.customerGroup !== undefined ? this.customerGroup : <any>null;
        data["priceListType"] = this.priceListType !== undefined ? this.priceListType : <any>null;
        data["formData"] = this.formData !== undefined ? this.formData : <any>null;
        data["salseFormData"] = this.salseFormData !== undefined ? this.salseFormData : <any>null;
        data["whetherImport"] = this.whetherImport !== undefined ? this.whetherImport : <any>null;
        data["priceCount"] = this.priceCount !== undefined ? this.priceCount : <any>null;
        data["tvmk"] = this.tvmk !== undefined ? this.tvmk : <any>null;
        data["militaryCustomers"] = this.militaryCustomers !== undefined ? this.militaryCustomers : <any>null;
        data["specialPriceCaseID"] = this.specialPriceCaseID !== undefined ? this.specialPriceCaseID : <any>null;
        data["cnTy"] = this.cnTy !== undefined ? this.cnTy : <any>null;
        data["assignedTo"] = this.assignedTo !== undefined ? this.assignedTo : <any>null;
        data["foreignEmail"] = this.foreignEmail !== undefined ? this.foreignEmail : <any>null;
        data["priceFrom"] = this.priceFrom !== undefined ? this.priceFrom : <any>null;
        data["isFinishHighPrice"] = this.isFinishHighPrice !== undefined ? this.isFinishHighPrice : <any>null;
        data["isNoParameter"] = this.isNoParameter !== undefined ? this.isNoParameter : <any>null;
        data["idFrom"] = this.idFrom !== undefined ? this.idFrom : <any>null;
        data["hopeDays"] = this.hopeDays !== undefined ? this.hopeDays : <any>null;
        data["submitDate"] = this.submitDate ? this.submitDate.toISOString() : <any>null;
        data["productRemarks"] = this.productRemarks !== undefined ? this.productRemarks : <any>null;
        data["priceLogicForm"] = this.priceLogicForm !== undefined ? this.priceLogicForm : <any>null;
        data["subPlanFormId"] = this.subPlanFormId !== undefined ? this.subPlanFormId : <any>null;
        data["subPlatFormCode"] = this.subPlatFormCode !== undefined ? this.subPlatFormCode : <any>null;
        data["referenceUPC"] = this.referenceUPC !== undefined ? this.referenceUPC : <any>null;
        data["size"] = this.size !== undefined ? this.size : <any>null;
        data["bond"] = this.bond !== undefined ? this.bond : <any>null;
        data["subPlatFormError"] = this.subPlatFormError !== undefined ? this.subPlatFormError : <any>null;
        data["subPlanFormSource"] = this.subPlanFormSource !== undefined ? this.subPlanFormSource : <any>null;
        data["subPlanFormType"] = this.subPlanFormType !== undefined ? this.subPlanFormType : <any>null;
        data["notifyCreationUPC"] = this.notifyCreationUPC !== undefined ? this.notifyCreationUPC : <any>null;
        data["baBackwardDeduction"] = this.baBackwardDeduction !== undefined ? this.baBackwardDeduction : <any>null;
        data["saleIsPrice"] = this.saleIsPrice !== undefined ? this.saleIsPrice : <any>null;
        data["ffc"] = this.ffc !== undefined ? this.ffc : <any>null;
        data["expectedPrice"] = this.expectedPrice !== undefined ? this.expectedPrice : <any>null;
        data["extensionData"] = this.extensionData !== undefined ? this.extensionData : <any>null;
        data["pricingPE"] = this.pricingPE !== undefined ? this.pricingPE : <any>null;
        data["priceComments"] = this.priceComments !== undefined ? this.priceComments : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class AddUpcDto {
    id!: number;
    upc!: string | null;
    priceListType!: string | null;
    extensionData!: string | null;
    discount!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.upc = _data["upc"] !== undefined ? _data["upc"] : <any>null;
            this.priceListType = _data["priceListType"] !== undefined ? _data["priceListType"] : <any>null;
            this.extensionData = _data["extensionData"] !== undefined ? _data["extensionData"] : <any>null;
            this.discount = _data["discount"] !== undefined ? _data["discount"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): AddUpcDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<AddUpcDto>(data, _mappings, AddUpcDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["upc"] = this.upc !== undefined ? this.upc : <any>null;
        data["priceListType"] = this.priceListType !== undefined ? this.priceListType : <any>null;
        data["extensionData"] = this.extensionData !== undefined ? this.extensionData : <any>null;
        data["discount"] = this.discount !== undefined ? this.discount : <any>null;
        return data; 
    }
}

export class ApproverByDto {
    role!: string | null;
    level!: number;
    emplID!: string | null;
    salesName!: string | null;
    mgrID!: string | null;
    lineManager!: string | null;
    displayName!: string | null;
    mail!: string | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.role = _data["role"] !== undefined ? _data["role"] : <any>null;
            this.level = _data["level"] !== undefined ? _data["level"] : <any>null;
            this.emplID = _data["emplID"] !== undefined ? _data["emplID"] : <any>null;
            this.salesName = _data["salesName"] !== undefined ? _data["salesName"] : <any>null;
            this.mgrID = _data["mgrID"] !== undefined ? _data["mgrID"] : <any>null;
            this.lineManager = _data["lineManager"] !== undefined ? _data["lineManager"] : <any>null;
            this.displayName = _data["displayName"] !== undefined ? _data["displayName"] : <any>null;
            this.mail = _data["mail"] !== undefined ? _data["mail"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): ApproverByDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<ApproverByDto>(data, _mappings, ApproverByDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["role"] = this.role !== undefined ? this.role : <any>null;
        data["level"] = this.level !== undefined ? this.level : <any>null;
        data["emplID"] = this.emplID !== undefined ? this.emplID : <any>null;
        data["salesName"] = this.salesName !== undefined ? this.salesName : <any>null;
        data["mgrID"] = this.mgrID !== undefined ? this.mgrID : <any>null;
        data["lineManager"] = this.lineManager !== undefined ? this.lineManager : <any>null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : <any>null;
        data["mail"] = this.mail !== undefined ? this.mail : <any>null;
        return data; 
    }
}

export class SearchUpcDescInput {
    upc!: string | null;
    soa!: string | null;
    outerUPCDesc!: string | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.upc = _data["upc"] !== undefined ? _data["upc"] : <any>null;
            this.soa = _data["soa"] !== undefined ? _data["soa"] : <any>null;
            this.outerUPCDesc = _data["outerUPCDesc"] !== undefined ? _data["outerUPCDesc"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): SearchUpcDescInput {
        data = typeof data === 'object' ? data : {};
        return createInstance<SearchUpcDescInput>(data, _mappings, SearchUpcDescInput);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["upc"] = this.upc !== undefined ? this.upc : <any>null;
        data["soa"] = this.soa !== undefined ? this.soa : <any>null;
        data["outerUPCDesc"] = this.outerUPCDesc !== undefined ? this.outerUPCDesc : <any>null;
        return data; 
    }
}

export class UPCDescribeDto {
    isStandardPro!: boolean;
    outerUPCDesc!: string | null;
    upcDesc!: string | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.isStandardPro = _data["isStandardPro"] !== undefined ? _data["isStandardPro"] : <any>null;
            this.outerUPCDesc = _data["outerUPCDesc"] !== undefined ? _data["outerUPCDesc"] : <any>null;
            this.upcDesc = _data["upcDesc"] !== undefined ? _data["upcDesc"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): UPCDescribeDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<UPCDescribeDto>(data, _mappings, UPCDescribeDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isStandardPro"] = this.isStandardPro !== undefined ? this.isStandardPro : <any>null;
        data["outerUPCDesc"] = this.outerUPCDesc !== undefined ? this.outerUPCDesc : <any>null;
        data["upcDesc"] = this.upcDesc !== undefined ? this.upcDesc : <any>null;
        return data; 
    }
}

export class CreateRoleDto {
    name!: string;
    displayName!: string;
    normalizedName!: string | null;
    description!: string | null;
    isDefault!: boolean;
    grantedPermissions!: string[] | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.displayName = _data["displayName"] !== undefined ? _data["displayName"] : <any>null;
            this.normalizedName = _data["normalizedName"] !== undefined ? _data["normalizedName"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.isDefault = _data["isDefault"] !== undefined ? _data["isDefault"] : <any>null;
            if (Array.isArray(_data["grantedPermissions"])) {
                this.grantedPermissions = [] as any;
                for (let item of _data["grantedPermissions"])
                    this.grantedPermissions!.push(item);
            }
        }
    }

    static fromJS(data: any, _mappings?: any): CreateRoleDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<CreateRoleDto>(data, _mappings, CreateRoleDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : <any>null;
        data["normalizedName"] = this.normalizedName !== undefined ? this.normalizedName : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["isDefault"] = this.isDefault !== undefined ? this.isDefault : <any>null;
        if (Array.isArray(this.grantedPermissions)) {
            data["grantedPermissions"] = [];
            for (let item of this.grantedPermissions)
                data["grantedPermissions"].push(item);
        }
        return data; 
    }
}

export class RoleDto {
    name!: string;
    displayName!: string;
    normalizedName!: string | null;
    description!: string | null;
    grantedPermissions!: string[] | null;
    isStatic!: boolean;
    isDefault!: boolean;
    id!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.displayName = _data["displayName"] !== undefined ? _data["displayName"] : <any>null;
            this.normalizedName = _data["normalizedName"] !== undefined ? _data["normalizedName"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            if (Array.isArray(_data["grantedPermissions"])) {
                this.grantedPermissions = [] as any;
                for (let item of _data["grantedPermissions"])
                    this.grantedPermissions!.push(item);
            }
            this.isStatic = _data["isStatic"] !== undefined ? _data["isStatic"] : <any>null;
            this.isDefault = _data["isDefault"] !== undefined ? _data["isDefault"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): RoleDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<RoleDto>(data, _mappings, RoleDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : <any>null;
        data["normalizedName"] = this.normalizedName !== undefined ? this.normalizedName : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        if (Array.isArray(this.grantedPermissions)) {
            data["grantedPermissions"] = [];
            for (let item of this.grantedPermissions)
                data["grantedPermissions"].push(item);
        }
        data["isStatic"] = this.isStatic !== undefined ? this.isStatic : <any>null;
        data["isDefault"] = this.isDefault !== undefined ? this.isDefault : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class RoleListDto {
    name!: string | null;
    displayName!: string | null;
    isStatic!: boolean;
    isDefault!: boolean;
    creationTime!: Date;
    id!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.displayName = _data["displayName"] !== undefined ? _data["displayName"] : <any>null;
            this.isStatic = _data["isStatic"] !== undefined ? _data["isStatic"] : <any>null;
            this.isDefault = _data["isDefault"] !== undefined ? _data["isDefault"] : <any>null;
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): RoleListDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<RoleListDto>(data, _mappings, RoleListDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : <any>null;
        data["isStatic"] = this.isStatic !== undefined ? this.isStatic : <any>null;
        data["isDefault"] = this.isDefault !== undefined ? this.isDefault : <any>null;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class ListResultDtoOfRoleListDto {
    items!: RoleListDto[] | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RoleListDto.fromJS(item, _mappings));
            }
        }
    }

    static fromJS(data: any, _mappings?: any): ListResultDtoOfRoleListDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<ListResultDtoOfRoleListDto>(data, _mappings, ListResultDtoOfRoleListDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export class PermissionDto {
    name!: string | null;
    displayName!: string | null;
    description!: string | null;
    id!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.displayName = _data["displayName"] !== undefined ? _data["displayName"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): PermissionDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<PermissionDto>(data, _mappings, PermissionDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class ListResultDtoOfPermissionDto {
    items!: PermissionDto[] | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(PermissionDto.fromJS(item, _mappings));
            }
        }
    }

    static fromJS(data: any, _mappings?: any): ListResultDtoOfPermissionDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<ListResultDtoOfPermissionDto>(data, _mappings, ListResultDtoOfPermissionDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export class RoleEditDto {
    name!: string;
    displayName!: string;
    description!: string | null;
    isDefault!: boolean;
    isStatic!: boolean;
    id!: number | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.displayName = _data["displayName"] !== undefined ? _data["displayName"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.isDefault = _data["isDefault"] !== undefined ? _data["isDefault"] : <any>null;
            this.isStatic = _data["isStatic"] !== undefined ? _data["isStatic"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): RoleEditDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<RoleEditDto>(data, _mappings, RoleEditDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["isDefault"] = this.isDefault !== undefined ? this.isDefault : <any>null;
        data["isStatic"] = this.isStatic !== undefined ? this.isStatic : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class FlatPermissionDto {
    parentName!: string | null;
    name!: string | null;
    displayName!: string | null;
    description!: string | null;
    isGrantedByDefault!: boolean;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.parentName = _data["parentName"] !== undefined ? _data["parentName"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.displayName = _data["displayName"] !== undefined ? _data["displayName"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.isGrantedByDefault = _data["isGrantedByDefault"] !== undefined ? _data["isGrantedByDefault"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): FlatPermissionDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<FlatPermissionDto>(data, _mappings, FlatPermissionDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentName"] = this.parentName !== undefined ? this.parentName : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["isGrantedByDefault"] = this.isGrantedByDefault !== undefined ? this.isGrantedByDefault : <any>null;
        return data; 
    }
}

export class GetRoleForEditOutput {
    role!: RoleEditDto;
    permissions!: FlatPermissionDto[] | null;
    grantedPermissionNames!: string[] | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.role = _data["role"] ? RoleEditDto.fromJS(_data["role"], _mappings) : <any>null;
            if (Array.isArray(_data["permissions"])) {
                this.permissions = [] as any;
                for (let item of _data["permissions"])
                    this.permissions!.push(FlatPermissionDto.fromJS(item, _mappings));
            }
            if (Array.isArray(_data["grantedPermissionNames"])) {
                this.grantedPermissionNames = [] as any;
                for (let item of _data["grantedPermissionNames"])
                    this.grantedPermissionNames!.push(item);
            }
        }
    }

    static fromJS(data: any, _mappings?: any): GetRoleForEditOutput {
        data = typeof data === 'object' ? data : {};
        return createInstance<GetRoleForEditOutput>(data, _mappings, GetRoleForEditOutput);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["role"] = this.role ? this.role.toJSON() : <any>null;
        if (Array.isArray(this.permissions)) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item.toJSON());
        }
        if (Array.isArray(this.grantedPermissionNames)) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames)
                data["grantedPermissionNames"].push(item);
        }
        return data; 
    }
}

export class PagedResultDtoOfRoleDto {
    totalCount!: number;
    items!: RoleDto[] | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"] !== undefined ? _data["totalCount"] : <any>null;
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RoleDto.fromJS(item, _mappings));
            }
        }
    }

    static fromJS(data: any, _mappings?: any): PagedResultDtoOfRoleDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<PagedResultDtoOfRoleDto>(data, _mappings, PagedResultDtoOfRoleDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : <any>null;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export enum TargetType {
    Whole = 0,
    Team = 1,
    Personal = 2,
}

export class SalesDashboardTargetDto {
    sgid!: string | null;
    isReplace!: boolean;
    name!: string | null;
    repNum!: string | null;
    year!: number;
    r04Entry!: number;
    r04BGT!: number;
    r04Max!: number;
    r20Entry!: number;
    r20BGT!: number;
    r20Max!: number;
    validFrom!: Date;
    validTo!: Date;
    channel!: string | null;
    salesOffice!: string | null;
    isActive!: boolean;
    type!: TargetType;
    appear!: boolean;
    participateCalculation!: boolean;
    remarks!: string | null;
    version!: string | null;
    isQuit!: boolean;
    id!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.sgid = _data["sgid"] !== undefined ? _data["sgid"] : <any>null;
            this.isReplace = _data["isReplace"] !== undefined ? _data["isReplace"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.repNum = _data["repNum"] !== undefined ? _data["repNum"] : <any>null;
            this.year = _data["year"] !== undefined ? _data["year"] : <any>null;
            this.r04Entry = _data["r04Entry"] !== undefined ? _data["r04Entry"] : <any>null;
            this.r04BGT = _data["r04BGT"] !== undefined ? _data["r04BGT"] : <any>null;
            this.r04Max = _data["r04Max"] !== undefined ? _data["r04Max"] : <any>null;
            this.r20Entry = _data["r20Entry"] !== undefined ? _data["r20Entry"] : <any>null;
            this.r20BGT = _data["r20BGT"] !== undefined ? _data["r20BGT"] : <any>null;
            this.r20Max = _data["r20Max"] !== undefined ? _data["r20Max"] : <any>null;
            this.validFrom = _data["validFrom"] ? new Date(_data["validFrom"].toString()) : <any>null;
            this.validTo = _data["validTo"] ? new Date(_data["validTo"].toString()) : <any>null;
            this.channel = _data["channel"] !== undefined ? _data["channel"] : <any>null;
            this.salesOffice = _data["salesOffice"] !== undefined ? _data["salesOffice"] : <any>null;
            this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.appear = _data["appear"] !== undefined ? _data["appear"] : <any>null;
            this.participateCalculation = _data["participateCalculation"] !== undefined ? _data["participateCalculation"] : <any>null;
            this.remarks = _data["remarks"] !== undefined ? _data["remarks"] : <any>null;
            this.version = _data["version"] !== undefined ? _data["version"] : <any>null;
            this.isQuit = _data["isQuit"] !== undefined ? _data["isQuit"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): SalesDashboardTargetDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<SalesDashboardTargetDto>(data, _mappings, SalesDashboardTargetDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sgid"] = this.sgid !== undefined ? this.sgid : <any>null;
        data["isReplace"] = this.isReplace !== undefined ? this.isReplace : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["repNum"] = this.repNum !== undefined ? this.repNum : <any>null;
        data["year"] = this.year !== undefined ? this.year : <any>null;
        data["r04Entry"] = this.r04Entry !== undefined ? this.r04Entry : <any>null;
        data["r04BGT"] = this.r04BGT !== undefined ? this.r04BGT : <any>null;
        data["r04Max"] = this.r04Max !== undefined ? this.r04Max : <any>null;
        data["r20Entry"] = this.r20Entry !== undefined ? this.r20Entry : <any>null;
        data["r20BGT"] = this.r20BGT !== undefined ? this.r20BGT : <any>null;
        data["r20Max"] = this.r20Max !== undefined ? this.r20Max : <any>null;
        data["validFrom"] = this.validFrom ? this.validFrom.toISOString() : <any>null;
        data["validTo"] = this.validTo ? this.validTo.toISOString() : <any>null;
        data["channel"] = this.channel !== undefined ? this.channel : <any>null;
        data["salesOffice"] = this.salesOffice !== undefined ? this.salesOffice : <any>null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["appear"] = this.appear !== undefined ? this.appear : <any>null;
        data["participateCalculation"] = this.participateCalculation !== undefined ? this.participateCalculation : <any>null;
        data["remarks"] = this.remarks !== undefined ? this.remarks : <any>null;
        data["version"] = this.version !== undefined ? this.version : <any>null;
        data["isQuit"] = this.isQuit !== undefined ? this.isQuit : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class PagedResultDtoOfSalesDashboardTargetDto {
    totalCount!: number;
    items!: SalesDashboardTargetDto[] | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"] !== undefined ? _data["totalCount"] : <any>null;
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(SalesDashboardTargetDto.fromJS(item, _mappings));
            }
        }
    }

    static fromJS(data: any, _mappings?: any): PagedResultDtoOfSalesDashboardTargetDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<PagedResultDtoOfSalesDashboardTargetDto>(data, _mappings, PagedResultDtoOfSalesDashboardTargetDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : <any>null;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export class CreateOrEditSalesDashboardTargetDto {
    sgid!: string | null;
    isReplace!: boolean;
    name!: string | null;
    repNum!: string | null;
    year!: number;
    r04Entry!: number;
    r04BGT!: number;
    r04Max!: number;
    r20Entry!: number;
    r20BGT!: number;
    r20Max!: number;
    validFrom!: Date;
    validTo!: Date;
    channel!: string | null;
    salesOffice!: string | null;
    isActive!: boolean;
    type!: TargetType;
    appear!: boolean;
    participateCalculation!: boolean;
    remarks!: string | null;
    version!: string | null;
    isQuit!: boolean;
    id!: number | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.sgid = _data["sgid"] !== undefined ? _data["sgid"] : <any>null;
            this.isReplace = _data["isReplace"] !== undefined ? _data["isReplace"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.repNum = _data["repNum"] !== undefined ? _data["repNum"] : <any>null;
            this.year = _data["year"] !== undefined ? _data["year"] : <any>null;
            this.r04Entry = _data["r04Entry"] !== undefined ? _data["r04Entry"] : <any>null;
            this.r04BGT = _data["r04BGT"] !== undefined ? _data["r04BGT"] : <any>null;
            this.r04Max = _data["r04Max"] !== undefined ? _data["r04Max"] : <any>null;
            this.r20Entry = _data["r20Entry"] !== undefined ? _data["r20Entry"] : <any>null;
            this.r20BGT = _data["r20BGT"] !== undefined ? _data["r20BGT"] : <any>null;
            this.r20Max = _data["r20Max"] !== undefined ? _data["r20Max"] : <any>null;
            this.validFrom = _data["validFrom"] ? new Date(_data["validFrom"].toString()) : <any>null;
            this.validTo = _data["validTo"] ? new Date(_data["validTo"].toString()) : <any>null;
            this.channel = _data["channel"] !== undefined ? _data["channel"] : <any>null;
            this.salesOffice = _data["salesOffice"] !== undefined ? _data["salesOffice"] : <any>null;
            this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.appear = _data["appear"] !== undefined ? _data["appear"] : <any>null;
            this.participateCalculation = _data["participateCalculation"] !== undefined ? _data["participateCalculation"] : <any>null;
            this.remarks = _data["remarks"] !== undefined ? _data["remarks"] : <any>null;
            this.version = _data["version"] !== undefined ? _data["version"] : <any>null;
            this.isQuit = _data["isQuit"] !== undefined ? _data["isQuit"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): CreateOrEditSalesDashboardTargetDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<CreateOrEditSalesDashboardTargetDto>(data, _mappings, CreateOrEditSalesDashboardTargetDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sgid"] = this.sgid !== undefined ? this.sgid : <any>null;
        data["isReplace"] = this.isReplace !== undefined ? this.isReplace : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["repNum"] = this.repNum !== undefined ? this.repNum : <any>null;
        data["year"] = this.year !== undefined ? this.year : <any>null;
        data["r04Entry"] = this.r04Entry !== undefined ? this.r04Entry : <any>null;
        data["r04BGT"] = this.r04BGT !== undefined ? this.r04BGT : <any>null;
        data["r04Max"] = this.r04Max !== undefined ? this.r04Max : <any>null;
        data["r20Entry"] = this.r20Entry !== undefined ? this.r20Entry : <any>null;
        data["r20BGT"] = this.r20BGT !== undefined ? this.r20BGT : <any>null;
        data["r20Max"] = this.r20Max !== undefined ? this.r20Max : <any>null;
        data["validFrom"] = this.validFrom ? this.validFrom.toISOString() : <any>null;
        data["validTo"] = this.validTo ? this.validTo.toISOString() : <any>null;
        data["channel"] = this.channel !== undefined ? this.channel : <any>null;
        data["salesOffice"] = this.salesOffice !== undefined ? this.salesOffice : <any>null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["appear"] = this.appear !== undefined ? this.appear : <any>null;
        data["participateCalculation"] = this.participateCalculation !== undefined ? this.participateCalculation : <any>null;
        data["remarks"] = this.remarks !== undefined ? this.remarks : <any>null;
        data["version"] = this.version !== undefined ? this.version : <any>null;
        data["isQuit"] = this.isQuit !== undefined ? this.isQuit : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class SGIAndName {
    displayName!: string | null;
    sgid!: string | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.displayName = _data["displayName"] !== undefined ? _data["displayName"] : <any>null;
            this.sgid = _data["sgid"] !== undefined ? _data["sgid"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): SGIAndName {
        data = typeof data === 'object' ? data : {};
        return createInstance<SGIAndName>(data, _mappings, SGIAndName);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName !== undefined ? this.displayName : <any>null;
        data["sgid"] = this.sgid !== undefined ? this.sgid : <any>null;
        return data; 
    }
}

export class RepNumeAndName {
    salesOffice!: string | null;
    name!: string | null;
    repNum!: string | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.salesOffice = _data["salesOffice"] !== undefined ? _data["salesOffice"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.repNum = _data["repNum"] !== undefined ? _data["repNum"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): RepNumeAndName {
        data = typeof data === 'object' ? data : {};
        return createInstance<RepNumeAndName>(data, _mappings, RepNumeAndName);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["salesOffice"] = this.salesOffice !== undefined ? this.salesOffice : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["repNum"] = this.repNum !== undefined ? this.repNum : <any>null;
        return data; 
    }
}

export class SGIDZECodeMapping {
    id!: number;
    sgid!: string | null;
    cnName!: string | null;
    financeCode!: string | null;
    zeCode!: string | null;
    isDeleted!: boolean;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.sgid = _data["sgid"] !== undefined ? _data["sgid"] : <any>null;
            this.cnName = _data["cnName"] !== undefined ? _data["cnName"] : <any>null;
            this.financeCode = _data["financeCode"] !== undefined ? _data["financeCode"] : <any>null;
            this.zeCode = _data["zeCode"] !== undefined ? _data["zeCode"] : <any>null;
            this.isDeleted = _data["isDeleted"] !== undefined ? _data["isDeleted"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): SGIDZECodeMapping {
        data = typeof data === 'object' ? data : {};
        return createInstance<SGIDZECodeMapping>(data, _mappings, SGIDZECodeMapping);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["sgid"] = this.sgid !== undefined ? this.sgid : <any>null;
        data["cnName"] = this.cnName !== undefined ? this.cnName : <any>null;
        data["financeCode"] = this.financeCode !== undefined ? this.financeCode : <any>null;
        data["zeCode"] = this.zeCode !== undefined ? this.zeCode : <any>null;
        data["isDeleted"] = this.isDeleted !== undefined ? this.isDeleted : <any>null;
        return data; 
    }
}

export class ExportDashboardYTDValueTemplate {
    sumBy!: number;
    r04YtdMonth1!: number;
    r04YtdMonth2!: number;
    r04YtdMonth3!: number;
    r04YtdMonth4!: number;
    r04YtdMonth5!: number;
    r04YtdMonth6!: number;
    r04YtdMonth7!: number;
    r04YtdMonth8!: number;
    r04YtdMonth9!: number;
    r04YtdMonth10!: number;
    r04YtdMonth11!: number;
    r04YtdMonth12!: number;
    tapYtdMonth1!: number;
    tapYtdMonth2!: number;
    tapYtdMonth3!: number;
    tapYtdMonth4!: number;
    tapYtdMonth5!: number;
    tapYtdMonth6!: number;
    tapYtdMonth7!: number;
    tapYtdMonth8!: number;
    tapYtdMonth9!: number;
    tapYtdMonth10!: number;
    tapYtdMonth11!: number;
    tapYtdMonth12!: number;
    strateYTDMonth1!: number;
    strateYTDMonth2!: number;
    strateYTDMonth3!: number;
    strateYTDMonth4!: number;
    strateYTDMonth5!: number;
    strateYTDMonth6!: number;
    strateYTDMonth7!: number;
    strateYTDMonth8!: number;
    strateYTDMonth9!: number;
    strateYTDMonth10!: number;
    strateYTDMonth11!: number;
    strateYTDMonth12!: number;
    newCustCountYtdMonth1!: number;
    newCustCountYtdMonth2!: number;
    newCustCountYtdMonth3!: number;
    newCustCountYtdMonth4!: number;
    newCustCountYtdMonth5!: number;
    newCustCountYtdMonth6!: number;
    newCustCountYtdMonth7!: number;
    newCustCountYtdMonth8!: number;
    newCustCountYtdMonth9!: number;
    newCustCountYtdMonth10!: number;
    newCustCountYtdMonth11!: number;
    newCustCountYtdMonth12!: number;
    orderIndex!: number;
    relationNo!: number;
    parentRelation!: number;
    category!: string | null;
    teamGroupBy!: string | null;
    pkCategory!: string | null;
    sgi!: string | null;
    name!: string | null;
    channel!: string | null;
    salesOffice!: string | null;
    repNum!: string | null;
    period!: number;
    r04Month1!: number;
    r04Month2!: number;
    r04Month3!: number;
    r04Month4!: number;
    r04Month5!: number;
    r04Month6!: number;
    r04Month7!: number;
    r04Month8!: number;
    r04Month9!: number;
    r04Month10!: number;
    r04Month11!: number;
    r04Month12!: number;
    r04YTD!: number;
    r04YTDRatio!: number;
    r04Month1BGT!: number;
    r04Month2BGT!: number;
    r04Month3BGT!: number;
    r04Month4BGT!: number;
    r04Month5BGT!: number;
    r04Month6BGT!: number;
    r04Month7BGT!: number;
    r04Month8BGT!: number;
    r04Month9BGT!: number;
    r04Month10BGT!: number;
    r04Month11BGT!: number;
    r04Month12BGT!: number;
    r04ytdBGT!: number;
    r04Entry!: number;
    r04BGT!: number;
    r04Max!: number;
    r04MonthStartValue!: number;
    r04MonthEndValue!: number;
    r04YearStartValue!: number;
    r04YearEndValue!: number;
    r04Month1Light!: number;
    r04Month2Light!: number;
    r04Month3Light!: number;
    r04Month4Light!: number;
    r04Month5Light!: number;
    r04Month6Light!: number;
    r04Month7Light!: number;
    r04Month8Light!: number;
    r04Month9Light!: number;
    r04Month10Light!: number;
    r04Month11Light!: number;
    r04Month12Light!: number;
    r04ytdLight!: number;
    r04CurrentRanking!: string | null;
    r04Ranking!: string | null;
    r20Month1!: number;
    r20Month2!: number;
    r20Month3!: number;
    r20Month4!: number;
    r20Month5!: number;
    r20Month6!: number;
    r20Month7!: number;
    r20Month8!: number;
    r20Month9!: number;
    r20Month10!: number;
    r20Month11!: number;
    r20Month12!: number;
    r20YTDRatio!: number;
    r20YTD!: number;
    r20Month1BGT!: number;
    r20Month2BGT!: number;
    r20Month3BGT!: number;
    r20Month4BGT!: number;
    r20Month5BGT!: number;
    r20Month6BGT!: number;
    r20Month7BGT!: number;
    r20Month8BGT!: number;
    r20Month9BGT!: number;
    r20Month10BGT!: number;
    r20Month11BGT!: number;
    r20Month12BGT!: number;
    r20ytdBGT!: number;
    r20Entry!: number;
    r20BGT!: number;
    r20Max!: number;
    r20MonthStartValue!: number;
    r20MonthEndValue!: number;
    r20YearStartValue!: number;
    r20YearEndValue!: number;
    r20Month1Light!: number;
    r20Month2Light!: number;
    r20Month3Light!: number;
    r20Month4Light!: number;
    r20Month5Light!: number;
    r20Month6Light!: number;
    r20Month7Light!: number;
    r20Month8Light!: number;
    r20Month9Light!: number;
    r20Month10Light!: number;
    r20Month11Light!: number;
    r20Month12Light!: number;
    r20ytdLight!: number;
    r20CurrentRanking!: string | null;
    r20Ranking!: string | null;
    newoppMonth1!: number;
    newoppMonth2!: number;
    newoppMonth3!: number;
    newoppMonth4!: number;
    newoppMonth5!: number;
    newoppMonth6!: number;
    newoppMonth7!: number;
    newoppMonth8!: number;
    newoppMonth9!: number;
    newoppMonth10!: number;
    newoppMonth11!: number;
    newoppMonth12!: number;
    newoppYTD!: number;
    newoppoMonthStartValue!: number;
    newoppoMonthEndValue!: number;
    newoppoYearStartValue!: number;
    newoppoYearEndValue!: number;
    newoppMonth1Light!: number;
    newoppMonth2Light!: number;
    newoppMonth3Light!: number;
    newoppMonth4Light!: number;
    newoppMonth5Light!: number;
    newoppMonth6Light!: number;
    newoppMonth7Light!: number;
    newoppMonth8Light!: number;
    newoppMonth9Light!: number;
    newoppMonth10Light!: number;
    newoppMonth11Light!: number;
    newoppMonth12Light!: number;
    newoppytdLight!: number;
    newoppRanking!: string | null;
    visitMonth1!: number;
    visitMonth2!: number;
    visitMonth3!: number;
    visitMonth4!: number;
    visitMonth5!: number;
    visitMonth6!: number;
    visitMonth7!: number;
    visitMonth8!: number;
    visitMonth9!: number;
    visitMonth10!: number;
    visitMonth11!: number;
    visitMonth12!: number;
    visitYTD!: number;
    visitMonthStartValue!: number;
    visitMonthEndValue!: number;
    visitYearStartValue!: number;
    visitYearEndValue!: number;
    visitMonth1Light!: number;
    visitMonth2Light!: number;
    visitMonth3Light!: number;
    visitMonth4Light!: number;
    visitMonth5Light!: number;
    visitMonth6Light!: number;
    visitMonth7Light!: number;
    visitMonth8Light!: number;
    visitMonth9Light!: number;
    visitMonth10Light!: number;
    visitMonth11Light!: number;
    visitMonth12Light!: number;
    visitytdLight!: number;
    visitRanking!: string | null;
    inquiriesTotal!: number;
    orderCount!: number;
    conversionRate!: number;
    conversionMoney!: number;
    conversionRanking!: string | null;
    tapMonth1!: number;
    tapMonth2!: number;
    tapMonth3!: number;
    tapMonth4!: number;
    tapMonth5!: number;
    tapMonth6!: number;
    tapMonth7!: number;
    tapMonth8!: number;
    tapMonth9!: number;
    tapMonth10!: number;
    tapMonth11!: number;
    tapMonth12!: number;
    tapYTD!: number;
    tapR04Proportion!: number;
    tapRanking!: string | null;
    strateMonth1!: number;
    strateMonth2!: number;
    strateMonth3!: number;
    strateMonth4!: number;
    strateMonth5!: number;
    strateMonth6!: number;
    strateMonth7!: number;
    strateMonth8!: number;
    strateMonth9!: number;
    strateMonth10!: number;
    strateMonth11!: number;
    strateMonth12!: number;
    strateYTD!: number;
    strateR04Proportion!: number;
    strateRanking!: string | null;
    newcusMonth1!: number;
    newcusMonth2!: number;
    newcusMonth3!: number;
    newcusMonth4!: number;
    newcusMonth5!: number;
    newcusMonth6!: number;
    newcusMonth7!: number;
    newcusMonth8!: number;
    newcusMonth9!: number;
    newcusMonth10!: number;
    newcusMonth11!: number;
    newcusMonth12!: number;
    newcusYTD!: number;
    newCustYTDzl!: number;
    newCustCount!: number;
    newCusRanking!: string | null;
    newCustYTDzlRanking!: string | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.sumBy = _data["sumBy"] !== undefined ? _data["sumBy"] : <any>null;
            this.r04YtdMonth1 = _data["r04YtdMonth1"] !== undefined ? _data["r04YtdMonth1"] : <any>null;
            this.r04YtdMonth2 = _data["r04YtdMonth2"] !== undefined ? _data["r04YtdMonth2"] : <any>null;
            this.r04YtdMonth3 = _data["r04YtdMonth3"] !== undefined ? _data["r04YtdMonth3"] : <any>null;
            this.r04YtdMonth4 = _data["r04YtdMonth4"] !== undefined ? _data["r04YtdMonth4"] : <any>null;
            this.r04YtdMonth5 = _data["r04YtdMonth5"] !== undefined ? _data["r04YtdMonth5"] : <any>null;
            this.r04YtdMonth6 = _data["r04YtdMonth6"] !== undefined ? _data["r04YtdMonth6"] : <any>null;
            this.r04YtdMonth7 = _data["r04YtdMonth7"] !== undefined ? _data["r04YtdMonth7"] : <any>null;
            this.r04YtdMonth8 = _data["r04YtdMonth8"] !== undefined ? _data["r04YtdMonth8"] : <any>null;
            this.r04YtdMonth9 = _data["r04YtdMonth9"] !== undefined ? _data["r04YtdMonth9"] : <any>null;
            this.r04YtdMonth10 = _data["r04YtdMonth10"] !== undefined ? _data["r04YtdMonth10"] : <any>null;
            this.r04YtdMonth11 = _data["r04YtdMonth11"] !== undefined ? _data["r04YtdMonth11"] : <any>null;
            this.r04YtdMonth12 = _data["r04YtdMonth12"] !== undefined ? _data["r04YtdMonth12"] : <any>null;
            this.tapYtdMonth1 = _data["tapYtdMonth1"] !== undefined ? _data["tapYtdMonth1"] : <any>null;
            this.tapYtdMonth2 = _data["tapYtdMonth2"] !== undefined ? _data["tapYtdMonth2"] : <any>null;
            this.tapYtdMonth3 = _data["tapYtdMonth3"] !== undefined ? _data["tapYtdMonth3"] : <any>null;
            this.tapYtdMonth4 = _data["tapYtdMonth4"] !== undefined ? _data["tapYtdMonth4"] : <any>null;
            this.tapYtdMonth5 = _data["tapYtdMonth5"] !== undefined ? _data["tapYtdMonth5"] : <any>null;
            this.tapYtdMonth6 = _data["tapYtdMonth6"] !== undefined ? _data["tapYtdMonth6"] : <any>null;
            this.tapYtdMonth7 = _data["tapYtdMonth7"] !== undefined ? _data["tapYtdMonth7"] : <any>null;
            this.tapYtdMonth8 = _data["tapYtdMonth8"] !== undefined ? _data["tapYtdMonth8"] : <any>null;
            this.tapYtdMonth9 = _data["tapYtdMonth9"] !== undefined ? _data["tapYtdMonth9"] : <any>null;
            this.tapYtdMonth10 = _data["tapYtdMonth10"] !== undefined ? _data["tapYtdMonth10"] : <any>null;
            this.tapYtdMonth11 = _data["tapYtdMonth11"] !== undefined ? _data["tapYtdMonth11"] : <any>null;
            this.tapYtdMonth12 = _data["tapYtdMonth12"] !== undefined ? _data["tapYtdMonth12"] : <any>null;
            this.strateYTDMonth1 = _data["strateYTDMonth1"] !== undefined ? _data["strateYTDMonth1"] : <any>null;
            this.strateYTDMonth2 = _data["strateYTDMonth2"] !== undefined ? _data["strateYTDMonth2"] : <any>null;
            this.strateYTDMonth3 = _data["strateYTDMonth3"] !== undefined ? _data["strateYTDMonth3"] : <any>null;
            this.strateYTDMonth4 = _data["strateYTDMonth4"] !== undefined ? _data["strateYTDMonth4"] : <any>null;
            this.strateYTDMonth5 = _data["strateYTDMonth5"] !== undefined ? _data["strateYTDMonth5"] : <any>null;
            this.strateYTDMonth6 = _data["strateYTDMonth6"] !== undefined ? _data["strateYTDMonth6"] : <any>null;
            this.strateYTDMonth7 = _data["strateYTDMonth7"] !== undefined ? _data["strateYTDMonth7"] : <any>null;
            this.strateYTDMonth8 = _data["strateYTDMonth8"] !== undefined ? _data["strateYTDMonth8"] : <any>null;
            this.strateYTDMonth9 = _data["strateYTDMonth9"] !== undefined ? _data["strateYTDMonth9"] : <any>null;
            this.strateYTDMonth10 = _data["strateYTDMonth10"] !== undefined ? _data["strateYTDMonth10"] : <any>null;
            this.strateYTDMonth11 = _data["strateYTDMonth11"] !== undefined ? _data["strateYTDMonth11"] : <any>null;
            this.strateYTDMonth12 = _data["strateYTDMonth12"] !== undefined ? _data["strateYTDMonth12"] : <any>null;
            this.newCustCountYtdMonth1 = _data["newCustCountYtdMonth1"] !== undefined ? _data["newCustCountYtdMonth1"] : <any>null;
            this.newCustCountYtdMonth2 = _data["newCustCountYtdMonth2"] !== undefined ? _data["newCustCountYtdMonth2"] : <any>null;
            this.newCustCountYtdMonth3 = _data["newCustCountYtdMonth3"] !== undefined ? _data["newCustCountYtdMonth3"] : <any>null;
            this.newCustCountYtdMonth4 = _data["newCustCountYtdMonth4"] !== undefined ? _data["newCustCountYtdMonth4"] : <any>null;
            this.newCustCountYtdMonth5 = _data["newCustCountYtdMonth5"] !== undefined ? _data["newCustCountYtdMonth5"] : <any>null;
            this.newCustCountYtdMonth6 = _data["newCustCountYtdMonth6"] !== undefined ? _data["newCustCountYtdMonth6"] : <any>null;
            this.newCustCountYtdMonth7 = _data["newCustCountYtdMonth7"] !== undefined ? _data["newCustCountYtdMonth7"] : <any>null;
            this.newCustCountYtdMonth8 = _data["newCustCountYtdMonth8"] !== undefined ? _data["newCustCountYtdMonth8"] : <any>null;
            this.newCustCountYtdMonth9 = _data["newCustCountYtdMonth9"] !== undefined ? _data["newCustCountYtdMonth9"] : <any>null;
            this.newCustCountYtdMonth10 = _data["newCustCountYtdMonth10"] !== undefined ? _data["newCustCountYtdMonth10"] : <any>null;
            this.newCustCountYtdMonth11 = _data["newCustCountYtdMonth11"] !== undefined ? _data["newCustCountYtdMonth11"] : <any>null;
            this.newCustCountYtdMonth12 = _data["newCustCountYtdMonth12"] !== undefined ? _data["newCustCountYtdMonth12"] : <any>null;
            this.orderIndex = _data["orderIndex"] !== undefined ? _data["orderIndex"] : <any>null;
            this.relationNo = _data["relationNo"] !== undefined ? _data["relationNo"] : <any>null;
            this.parentRelation = _data["parentRelation"] !== undefined ? _data["parentRelation"] : <any>null;
            this.category = _data["category"] !== undefined ? _data["category"] : <any>null;
            this.teamGroupBy = _data["teamGroupBy"] !== undefined ? _data["teamGroupBy"] : <any>null;
            this.pkCategory = _data["pkCategory"] !== undefined ? _data["pkCategory"] : <any>null;
            this.sgi = _data["sgi"] !== undefined ? _data["sgi"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.channel = _data["channel"] !== undefined ? _data["channel"] : <any>null;
            this.salesOffice = _data["salesOffice"] !== undefined ? _data["salesOffice"] : <any>null;
            this.repNum = _data["repNum"] !== undefined ? _data["repNum"] : <any>null;
            this.period = _data["period"] !== undefined ? _data["period"] : <any>null;
            this.r04Month1 = _data["r04Month1"] !== undefined ? _data["r04Month1"] : <any>null;
            this.r04Month2 = _data["r04Month2"] !== undefined ? _data["r04Month2"] : <any>null;
            this.r04Month3 = _data["r04Month3"] !== undefined ? _data["r04Month3"] : <any>null;
            this.r04Month4 = _data["r04Month4"] !== undefined ? _data["r04Month4"] : <any>null;
            this.r04Month5 = _data["r04Month5"] !== undefined ? _data["r04Month5"] : <any>null;
            this.r04Month6 = _data["r04Month6"] !== undefined ? _data["r04Month6"] : <any>null;
            this.r04Month7 = _data["r04Month7"] !== undefined ? _data["r04Month7"] : <any>null;
            this.r04Month8 = _data["r04Month8"] !== undefined ? _data["r04Month8"] : <any>null;
            this.r04Month9 = _data["r04Month9"] !== undefined ? _data["r04Month9"] : <any>null;
            this.r04Month10 = _data["r04Month10"] !== undefined ? _data["r04Month10"] : <any>null;
            this.r04Month11 = _data["r04Month11"] !== undefined ? _data["r04Month11"] : <any>null;
            this.r04Month12 = _data["r04Month12"] !== undefined ? _data["r04Month12"] : <any>null;
            this.r04YTD = _data["r04YTD"] !== undefined ? _data["r04YTD"] : <any>null;
            this.r04YTDRatio = _data["r04YTDRatio"] !== undefined ? _data["r04YTDRatio"] : <any>null;
            this.r04Month1BGT = _data["r04Month1BGT"] !== undefined ? _data["r04Month1BGT"] : <any>null;
            this.r04Month2BGT = _data["r04Month2BGT"] !== undefined ? _data["r04Month2BGT"] : <any>null;
            this.r04Month3BGT = _data["r04Month3BGT"] !== undefined ? _data["r04Month3BGT"] : <any>null;
            this.r04Month4BGT = _data["r04Month4BGT"] !== undefined ? _data["r04Month4BGT"] : <any>null;
            this.r04Month5BGT = _data["r04Month5BGT"] !== undefined ? _data["r04Month5BGT"] : <any>null;
            this.r04Month6BGT = _data["r04Month6BGT"] !== undefined ? _data["r04Month6BGT"] : <any>null;
            this.r04Month7BGT = _data["r04Month7BGT"] !== undefined ? _data["r04Month7BGT"] : <any>null;
            this.r04Month8BGT = _data["r04Month8BGT"] !== undefined ? _data["r04Month8BGT"] : <any>null;
            this.r04Month9BGT = _data["r04Month9BGT"] !== undefined ? _data["r04Month9BGT"] : <any>null;
            this.r04Month10BGT = _data["r04Month10BGT"] !== undefined ? _data["r04Month10BGT"] : <any>null;
            this.r04Month11BGT = _data["r04Month11BGT"] !== undefined ? _data["r04Month11BGT"] : <any>null;
            this.r04Month12BGT = _data["r04Month12BGT"] !== undefined ? _data["r04Month12BGT"] : <any>null;
            this.r04ytdBGT = _data["r04ytdBGT"] !== undefined ? _data["r04ytdBGT"] : <any>null;
            this.r04Entry = _data["r04Entry"] !== undefined ? _data["r04Entry"] : <any>null;
            this.r04BGT = _data["r04BGT"] !== undefined ? _data["r04BGT"] : <any>null;
            this.r04Max = _data["r04Max"] !== undefined ? _data["r04Max"] : <any>null;
            this.r04MonthStartValue = _data["r04MonthStartValue"] !== undefined ? _data["r04MonthStartValue"] : <any>null;
            this.r04MonthEndValue = _data["r04MonthEndValue"] !== undefined ? _data["r04MonthEndValue"] : <any>null;
            this.r04YearStartValue = _data["r04YearStartValue"] !== undefined ? _data["r04YearStartValue"] : <any>null;
            this.r04YearEndValue = _data["r04YearEndValue"] !== undefined ? _data["r04YearEndValue"] : <any>null;
            this.r04Month1Light = _data["r04Month1Light"] !== undefined ? _data["r04Month1Light"] : <any>null;
            this.r04Month2Light = _data["r04Month2Light"] !== undefined ? _data["r04Month2Light"] : <any>null;
            this.r04Month3Light = _data["r04Month3Light"] !== undefined ? _data["r04Month3Light"] : <any>null;
            this.r04Month4Light = _data["r04Month4Light"] !== undefined ? _data["r04Month4Light"] : <any>null;
            this.r04Month5Light = _data["r04Month5Light"] !== undefined ? _data["r04Month5Light"] : <any>null;
            this.r04Month6Light = _data["r04Month6Light"] !== undefined ? _data["r04Month6Light"] : <any>null;
            this.r04Month7Light = _data["r04Month7Light"] !== undefined ? _data["r04Month7Light"] : <any>null;
            this.r04Month8Light = _data["r04Month8Light"] !== undefined ? _data["r04Month8Light"] : <any>null;
            this.r04Month9Light = _data["r04Month9Light"] !== undefined ? _data["r04Month9Light"] : <any>null;
            this.r04Month10Light = _data["r04Month10Light"] !== undefined ? _data["r04Month10Light"] : <any>null;
            this.r04Month11Light = _data["r04Month11Light"] !== undefined ? _data["r04Month11Light"] : <any>null;
            this.r04Month12Light = _data["r04Month12Light"] !== undefined ? _data["r04Month12Light"] : <any>null;
            this.r04ytdLight = _data["r04ytdLight"] !== undefined ? _data["r04ytdLight"] : <any>null;
            this.r04CurrentRanking = _data["r04CurrentRanking"] !== undefined ? _data["r04CurrentRanking"] : <any>null;
            this.r04Ranking = _data["r04Ranking"] !== undefined ? _data["r04Ranking"] : <any>null;
            this.r20Month1 = _data["r20Month1"] !== undefined ? _data["r20Month1"] : <any>null;
            this.r20Month2 = _data["r20Month2"] !== undefined ? _data["r20Month2"] : <any>null;
            this.r20Month3 = _data["r20Month3"] !== undefined ? _data["r20Month3"] : <any>null;
            this.r20Month4 = _data["r20Month4"] !== undefined ? _data["r20Month4"] : <any>null;
            this.r20Month5 = _data["r20Month5"] !== undefined ? _data["r20Month5"] : <any>null;
            this.r20Month6 = _data["r20Month6"] !== undefined ? _data["r20Month6"] : <any>null;
            this.r20Month7 = _data["r20Month7"] !== undefined ? _data["r20Month7"] : <any>null;
            this.r20Month8 = _data["r20Month8"] !== undefined ? _data["r20Month8"] : <any>null;
            this.r20Month9 = _data["r20Month9"] !== undefined ? _data["r20Month9"] : <any>null;
            this.r20Month10 = _data["r20Month10"] !== undefined ? _data["r20Month10"] : <any>null;
            this.r20Month11 = _data["r20Month11"] !== undefined ? _data["r20Month11"] : <any>null;
            this.r20Month12 = _data["r20Month12"] !== undefined ? _data["r20Month12"] : <any>null;
            this.r20YTDRatio = _data["r20YTDRatio"] !== undefined ? _data["r20YTDRatio"] : <any>null;
            this.r20YTD = _data["r20YTD"] !== undefined ? _data["r20YTD"] : <any>null;
            this.r20Month1BGT = _data["r20Month1BGT"] !== undefined ? _data["r20Month1BGT"] : <any>null;
            this.r20Month2BGT = _data["r20Month2BGT"] !== undefined ? _data["r20Month2BGT"] : <any>null;
            this.r20Month3BGT = _data["r20Month3BGT"] !== undefined ? _data["r20Month3BGT"] : <any>null;
            this.r20Month4BGT = _data["r20Month4BGT"] !== undefined ? _data["r20Month4BGT"] : <any>null;
            this.r20Month5BGT = _data["r20Month5BGT"] !== undefined ? _data["r20Month5BGT"] : <any>null;
            this.r20Month6BGT = _data["r20Month6BGT"] !== undefined ? _data["r20Month6BGT"] : <any>null;
            this.r20Month7BGT = _data["r20Month7BGT"] !== undefined ? _data["r20Month7BGT"] : <any>null;
            this.r20Month8BGT = _data["r20Month8BGT"] !== undefined ? _data["r20Month8BGT"] : <any>null;
            this.r20Month9BGT = _data["r20Month9BGT"] !== undefined ? _data["r20Month9BGT"] : <any>null;
            this.r20Month10BGT = _data["r20Month10BGT"] !== undefined ? _data["r20Month10BGT"] : <any>null;
            this.r20Month11BGT = _data["r20Month11BGT"] !== undefined ? _data["r20Month11BGT"] : <any>null;
            this.r20Month12BGT = _data["r20Month12BGT"] !== undefined ? _data["r20Month12BGT"] : <any>null;
            this.r20ytdBGT = _data["r20ytdBGT"] !== undefined ? _data["r20ytdBGT"] : <any>null;
            this.r20Entry = _data["r20Entry"] !== undefined ? _data["r20Entry"] : <any>null;
            this.r20BGT = _data["r20BGT"] !== undefined ? _data["r20BGT"] : <any>null;
            this.r20Max = _data["r20Max"] !== undefined ? _data["r20Max"] : <any>null;
            this.r20MonthStartValue = _data["r20MonthStartValue"] !== undefined ? _data["r20MonthStartValue"] : <any>null;
            this.r20MonthEndValue = _data["r20MonthEndValue"] !== undefined ? _data["r20MonthEndValue"] : <any>null;
            this.r20YearStartValue = _data["r20YearStartValue"] !== undefined ? _data["r20YearStartValue"] : <any>null;
            this.r20YearEndValue = _data["r20YearEndValue"] !== undefined ? _data["r20YearEndValue"] : <any>null;
            this.r20Month1Light = _data["r20Month1Light"] !== undefined ? _data["r20Month1Light"] : <any>null;
            this.r20Month2Light = _data["r20Month2Light"] !== undefined ? _data["r20Month2Light"] : <any>null;
            this.r20Month3Light = _data["r20Month3Light"] !== undefined ? _data["r20Month3Light"] : <any>null;
            this.r20Month4Light = _data["r20Month4Light"] !== undefined ? _data["r20Month4Light"] : <any>null;
            this.r20Month5Light = _data["r20Month5Light"] !== undefined ? _data["r20Month5Light"] : <any>null;
            this.r20Month6Light = _data["r20Month6Light"] !== undefined ? _data["r20Month6Light"] : <any>null;
            this.r20Month7Light = _data["r20Month7Light"] !== undefined ? _data["r20Month7Light"] : <any>null;
            this.r20Month8Light = _data["r20Month8Light"] !== undefined ? _data["r20Month8Light"] : <any>null;
            this.r20Month9Light = _data["r20Month9Light"] !== undefined ? _data["r20Month9Light"] : <any>null;
            this.r20Month10Light = _data["r20Month10Light"] !== undefined ? _data["r20Month10Light"] : <any>null;
            this.r20Month11Light = _data["r20Month11Light"] !== undefined ? _data["r20Month11Light"] : <any>null;
            this.r20Month12Light = _data["r20Month12Light"] !== undefined ? _data["r20Month12Light"] : <any>null;
            this.r20ytdLight = _data["r20ytdLight"] !== undefined ? _data["r20ytdLight"] : <any>null;
            this.r20CurrentRanking = _data["r20CurrentRanking"] !== undefined ? _data["r20CurrentRanking"] : <any>null;
            this.r20Ranking = _data["r20Ranking"] !== undefined ? _data["r20Ranking"] : <any>null;
            this.newoppMonth1 = _data["newoppMonth1"] !== undefined ? _data["newoppMonth1"] : <any>null;
            this.newoppMonth2 = _data["newoppMonth2"] !== undefined ? _data["newoppMonth2"] : <any>null;
            this.newoppMonth3 = _data["newoppMonth3"] !== undefined ? _data["newoppMonth3"] : <any>null;
            this.newoppMonth4 = _data["newoppMonth4"] !== undefined ? _data["newoppMonth4"] : <any>null;
            this.newoppMonth5 = _data["newoppMonth5"] !== undefined ? _data["newoppMonth5"] : <any>null;
            this.newoppMonth6 = _data["newoppMonth6"] !== undefined ? _data["newoppMonth6"] : <any>null;
            this.newoppMonth7 = _data["newoppMonth7"] !== undefined ? _data["newoppMonth7"] : <any>null;
            this.newoppMonth8 = _data["newoppMonth8"] !== undefined ? _data["newoppMonth8"] : <any>null;
            this.newoppMonth9 = _data["newoppMonth9"] !== undefined ? _data["newoppMonth9"] : <any>null;
            this.newoppMonth10 = _data["newoppMonth10"] !== undefined ? _data["newoppMonth10"] : <any>null;
            this.newoppMonth11 = _data["newoppMonth11"] !== undefined ? _data["newoppMonth11"] : <any>null;
            this.newoppMonth12 = _data["newoppMonth12"] !== undefined ? _data["newoppMonth12"] : <any>null;
            this.newoppYTD = _data["newoppYTD"] !== undefined ? _data["newoppYTD"] : <any>null;
            this.newoppoMonthStartValue = _data["newoppoMonthStartValue"] !== undefined ? _data["newoppoMonthStartValue"] : <any>null;
            this.newoppoMonthEndValue = _data["newoppoMonthEndValue"] !== undefined ? _data["newoppoMonthEndValue"] : <any>null;
            this.newoppoYearStartValue = _data["newoppoYearStartValue"] !== undefined ? _data["newoppoYearStartValue"] : <any>null;
            this.newoppoYearEndValue = _data["newoppoYearEndValue"] !== undefined ? _data["newoppoYearEndValue"] : <any>null;
            this.newoppMonth1Light = _data["newoppMonth1Light"] !== undefined ? _data["newoppMonth1Light"] : <any>null;
            this.newoppMonth2Light = _data["newoppMonth2Light"] !== undefined ? _data["newoppMonth2Light"] : <any>null;
            this.newoppMonth3Light = _data["newoppMonth3Light"] !== undefined ? _data["newoppMonth3Light"] : <any>null;
            this.newoppMonth4Light = _data["newoppMonth4Light"] !== undefined ? _data["newoppMonth4Light"] : <any>null;
            this.newoppMonth5Light = _data["newoppMonth5Light"] !== undefined ? _data["newoppMonth5Light"] : <any>null;
            this.newoppMonth6Light = _data["newoppMonth6Light"] !== undefined ? _data["newoppMonth6Light"] : <any>null;
            this.newoppMonth7Light = _data["newoppMonth7Light"] !== undefined ? _data["newoppMonth7Light"] : <any>null;
            this.newoppMonth8Light = _data["newoppMonth8Light"] !== undefined ? _data["newoppMonth8Light"] : <any>null;
            this.newoppMonth9Light = _data["newoppMonth9Light"] !== undefined ? _data["newoppMonth9Light"] : <any>null;
            this.newoppMonth10Light = _data["newoppMonth10Light"] !== undefined ? _data["newoppMonth10Light"] : <any>null;
            this.newoppMonth11Light = _data["newoppMonth11Light"] !== undefined ? _data["newoppMonth11Light"] : <any>null;
            this.newoppMonth12Light = _data["newoppMonth12Light"] !== undefined ? _data["newoppMonth12Light"] : <any>null;
            this.newoppytdLight = _data["newoppytdLight"] !== undefined ? _data["newoppytdLight"] : <any>null;
            this.newoppRanking = _data["newoppRanking"] !== undefined ? _data["newoppRanking"] : <any>null;
            this.visitMonth1 = _data["visitMonth1"] !== undefined ? _data["visitMonth1"] : <any>null;
            this.visitMonth2 = _data["visitMonth2"] !== undefined ? _data["visitMonth2"] : <any>null;
            this.visitMonth3 = _data["visitMonth3"] !== undefined ? _data["visitMonth3"] : <any>null;
            this.visitMonth4 = _data["visitMonth4"] !== undefined ? _data["visitMonth4"] : <any>null;
            this.visitMonth5 = _data["visitMonth5"] !== undefined ? _data["visitMonth5"] : <any>null;
            this.visitMonth6 = _data["visitMonth6"] !== undefined ? _data["visitMonth6"] : <any>null;
            this.visitMonth7 = _data["visitMonth7"] !== undefined ? _data["visitMonth7"] : <any>null;
            this.visitMonth8 = _data["visitMonth8"] !== undefined ? _data["visitMonth8"] : <any>null;
            this.visitMonth9 = _data["visitMonth9"] !== undefined ? _data["visitMonth9"] : <any>null;
            this.visitMonth10 = _data["visitMonth10"] !== undefined ? _data["visitMonth10"] : <any>null;
            this.visitMonth11 = _data["visitMonth11"] !== undefined ? _data["visitMonth11"] : <any>null;
            this.visitMonth12 = _data["visitMonth12"] !== undefined ? _data["visitMonth12"] : <any>null;
            this.visitYTD = _data["visitYTD"] !== undefined ? _data["visitYTD"] : <any>null;
            this.visitMonthStartValue = _data["visitMonthStartValue"] !== undefined ? _data["visitMonthStartValue"] : <any>null;
            this.visitMonthEndValue = _data["visitMonthEndValue"] !== undefined ? _data["visitMonthEndValue"] : <any>null;
            this.visitYearStartValue = _data["visitYearStartValue"] !== undefined ? _data["visitYearStartValue"] : <any>null;
            this.visitYearEndValue = _data["visitYearEndValue"] !== undefined ? _data["visitYearEndValue"] : <any>null;
            this.visitMonth1Light = _data["visitMonth1Light"] !== undefined ? _data["visitMonth1Light"] : <any>null;
            this.visitMonth2Light = _data["visitMonth2Light"] !== undefined ? _data["visitMonth2Light"] : <any>null;
            this.visitMonth3Light = _data["visitMonth3Light"] !== undefined ? _data["visitMonth3Light"] : <any>null;
            this.visitMonth4Light = _data["visitMonth4Light"] !== undefined ? _data["visitMonth4Light"] : <any>null;
            this.visitMonth5Light = _data["visitMonth5Light"] !== undefined ? _data["visitMonth5Light"] : <any>null;
            this.visitMonth6Light = _data["visitMonth6Light"] !== undefined ? _data["visitMonth6Light"] : <any>null;
            this.visitMonth7Light = _data["visitMonth7Light"] !== undefined ? _data["visitMonth7Light"] : <any>null;
            this.visitMonth8Light = _data["visitMonth8Light"] !== undefined ? _data["visitMonth8Light"] : <any>null;
            this.visitMonth9Light = _data["visitMonth9Light"] !== undefined ? _data["visitMonth9Light"] : <any>null;
            this.visitMonth10Light = _data["visitMonth10Light"] !== undefined ? _data["visitMonth10Light"] : <any>null;
            this.visitMonth11Light = _data["visitMonth11Light"] !== undefined ? _data["visitMonth11Light"] : <any>null;
            this.visitMonth12Light = _data["visitMonth12Light"] !== undefined ? _data["visitMonth12Light"] : <any>null;
            this.visitytdLight = _data["visitytdLight"] !== undefined ? _data["visitytdLight"] : <any>null;
            this.visitRanking = _data["visitRanking"] !== undefined ? _data["visitRanking"] : <any>null;
            this.inquiriesTotal = _data["inquiriesTotal"] !== undefined ? _data["inquiriesTotal"] : <any>null;
            this.orderCount = _data["orderCount"] !== undefined ? _data["orderCount"] : <any>null;
            this.conversionRate = _data["conversionRate"] !== undefined ? _data["conversionRate"] : <any>null;
            this.conversionMoney = _data["conversionMoney"] !== undefined ? _data["conversionMoney"] : <any>null;
            this.conversionRanking = _data["conversionRanking"] !== undefined ? _data["conversionRanking"] : <any>null;
            this.tapMonth1 = _data["tapMonth1"] !== undefined ? _data["tapMonth1"] : <any>null;
            this.tapMonth2 = _data["tapMonth2"] !== undefined ? _data["tapMonth2"] : <any>null;
            this.tapMonth3 = _data["tapMonth3"] !== undefined ? _data["tapMonth3"] : <any>null;
            this.tapMonth4 = _data["tapMonth4"] !== undefined ? _data["tapMonth4"] : <any>null;
            this.tapMonth5 = _data["tapMonth5"] !== undefined ? _data["tapMonth5"] : <any>null;
            this.tapMonth6 = _data["tapMonth6"] !== undefined ? _data["tapMonth6"] : <any>null;
            this.tapMonth7 = _data["tapMonth7"] !== undefined ? _data["tapMonth7"] : <any>null;
            this.tapMonth8 = _data["tapMonth8"] !== undefined ? _data["tapMonth8"] : <any>null;
            this.tapMonth9 = _data["tapMonth9"] !== undefined ? _data["tapMonth9"] : <any>null;
            this.tapMonth10 = _data["tapMonth10"] !== undefined ? _data["tapMonth10"] : <any>null;
            this.tapMonth11 = _data["tapMonth11"] !== undefined ? _data["tapMonth11"] : <any>null;
            this.tapMonth12 = _data["tapMonth12"] !== undefined ? _data["tapMonth12"] : <any>null;
            this.tapYTD = _data["tapYTD"] !== undefined ? _data["tapYTD"] : <any>null;
            this.tapR04Proportion = _data["tapR04Proportion"] !== undefined ? _data["tapR04Proportion"] : <any>null;
            this.tapRanking = _data["tapRanking"] !== undefined ? _data["tapRanking"] : <any>null;
            this.strateMonth1 = _data["strateMonth1"] !== undefined ? _data["strateMonth1"] : <any>null;
            this.strateMonth2 = _data["strateMonth2"] !== undefined ? _data["strateMonth2"] : <any>null;
            this.strateMonth3 = _data["strateMonth3"] !== undefined ? _data["strateMonth3"] : <any>null;
            this.strateMonth4 = _data["strateMonth4"] !== undefined ? _data["strateMonth4"] : <any>null;
            this.strateMonth5 = _data["strateMonth5"] !== undefined ? _data["strateMonth5"] : <any>null;
            this.strateMonth6 = _data["strateMonth6"] !== undefined ? _data["strateMonth6"] : <any>null;
            this.strateMonth7 = _data["strateMonth7"] !== undefined ? _data["strateMonth7"] : <any>null;
            this.strateMonth8 = _data["strateMonth8"] !== undefined ? _data["strateMonth8"] : <any>null;
            this.strateMonth9 = _data["strateMonth9"] !== undefined ? _data["strateMonth9"] : <any>null;
            this.strateMonth10 = _data["strateMonth10"] !== undefined ? _data["strateMonth10"] : <any>null;
            this.strateMonth11 = _data["strateMonth11"] !== undefined ? _data["strateMonth11"] : <any>null;
            this.strateMonth12 = _data["strateMonth12"] !== undefined ? _data["strateMonth12"] : <any>null;
            this.strateYTD = _data["strateYTD"] !== undefined ? _data["strateYTD"] : <any>null;
            this.strateR04Proportion = _data["strateR04Proportion"] !== undefined ? _data["strateR04Proportion"] : <any>null;
            this.strateRanking = _data["strateRanking"] !== undefined ? _data["strateRanking"] : <any>null;
            this.newcusMonth1 = _data["newcusMonth1"] !== undefined ? _data["newcusMonth1"] : <any>null;
            this.newcusMonth2 = _data["newcusMonth2"] !== undefined ? _data["newcusMonth2"] : <any>null;
            this.newcusMonth3 = _data["newcusMonth3"] !== undefined ? _data["newcusMonth3"] : <any>null;
            this.newcusMonth4 = _data["newcusMonth4"] !== undefined ? _data["newcusMonth4"] : <any>null;
            this.newcusMonth5 = _data["newcusMonth5"] !== undefined ? _data["newcusMonth5"] : <any>null;
            this.newcusMonth6 = _data["newcusMonth6"] !== undefined ? _data["newcusMonth6"] : <any>null;
            this.newcusMonth7 = _data["newcusMonth7"] !== undefined ? _data["newcusMonth7"] : <any>null;
            this.newcusMonth8 = _data["newcusMonth8"] !== undefined ? _data["newcusMonth8"] : <any>null;
            this.newcusMonth9 = _data["newcusMonth9"] !== undefined ? _data["newcusMonth9"] : <any>null;
            this.newcusMonth10 = _data["newcusMonth10"] !== undefined ? _data["newcusMonth10"] : <any>null;
            this.newcusMonth11 = _data["newcusMonth11"] !== undefined ? _data["newcusMonth11"] : <any>null;
            this.newcusMonth12 = _data["newcusMonth12"] !== undefined ? _data["newcusMonth12"] : <any>null;
            this.newcusYTD = _data["newcusYTD"] !== undefined ? _data["newcusYTD"] : <any>null;
            this.newCustYTDzl = _data["newCustYTDzl"] !== undefined ? _data["newCustYTDzl"] : <any>null;
            this.newCustCount = _data["newCustCount"] !== undefined ? _data["newCustCount"] : <any>null;
            this.newCusRanking = _data["newCusRanking"] !== undefined ? _data["newCusRanking"] : <any>null;
            this.newCustYTDzlRanking = _data["newCustYTDzlRanking"] !== undefined ? _data["newCustYTDzlRanking"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): ExportDashboardYTDValueTemplate {
        data = typeof data === 'object' ? data : {};
        return createInstance<ExportDashboardYTDValueTemplate>(data, _mappings, ExportDashboardYTDValueTemplate);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sumBy"] = this.sumBy !== undefined ? this.sumBy : <any>null;
        data["r04YtdMonth1"] = this.r04YtdMonth1 !== undefined ? this.r04YtdMonth1 : <any>null;
        data["r04YtdMonth2"] = this.r04YtdMonth2 !== undefined ? this.r04YtdMonth2 : <any>null;
        data["r04YtdMonth3"] = this.r04YtdMonth3 !== undefined ? this.r04YtdMonth3 : <any>null;
        data["r04YtdMonth4"] = this.r04YtdMonth4 !== undefined ? this.r04YtdMonth4 : <any>null;
        data["r04YtdMonth5"] = this.r04YtdMonth5 !== undefined ? this.r04YtdMonth5 : <any>null;
        data["r04YtdMonth6"] = this.r04YtdMonth6 !== undefined ? this.r04YtdMonth6 : <any>null;
        data["r04YtdMonth7"] = this.r04YtdMonth7 !== undefined ? this.r04YtdMonth7 : <any>null;
        data["r04YtdMonth8"] = this.r04YtdMonth8 !== undefined ? this.r04YtdMonth8 : <any>null;
        data["r04YtdMonth9"] = this.r04YtdMonth9 !== undefined ? this.r04YtdMonth9 : <any>null;
        data["r04YtdMonth10"] = this.r04YtdMonth10 !== undefined ? this.r04YtdMonth10 : <any>null;
        data["r04YtdMonth11"] = this.r04YtdMonth11 !== undefined ? this.r04YtdMonth11 : <any>null;
        data["r04YtdMonth12"] = this.r04YtdMonth12 !== undefined ? this.r04YtdMonth12 : <any>null;
        data["tapYtdMonth1"] = this.tapYtdMonth1 !== undefined ? this.tapYtdMonth1 : <any>null;
        data["tapYtdMonth2"] = this.tapYtdMonth2 !== undefined ? this.tapYtdMonth2 : <any>null;
        data["tapYtdMonth3"] = this.tapYtdMonth3 !== undefined ? this.tapYtdMonth3 : <any>null;
        data["tapYtdMonth4"] = this.tapYtdMonth4 !== undefined ? this.tapYtdMonth4 : <any>null;
        data["tapYtdMonth5"] = this.tapYtdMonth5 !== undefined ? this.tapYtdMonth5 : <any>null;
        data["tapYtdMonth6"] = this.tapYtdMonth6 !== undefined ? this.tapYtdMonth6 : <any>null;
        data["tapYtdMonth7"] = this.tapYtdMonth7 !== undefined ? this.tapYtdMonth7 : <any>null;
        data["tapYtdMonth8"] = this.tapYtdMonth8 !== undefined ? this.tapYtdMonth8 : <any>null;
        data["tapYtdMonth9"] = this.tapYtdMonth9 !== undefined ? this.tapYtdMonth9 : <any>null;
        data["tapYtdMonth10"] = this.tapYtdMonth10 !== undefined ? this.tapYtdMonth10 : <any>null;
        data["tapYtdMonth11"] = this.tapYtdMonth11 !== undefined ? this.tapYtdMonth11 : <any>null;
        data["tapYtdMonth12"] = this.tapYtdMonth12 !== undefined ? this.tapYtdMonth12 : <any>null;
        data["strateYTDMonth1"] = this.strateYTDMonth1 !== undefined ? this.strateYTDMonth1 : <any>null;
        data["strateYTDMonth2"] = this.strateYTDMonth2 !== undefined ? this.strateYTDMonth2 : <any>null;
        data["strateYTDMonth3"] = this.strateYTDMonth3 !== undefined ? this.strateYTDMonth3 : <any>null;
        data["strateYTDMonth4"] = this.strateYTDMonth4 !== undefined ? this.strateYTDMonth4 : <any>null;
        data["strateYTDMonth5"] = this.strateYTDMonth5 !== undefined ? this.strateYTDMonth5 : <any>null;
        data["strateYTDMonth6"] = this.strateYTDMonth6 !== undefined ? this.strateYTDMonth6 : <any>null;
        data["strateYTDMonth7"] = this.strateYTDMonth7 !== undefined ? this.strateYTDMonth7 : <any>null;
        data["strateYTDMonth8"] = this.strateYTDMonth8 !== undefined ? this.strateYTDMonth8 : <any>null;
        data["strateYTDMonth9"] = this.strateYTDMonth9 !== undefined ? this.strateYTDMonth9 : <any>null;
        data["strateYTDMonth10"] = this.strateYTDMonth10 !== undefined ? this.strateYTDMonth10 : <any>null;
        data["strateYTDMonth11"] = this.strateYTDMonth11 !== undefined ? this.strateYTDMonth11 : <any>null;
        data["strateYTDMonth12"] = this.strateYTDMonth12 !== undefined ? this.strateYTDMonth12 : <any>null;
        data["newCustCountYtdMonth1"] = this.newCustCountYtdMonth1 !== undefined ? this.newCustCountYtdMonth1 : <any>null;
        data["newCustCountYtdMonth2"] = this.newCustCountYtdMonth2 !== undefined ? this.newCustCountYtdMonth2 : <any>null;
        data["newCustCountYtdMonth3"] = this.newCustCountYtdMonth3 !== undefined ? this.newCustCountYtdMonth3 : <any>null;
        data["newCustCountYtdMonth4"] = this.newCustCountYtdMonth4 !== undefined ? this.newCustCountYtdMonth4 : <any>null;
        data["newCustCountYtdMonth5"] = this.newCustCountYtdMonth5 !== undefined ? this.newCustCountYtdMonth5 : <any>null;
        data["newCustCountYtdMonth6"] = this.newCustCountYtdMonth6 !== undefined ? this.newCustCountYtdMonth6 : <any>null;
        data["newCustCountYtdMonth7"] = this.newCustCountYtdMonth7 !== undefined ? this.newCustCountYtdMonth7 : <any>null;
        data["newCustCountYtdMonth8"] = this.newCustCountYtdMonth8 !== undefined ? this.newCustCountYtdMonth8 : <any>null;
        data["newCustCountYtdMonth9"] = this.newCustCountYtdMonth9 !== undefined ? this.newCustCountYtdMonth9 : <any>null;
        data["newCustCountYtdMonth10"] = this.newCustCountYtdMonth10 !== undefined ? this.newCustCountYtdMonth10 : <any>null;
        data["newCustCountYtdMonth11"] = this.newCustCountYtdMonth11 !== undefined ? this.newCustCountYtdMonth11 : <any>null;
        data["newCustCountYtdMonth12"] = this.newCustCountYtdMonth12 !== undefined ? this.newCustCountYtdMonth12 : <any>null;
        data["orderIndex"] = this.orderIndex !== undefined ? this.orderIndex : <any>null;
        data["relationNo"] = this.relationNo !== undefined ? this.relationNo : <any>null;
        data["parentRelation"] = this.parentRelation !== undefined ? this.parentRelation : <any>null;
        data["category"] = this.category !== undefined ? this.category : <any>null;
        data["teamGroupBy"] = this.teamGroupBy !== undefined ? this.teamGroupBy : <any>null;
        data["pkCategory"] = this.pkCategory !== undefined ? this.pkCategory : <any>null;
        data["sgi"] = this.sgi !== undefined ? this.sgi : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["channel"] = this.channel !== undefined ? this.channel : <any>null;
        data["salesOffice"] = this.salesOffice !== undefined ? this.salesOffice : <any>null;
        data["repNum"] = this.repNum !== undefined ? this.repNum : <any>null;
        data["period"] = this.period !== undefined ? this.period : <any>null;
        data["r04Month1"] = this.r04Month1 !== undefined ? this.r04Month1 : <any>null;
        data["r04Month2"] = this.r04Month2 !== undefined ? this.r04Month2 : <any>null;
        data["r04Month3"] = this.r04Month3 !== undefined ? this.r04Month3 : <any>null;
        data["r04Month4"] = this.r04Month4 !== undefined ? this.r04Month4 : <any>null;
        data["r04Month5"] = this.r04Month5 !== undefined ? this.r04Month5 : <any>null;
        data["r04Month6"] = this.r04Month6 !== undefined ? this.r04Month6 : <any>null;
        data["r04Month7"] = this.r04Month7 !== undefined ? this.r04Month7 : <any>null;
        data["r04Month8"] = this.r04Month8 !== undefined ? this.r04Month8 : <any>null;
        data["r04Month9"] = this.r04Month9 !== undefined ? this.r04Month9 : <any>null;
        data["r04Month10"] = this.r04Month10 !== undefined ? this.r04Month10 : <any>null;
        data["r04Month11"] = this.r04Month11 !== undefined ? this.r04Month11 : <any>null;
        data["r04Month12"] = this.r04Month12 !== undefined ? this.r04Month12 : <any>null;
        data["r04YTD"] = this.r04YTD !== undefined ? this.r04YTD : <any>null;
        data["r04YTDRatio"] = this.r04YTDRatio !== undefined ? this.r04YTDRatio : <any>null;
        data["r04Month1BGT"] = this.r04Month1BGT !== undefined ? this.r04Month1BGT : <any>null;
        data["r04Month2BGT"] = this.r04Month2BGT !== undefined ? this.r04Month2BGT : <any>null;
        data["r04Month3BGT"] = this.r04Month3BGT !== undefined ? this.r04Month3BGT : <any>null;
        data["r04Month4BGT"] = this.r04Month4BGT !== undefined ? this.r04Month4BGT : <any>null;
        data["r04Month5BGT"] = this.r04Month5BGT !== undefined ? this.r04Month5BGT : <any>null;
        data["r04Month6BGT"] = this.r04Month6BGT !== undefined ? this.r04Month6BGT : <any>null;
        data["r04Month7BGT"] = this.r04Month7BGT !== undefined ? this.r04Month7BGT : <any>null;
        data["r04Month8BGT"] = this.r04Month8BGT !== undefined ? this.r04Month8BGT : <any>null;
        data["r04Month9BGT"] = this.r04Month9BGT !== undefined ? this.r04Month9BGT : <any>null;
        data["r04Month10BGT"] = this.r04Month10BGT !== undefined ? this.r04Month10BGT : <any>null;
        data["r04Month11BGT"] = this.r04Month11BGT !== undefined ? this.r04Month11BGT : <any>null;
        data["r04Month12BGT"] = this.r04Month12BGT !== undefined ? this.r04Month12BGT : <any>null;
        data["r04ytdBGT"] = this.r04ytdBGT !== undefined ? this.r04ytdBGT : <any>null;
        data["r04Entry"] = this.r04Entry !== undefined ? this.r04Entry : <any>null;
        data["r04BGT"] = this.r04BGT !== undefined ? this.r04BGT : <any>null;
        data["r04Max"] = this.r04Max !== undefined ? this.r04Max : <any>null;
        data["r04MonthStartValue"] = this.r04MonthStartValue !== undefined ? this.r04MonthStartValue : <any>null;
        data["r04MonthEndValue"] = this.r04MonthEndValue !== undefined ? this.r04MonthEndValue : <any>null;
        data["r04YearStartValue"] = this.r04YearStartValue !== undefined ? this.r04YearStartValue : <any>null;
        data["r04YearEndValue"] = this.r04YearEndValue !== undefined ? this.r04YearEndValue : <any>null;
        data["r04Month1Light"] = this.r04Month1Light !== undefined ? this.r04Month1Light : <any>null;
        data["r04Month2Light"] = this.r04Month2Light !== undefined ? this.r04Month2Light : <any>null;
        data["r04Month3Light"] = this.r04Month3Light !== undefined ? this.r04Month3Light : <any>null;
        data["r04Month4Light"] = this.r04Month4Light !== undefined ? this.r04Month4Light : <any>null;
        data["r04Month5Light"] = this.r04Month5Light !== undefined ? this.r04Month5Light : <any>null;
        data["r04Month6Light"] = this.r04Month6Light !== undefined ? this.r04Month6Light : <any>null;
        data["r04Month7Light"] = this.r04Month7Light !== undefined ? this.r04Month7Light : <any>null;
        data["r04Month8Light"] = this.r04Month8Light !== undefined ? this.r04Month8Light : <any>null;
        data["r04Month9Light"] = this.r04Month9Light !== undefined ? this.r04Month9Light : <any>null;
        data["r04Month10Light"] = this.r04Month10Light !== undefined ? this.r04Month10Light : <any>null;
        data["r04Month11Light"] = this.r04Month11Light !== undefined ? this.r04Month11Light : <any>null;
        data["r04Month12Light"] = this.r04Month12Light !== undefined ? this.r04Month12Light : <any>null;
        data["r04ytdLight"] = this.r04ytdLight !== undefined ? this.r04ytdLight : <any>null;
        data["r04CurrentRanking"] = this.r04CurrentRanking !== undefined ? this.r04CurrentRanking : <any>null;
        data["r04Ranking"] = this.r04Ranking !== undefined ? this.r04Ranking : <any>null;
        data["r20Month1"] = this.r20Month1 !== undefined ? this.r20Month1 : <any>null;
        data["r20Month2"] = this.r20Month2 !== undefined ? this.r20Month2 : <any>null;
        data["r20Month3"] = this.r20Month3 !== undefined ? this.r20Month3 : <any>null;
        data["r20Month4"] = this.r20Month4 !== undefined ? this.r20Month4 : <any>null;
        data["r20Month5"] = this.r20Month5 !== undefined ? this.r20Month5 : <any>null;
        data["r20Month6"] = this.r20Month6 !== undefined ? this.r20Month6 : <any>null;
        data["r20Month7"] = this.r20Month7 !== undefined ? this.r20Month7 : <any>null;
        data["r20Month8"] = this.r20Month8 !== undefined ? this.r20Month8 : <any>null;
        data["r20Month9"] = this.r20Month9 !== undefined ? this.r20Month9 : <any>null;
        data["r20Month10"] = this.r20Month10 !== undefined ? this.r20Month10 : <any>null;
        data["r20Month11"] = this.r20Month11 !== undefined ? this.r20Month11 : <any>null;
        data["r20Month12"] = this.r20Month12 !== undefined ? this.r20Month12 : <any>null;
        data["r20YTDRatio"] = this.r20YTDRatio !== undefined ? this.r20YTDRatio : <any>null;
        data["r20YTD"] = this.r20YTD !== undefined ? this.r20YTD : <any>null;
        data["r20Month1BGT"] = this.r20Month1BGT !== undefined ? this.r20Month1BGT : <any>null;
        data["r20Month2BGT"] = this.r20Month2BGT !== undefined ? this.r20Month2BGT : <any>null;
        data["r20Month3BGT"] = this.r20Month3BGT !== undefined ? this.r20Month3BGT : <any>null;
        data["r20Month4BGT"] = this.r20Month4BGT !== undefined ? this.r20Month4BGT : <any>null;
        data["r20Month5BGT"] = this.r20Month5BGT !== undefined ? this.r20Month5BGT : <any>null;
        data["r20Month6BGT"] = this.r20Month6BGT !== undefined ? this.r20Month6BGT : <any>null;
        data["r20Month7BGT"] = this.r20Month7BGT !== undefined ? this.r20Month7BGT : <any>null;
        data["r20Month8BGT"] = this.r20Month8BGT !== undefined ? this.r20Month8BGT : <any>null;
        data["r20Month9BGT"] = this.r20Month9BGT !== undefined ? this.r20Month9BGT : <any>null;
        data["r20Month10BGT"] = this.r20Month10BGT !== undefined ? this.r20Month10BGT : <any>null;
        data["r20Month11BGT"] = this.r20Month11BGT !== undefined ? this.r20Month11BGT : <any>null;
        data["r20Month12BGT"] = this.r20Month12BGT !== undefined ? this.r20Month12BGT : <any>null;
        data["r20ytdBGT"] = this.r20ytdBGT !== undefined ? this.r20ytdBGT : <any>null;
        data["r20Entry"] = this.r20Entry !== undefined ? this.r20Entry : <any>null;
        data["r20BGT"] = this.r20BGT !== undefined ? this.r20BGT : <any>null;
        data["r20Max"] = this.r20Max !== undefined ? this.r20Max : <any>null;
        data["r20MonthStartValue"] = this.r20MonthStartValue !== undefined ? this.r20MonthStartValue : <any>null;
        data["r20MonthEndValue"] = this.r20MonthEndValue !== undefined ? this.r20MonthEndValue : <any>null;
        data["r20YearStartValue"] = this.r20YearStartValue !== undefined ? this.r20YearStartValue : <any>null;
        data["r20YearEndValue"] = this.r20YearEndValue !== undefined ? this.r20YearEndValue : <any>null;
        data["r20Month1Light"] = this.r20Month1Light !== undefined ? this.r20Month1Light : <any>null;
        data["r20Month2Light"] = this.r20Month2Light !== undefined ? this.r20Month2Light : <any>null;
        data["r20Month3Light"] = this.r20Month3Light !== undefined ? this.r20Month3Light : <any>null;
        data["r20Month4Light"] = this.r20Month4Light !== undefined ? this.r20Month4Light : <any>null;
        data["r20Month5Light"] = this.r20Month5Light !== undefined ? this.r20Month5Light : <any>null;
        data["r20Month6Light"] = this.r20Month6Light !== undefined ? this.r20Month6Light : <any>null;
        data["r20Month7Light"] = this.r20Month7Light !== undefined ? this.r20Month7Light : <any>null;
        data["r20Month8Light"] = this.r20Month8Light !== undefined ? this.r20Month8Light : <any>null;
        data["r20Month9Light"] = this.r20Month9Light !== undefined ? this.r20Month9Light : <any>null;
        data["r20Month10Light"] = this.r20Month10Light !== undefined ? this.r20Month10Light : <any>null;
        data["r20Month11Light"] = this.r20Month11Light !== undefined ? this.r20Month11Light : <any>null;
        data["r20Month12Light"] = this.r20Month12Light !== undefined ? this.r20Month12Light : <any>null;
        data["r20ytdLight"] = this.r20ytdLight !== undefined ? this.r20ytdLight : <any>null;
        data["r20CurrentRanking"] = this.r20CurrentRanking !== undefined ? this.r20CurrentRanking : <any>null;
        data["r20Ranking"] = this.r20Ranking !== undefined ? this.r20Ranking : <any>null;
        data["newoppMonth1"] = this.newoppMonth1 !== undefined ? this.newoppMonth1 : <any>null;
        data["newoppMonth2"] = this.newoppMonth2 !== undefined ? this.newoppMonth2 : <any>null;
        data["newoppMonth3"] = this.newoppMonth3 !== undefined ? this.newoppMonth3 : <any>null;
        data["newoppMonth4"] = this.newoppMonth4 !== undefined ? this.newoppMonth4 : <any>null;
        data["newoppMonth5"] = this.newoppMonth5 !== undefined ? this.newoppMonth5 : <any>null;
        data["newoppMonth6"] = this.newoppMonth6 !== undefined ? this.newoppMonth6 : <any>null;
        data["newoppMonth7"] = this.newoppMonth7 !== undefined ? this.newoppMonth7 : <any>null;
        data["newoppMonth8"] = this.newoppMonth8 !== undefined ? this.newoppMonth8 : <any>null;
        data["newoppMonth9"] = this.newoppMonth9 !== undefined ? this.newoppMonth9 : <any>null;
        data["newoppMonth10"] = this.newoppMonth10 !== undefined ? this.newoppMonth10 : <any>null;
        data["newoppMonth11"] = this.newoppMonth11 !== undefined ? this.newoppMonth11 : <any>null;
        data["newoppMonth12"] = this.newoppMonth12 !== undefined ? this.newoppMonth12 : <any>null;
        data["newoppYTD"] = this.newoppYTD !== undefined ? this.newoppYTD : <any>null;
        data["newoppoMonthStartValue"] = this.newoppoMonthStartValue !== undefined ? this.newoppoMonthStartValue : <any>null;
        data["newoppoMonthEndValue"] = this.newoppoMonthEndValue !== undefined ? this.newoppoMonthEndValue : <any>null;
        data["newoppoYearStartValue"] = this.newoppoYearStartValue !== undefined ? this.newoppoYearStartValue : <any>null;
        data["newoppoYearEndValue"] = this.newoppoYearEndValue !== undefined ? this.newoppoYearEndValue : <any>null;
        data["newoppMonth1Light"] = this.newoppMonth1Light !== undefined ? this.newoppMonth1Light : <any>null;
        data["newoppMonth2Light"] = this.newoppMonth2Light !== undefined ? this.newoppMonth2Light : <any>null;
        data["newoppMonth3Light"] = this.newoppMonth3Light !== undefined ? this.newoppMonth3Light : <any>null;
        data["newoppMonth4Light"] = this.newoppMonth4Light !== undefined ? this.newoppMonth4Light : <any>null;
        data["newoppMonth5Light"] = this.newoppMonth5Light !== undefined ? this.newoppMonth5Light : <any>null;
        data["newoppMonth6Light"] = this.newoppMonth6Light !== undefined ? this.newoppMonth6Light : <any>null;
        data["newoppMonth7Light"] = this.newoppMonth7Light !== undefined ? this.newoppMonth7Light : <any>null;
        data["newoppMonth8Light"] = this.newoppMonth8Light !== undefined ? this.newoppMonth8Light : <any>null;
        data["newoppMonth9Light"] = this.newoppMonth9Light !== undefined ? this.newoppMonth9Light : <any>null;
        data["newoppMonth10Light"] = this.newoppMonth10Light !== undefined ? this.newoppMonth10Light : <any>null;
        data["newoppMonth11Light"] = this.newoppMonth11Light !== undefined ? this.newoppMonth11Light : <any>null;
        data["newoppMonth12Light"] = this.newoppMonth12Light !== undefined ? this.newoppMonth12Light : <any>null;
        data["newoppytdLight"] = this.newoppytdLight !== undefined ? this.newoppytdLight : <any>null;
        data["newoppRanking"] = this.newoppRanking !== undefined ? this.newoppRanking : <any>null;
        data["visitMonth1"] = this.visitMonth1 !== undefined ? this.visitMonth1 : <any>null;
        data["visitMonth2"] = this.visitMonth2 !== undefined ? this.visitMonth2 : <any>null;
        data["visitMonth3"] = this.visitMonth3 !== undefined ? this.visitMonth3 : <any>null;
        data["visitMonth4"] = this.visitMonth4 !== undefined ? this.visitMonth4 : <any>null;
        data["visitMonth5"] = this.visitMonth5 !== undefined ? this.visitMonth5 : <any>null;
        data["visitMonth6"] = this.visitMonth6 !== undefined ? this.visitMonth6 : <any>null;
        data["visitMonth7"] = this.visitMonth7 !== undefined ? this.visitMonth7 : <any>null;
        data["visitMonth8"] = this.visitMonth8 !== undefined ? this.visitMonth8 : <any>null;
        data["visitMonth9"] = this.visitMonth9 !== undefined ? this.visitMonth9 : <any>null;
        data["visitMonth10"] = this.visitMonth10 !== undefined ? this.visitMonth10 : <any>null;
        data["visitMonth11"] = this.visitMonth11 !== undefined ? this.visitMonth11 : <any>null;
        data["visitMonth12"] = this.visitMonth12 !== undefined ? this.visitMonth12 : <any>null;
        data["visitYTD"] = this.visitYTD !== undefined ? this.visitYTD : <any>null;
        data["visitMonthStartValue"] = this.visitMonthStartValue !== undefined ? this.visitMonthStartValue : <any>null;
        data["visitMonthEndValue"] = this.visitMonthEndValue !== undefined ? this.visitMonthEndValue : <any>null;
        data["visitYearStartValue"] = this.visitYearStartValue !== undefined ? this.visitYearStartValue : <any>null;
        data["visitYearEndValue"] = this.visitYearEndValue !== undefined ? this.visitYearEndValue : <any>null;
        data["visitMonth1Light"] = this.visitMonth1Light !== undefined ? this.visitMonth1Light : <any>null;
        data["visitMonth2Light"] = this.visitMonth2Light !== undefined ? this.visitMonth2Light : <any>null;
        data["visitMonth3Light"] = this.visitMonth3Light !== undefined ? this.visitMonth3Light : <any>null;
        data["visitMonth4Light"] = this.visitMonth4Light !== undefined ? this.visitMonth4Light : <any>null;
        data["visitMonth5Light"] = this.visitMonth5Light !== undefined ? this.visitMonth5Light : <any>null;
        data["visitMonth6Light"] = this.visitMonth6Light !== undefined ? this.visitMonth6Light : <any>null;
        data["visitMonth7Light"] = this.visitMonth7Light !== undefined ? this.visitMonth7Light : <any>null;
        data["visitMonth8Light"] = this.visitMonth8Light !== undefined ? this.visitMonth8Light : <any>null;
        data["visitMonth9Light"] = this.visitMonth9Light !== undefined ? this.visitMonth9Light : <any>null;
        data["visitMonth10Light"] = this.visitMonth10Light !== undefined ? this.visitMonth10Light : <any>null;
        data["visitMonth11Light"] = this.visitMonth11Light !== undefined ? this.visitMonth11Light : <any>null;
        data["visitMonth12Light"] = this.visitMonth12Light !== undefined ? this.visitMonth12Light : <any>null;
        data["visitytdLight"] = this.visitytdLight !== undefined ? this.visitytdLight : <any>null;
        data["visitRanking"] = this.visitRanking !== undefined ? this.visitRanking : <any>null;
        data["inquiriesTotal"] = this.inquiriesTotal !== undefined ? this.inquiriesTotal : <any>null;
        data["orderCount"] = this.orderCount !== undefined ? this.orderCount : <any>null;
        data["conversionRate"] = this.conversionRate !== undefined ? this.conversionRate : <any>null;
        data["conversionMoney"] = this.conversionMoney !== undefined ? this.conversionMoney : <any>null;
        data["conversionRanking"] = this.conversionRanking !== undefined ? this.conversionRanking : <any>null;
        data["tapMonth1"] = this.tapMonth1 !== undefined ? this.tapMonth1 : <any>null;
        data["tapMonth2"] = this.tapMonth2 !== undefined ? this.tapMonth2 : <any>null;
        data["tapMonth3"] = this.tapMonth3 !== undefined ? this.tapMonth3 : <any>null;
        data["tapMonth4"] = this.tapMonth4 !== undefined ? this.tapMonth4 : <any>null;
        data["tapMonth5"] = this.tapMonth5 !== undefined ? this.tapMonth5 : <any>null;
        data["tapMonth6"] = this.tapMonth6 !== undefined ? this.tapMonth6 : <any>null;
        data["tapMonth7"] = this.tapMonth7 !== undefined ? this.tapMonth7 : <any>null;
        data["tapMonth8"] = this.tapMonth8 !== undefined ? this.tapMonth8 : <any>null;
        data["tapMonth9"] = this.tapMonth9 !== undefined ? this.tapMonth9 : <any>null;
        data["tapMonth10"] = this.tapMonth10 !== undefined ? this.tapMonth10 : <any>null;
        data["tapMonth11"] = this.tapMonth11 !== undefined ? this.tapMonth11 : <any>null;
        data["tapMonth12"] = this.tapMonth12 !== undefined ? this.tapMonth12 : <any>null;
        data["tapYTD"] = this.tapYTD !== undefined ? this.tapYTD : <any>null;
        data["tapR04Proportion"] = this.tapR04Proportion !== undefined ? this.tapR04Proportion : <any>null;
        data["tapRanking"] = this.tapRanking !== undefined ? this.tapRanking : <any>null;
        data["strateMonth1"] = this.strateMonth1 !== undefined ? this.strateMonth1 : <any>null;
        data["strateMonth2"] = this.strateMonth2 !== undefined ? this.strateMonth2 : <any>null;
        data["strateMonth3"] = this.strateMonth3 !== undefined ? this.strateMonth3 : <any>null;
        data["strateMonth4"] = this.strateMonth4 !== undefined ? this.strateMonth4 : <any>null;
        data["strateMonth5"] = this.strateMonth5 !== undefined ? this.strateMonth5 : <any>null;
        data["strateMonth6"] = this.strateMonth6 !== undefined ? this.strateMonth6 : <any>null;
        data["strateMonth7"] = this.strateMonth7 !== undefined ? this.strateMonth7 : <any>null;
        data["strateMonth8"] = this.strateMonth8 !== undefined ? this.strateMonth8 : <any>null;
        data["strateMonth9"] = this.strateMonth9 !== undefined ? this.strateMonth9 : <any>null;
        data["strateMonth10"] = this.strateMonth10 !== undefined ? this.strateMonth10 : <any>null;
        data["strateMonth11"] = this.strateMonth11 !== undefined ? this.strateMonth11 : <any>null;
        data["strateMonth12"] = this.strateMonth12 !== undefined ? this.strateMonth12 : <any>null;
        data["strateYTD"] = this.strateYTD !== undefined ? this.strateYTD : <any>null;
        data["strateR04Proportion"] = this.strateR04Proportion !== undefined ? this.strateR04Proportion : <any>null;
        data["strateRanking"] = this.strateRanking !== undefined ? this.strateRanking : <any>null;
        data["newcusMonth1"] = this.newcusMonth1 !== undefined ? this.newcusMonth1 : <any>null;
        data["newcusMonth2"] = this.newcusMonth2 !== undefined ? this.newcusMonth2 : <any>null;
        data["newcusMonth3"] = this.newcusMonth3 !== undefined ? this.newcusMonth3 : <any>null;
        data["newcusMonth4"] = this.newcusMonth4 !== undefined ? this.newcusMonth4 : <any>null;
        data["newcusMonth5"] = this.newcusMonth5 !== undefined ? this.newcusMonth5 : <any>null;
        data["newcusMonth6"] = this.newcusMonth6 !== undefined ? this.newcusMonth6 : <any>null;
        data["newcusMonth7"] = this.newcusMonth7 !== undefined ? this.newcusMonth7 : <any>null;
        data["newcusMonth8"] = this.newcusMonth8 !== undefined ? this.newcusMonth8 : <any>null;
        data["newcusMonth9"] = this.newcusMonth9 !== undefined ? this.newcusMonth9 : <any>null;
        data["newcusMonth10"] = this.newcusMonth10 !== undefined ? this.newcusMonth10 : <any>null;
        data["newcusMonth11"] = this.newcusMonth11 !== undefined ? this.newcusMonth11 : <any>null;
        data["newcusMonth12"] = this.newcusMonth12 !== undefined ? this.newcusMonth12 : <any>null;
        data["newcusYTD"] = this.newcusYTD !== undefined ? this.newcusYTD : <any>null;
        data["newCustYTDzl"] = this.newCustYTDzl !== undefined ? this.newCustYTDzl : <any>null;
        data["newCustCount"] = this.newCustCount !== undefined ? this.newCustCount : <any>null;
        data["newCusRanking"] = this.newCusRanking !== undefined ? this.newCusRanking : <any>null;
        data["newCustYTDzlRanking"] = this.newCustYTDzlRanking !== undefined ? this.newCustYTDzlRanking : <any>null;
        return data; 
    }
}

export class TempSalesMonthly {
    custMaterialNum!: string | null;
    unionSoldTo!: string | null;
    unionSoldToName!: string | null;
    unionMarkfor!: string | null;
    unionMarkforName!: string | null;
    orderNum!: string | null;
    ordLine!: number;
    orderType!: string | null;
    custPO!: string | null;
    soldTo!: string | null;
    soldToName!: string | null;
    payer!: string | null;
    payerName!: string | null;
    markfor!: string | null;
    markforName!: string | null;
    shipTo!: string | null;
    shipToName!: string | null;
    materialNum!: string | null;
    materialDesc!: string | null;
    brand!: string | null;
    materialGroupDesc!: string | null;
    wheelType!: number;
    diameter!: number;
    thickness!: number;
    holeSize!: string | null;
    abrasive1!: string | null;
    grit!: string | null;
    grade!: string | null;
    bond!: string | null;
    externalMarkingSpec!: string | null;
    endUseDesc!: string | null;
    length!: number;
    width!: number;
    shape!: string | null;
    shapeFamilyDesc!: string | null;
    subShape!: string | null;
    l1Desc!: string | null;
    l2Desc!: string | null;
    l3Desc!: string | null;
    marketSegment!: string | null;
    smR_42!: string | null;
    smR_17!: string | null;
    smR_Group!: string | null;
    segment_Product!: string | null;
    channel!: string | null;
    salesOffice!: string | null;
    region!: string | null;
    division!: string | null;
    sellingPlant!: string | null;
    capGroup!: string | null;
    marketingCapCode!: string | null;
    date!: Date;
    quantity!: number;
    saleUOM!: string | null;
    uomConvNumerator!: number;
    uomConvDenominator!: number;
    netValue!: number;
    rebate!: number;
    rebateAjustment!: number;
    netValue_AfterRebate!: number;
    type!: string | null;
    province!: string | null;
    salesTerritory!: string | null;
    salesTerrName!: string | null;
    salesRepresentative!: string | null;
    salesName!: string | null;
    usageIndicatorDesc!: string | null;
    purchaseOrderType!: string | null;
    period!: number;
    markforSalesRep!: string | null;
    markforRegion!: string | null;
    cap!: string | null;
    custClass!: string | null;
    markForSalesRepName!: string | null;
    salesRepNum!: string | null;
    outerUpcDesc!: string | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.custMaterialNum = _data["custMaterialNum"] !== undefined ? _data["custMaterialNum"] : <any>null;
            this.unionSoldTo = _data["unionSoldTo"] !== undefined ? _data["unionSoldTo"] : <any>null;
            this.unionSoldToName = _data["unionSoldToName"] !== undefined ? _data["unionSoldToName"] : <any>null;
            this.unionMarkfor = _data["unionMarkfor"] !== undefined ? _data["unionMarkfor"] : <any>null;
            this.unionMarkforName = _data["unionMarkforName"] !== undefined ? _data["unionMarkforName"] : <any>null;
            this.orderNum = _data["orderNum"] !== undefined ? _data["orderNum"] : <any>null;
            this.ordLine = _data["ordLine"] !== undefined ? _data["ordLine"] : <any>null;
            this.orderType = _data["orderType"] !== undefined ? _data["orderType"] : <any>null;
            this.custPO = _data["custPO"] !== undefined ? _data["custPO"] : <any>null;
            this.soldTo = _data["soldTo"] !== undefined ? _data["soldTo"] : <any>null;
            this.soldToName = _data["soldToName"] !== undefined ? _data["soldToName"] : <any>null;
            this.payer = _data["payer"] !== undefined ? _data["payer"] : <any>null;
            this.payerName = _data["payerName"] !== undefined ? _data["payerName"] : <any>null;
            this.markfor = _data["markfor"] !== undefined ? _data["markfor"] : <any>null;
            this.markforName = _data["markforName"] !== undefined ? _data["markforName"] : <any>null;
            this.shipTo = _data["shipTo"] !== undefined ? _data["shipTo"] : <any>null;
            this.shipToName = _data["shipToName"] !== undefined ? _data["shipToName"] : <any>null;
            this.materialNum = _data["materialNum"] !== undefined ? _data["materialNum"] : <any>null;
            this.materialDesc = _data["materialDesc"] !== undefined ? _data["materialDesc"] : <any>null;
            this.brand = _data["brand"] !== undefined ? _data["brand"] : <any>null;
            this.materialGroupDesc = _data["materialGroupDesc"] !== undefined ? _data["materialGroupDesc"] : <any>null;
            this.wheelType = _data["wheelType"] !== undefined ? _data["wheelType"] : <any>null;
            this.diameter = _data["diameter"] !== undefined ? _data["diameter"] : <any>null;
            this.thickness = _data["thickness"] !== undefined ? _data["thickness"] : <any>null;
            this.holeSize = _data["holeSize"] !== undefined ? _data["holeSize"] : <any>null;
            this.abrasive1 = _data["abrasive1"] !== undefined ? _data["abrasive1"] : <any>null;
            this.grit = _data["grit"] !== undefined ? _data["grit"] : <any>null;
            this.grade = _data["grade"] !== undefined ? _data["grade"] : <any>null;
            this.bond = _data["bond"] !== undefined ? _data["bond"] : <any>null;
            this.externalMarkingSpec = _data["externalMarkingSpec"] !== undefined ? _data["externalMarkingSpec"] : <any>null;
            this.endUseDesc = _data["endUseDesc"] !== undefined ? _data["endUseDesc"] : <any>null;
            this.length = _data["length"] !== undefined ? _data["length"] : <any>null;
            this.width = _data["width"] !== undefined ? _data["width"] : <any>null;
            this.shape = _data["shape"] !== undefined ? _data["shape"] : <any>null;
            this.shapeFamilyDesc = _data["shapeFamilyDesc"] !== undefined ? _data["shapeFamilyDesc"] : <any>null;
            this.subShape = _data["subShape"] !== undefined ? _data["subShape"] : <any>null;
            this.l1Desc = _data["l1Desc"] !== undefined ? _data["l1Desc"] : <any>null;
            this.l2Desc = _data["l2Desc"] !== undefined ? _data["l2Desc"] : <any>null;
            this.l3Desc = _data["l3Desc"] !== undefined ? _data["l3Desc"] : <any>null;
            this.marketSegment = _data["marketSegment"] !== undefined ? _data["marketSegment"] : <any>null;
            this.smR_42 = _data["smR_42"] !== undefined ? _data["smR_42"] : <any>null;
            this.smR_17 = _data["smR_17"] !== undefined ? _data["smR_17"] : <any>null;
            this.smR_Group = _data["smR_Group"] !== undefined ? _data["smR_Group"] : <any>null;
            this.segment_Product = _data["segment_Product"] !== undefined ? _data["segment_Product"] : <any>null;
            this.channel = _data["channel"] !== undefined ? _data["channel"] : <any>null;
            this.salesOffice = _data["salesOffice"] !== undefined ? _data["salesOffice"] : <any>null;
            this.region = _data["region"] !== undefined ? _data["region"] : <any>null;
            this.division = _data["division"] !== undefined ? _data["division"] : <any>null;
            this.sellingPlant = _data["sellingPlant"] !== undefined ? _data["sellingPlant"] : <any>null;
            this.capGroup = _data["capGroup"] !== undefined ? _data["capGroup"] : <any>null;
            this.marketingCapCode = _data["marketingCapCode"] !== undefined ? _data["marketingCapCode"] : <any>null;
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>null;
            this.quantity = _data["quantity"] !== undefined ? _data["quantity"] : <any>null;
            this.saleUOM = _data["saleUOM"] !== undefined ? _data["saleUOM"] : <any>null;
            this.uomConvNumerator = _data["uomConvNumerator"] !== undefined ? _data["uomConvNumerator"] : <any>null;
            this.uomConvDenominator = _data["uomConvDenominator"] !== undefined ? _data["uomConvDenominator"] : <any>null;
            this.netValue = _data["netValue"] !== undefined ? _data["netValue"] : <any>null;
            this.rebate = _data["rebate"] !== undefined ? _data["rebate"] : <any>null;
            this.rebateAjustment = _data["rebateAjustment"] !== undefined ? _data["rebateAjustment"] : <any>null;
            this.netValue_AfterRebate = _data["netValue_AfterRebate"] !== undefined ? _data["netValue_AfterRebate"] : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.province = _data["province"] !== undefined ? _data["province"] : <any>null;
            this.salesTerritory = _data["salesTerritory"] !== undefined ? _data["salesTerritory"] : <any>null;
            this.salesTerrName = _data["salesTerrName"] !== undefined ? _data["salesTerrName"] : <any>null;
            this.salesRepresentative = _data["salesRepresentative"] !== undefined ? _data["salesRepresentative"] : <any>null;
            this.salesName = _data["salesName"] !== undefined ? _data["salesName"] : <any>null;
            this.usageIndicatorDesc = _data["usageIndicatorDesc"] !== undefined ? _data["usageIndicatorDesc"] : <any>null;
            this.purchaseOrderType = _data["purchaseOrderType"] !== undefined ? _data["purchaseOrderType"] : <any>null;
            this.period = _data["period"] !== undefined ? _data["period"] : <any>null;
            this.markforSalesRep = _data["markforSalesRep"] !== undefined ? _data["markforSalesRep"] : <any>null;
            this.markforRegion = _data["markforRegion"] !== undefined ? _data["markforRegion"] : <any>null;
            this.cap = _data["cap"] !== undefined ? _data["cap"] : <any>null;
            this.custClass = _data["custClass"] !== undefined ? _data["custClass"] : <any>null;
            this.markForSalesRepName = _data["markForSalesRepName"] !== undefined ? _data["markForSalesRepName"] : <any>null;
            this.salesRepNum = _data["salesRepNum"] !== undefined ? _data["salesRepNum"] : <any>null;
            this.outerUpcDesc = _data["outerUpcDesc"] !== undefined ? _data["outerUpcDesc"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): TempSalesMonthly {
        data = typeof data === 'object' ? data : {};
        return createInstance<TempSalesMonthly>(data, _mappings, TempSalesMonthly);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["custMaterialNum"] = this.custMaterialNum !== undefined ? this.custMaterialNum : <any>null;
        data["unionSoldTo"] = this.unionSoldTo !== undefined ? this.unionSoldTo : <any>null;
        data["unionSoldToName"] = this.unionSoldToName !== undefined ? this.unionSoldToName : <any>null;
        data["unionMarkfor"] = this.unionMarkfor !== undefined ? this.unionMarkfor : <any>null;
        data["unionMarkforName"] = this.unionMarkforName !== undefined ? this.unionMarkforName : <any>null;
        data["orderNum"] = this.orderNum !== undefined ? this.orderNum : <any>null;
        data["ordLine"] = this.ordLine !== undefined ? this.ordLine : <any>null;
        data["orderType"] = this.orderType !== undefined ? this.orderType : <any>null;
        data["custPO"] = this.custPO !== undefined ? this.custPO : <any>null;
        data["soldTo"] = this.soldTo !== undefined ? this.soldTo : <any>null;
        data["soldToName"] = this.soldToName !== undefined ? this.soldToName : <any>null;
        data["payer"] = this.payer !== undefined ? this.payer : <any>null;
        data["payerName"] = this.payerName !== undefined ? this.payerName : <any>null;
        data["markfor"] = this.markfor !== undefined ? this.markfor : <any>null;
        data["markforName"] = this.markforName !== undefined ? this.markforName : <any>null;
        data["shipTo"] = this.shipTo !== undefined ? this.shipTo : <any>null;
        data["shipToName"] = this.shipToName !== undefined ? this.shipToName : <any>null;
        data["materialNum"] = this.materialNum !== undefined ? this.materialNum : <any>null;
        data["materialDesc"] = this.materialDesc !== undefined ? this.materialDesc : <any>null;
        data["brand"] = this.brand !== undefined ? this.brand : <any>null;
        data["materialGroupDesc"] = this.materialGroupDesc !== undefined ? this.materialGroupDesc : <any>null;
        data["wheelType"] = this.wheelType !== undefined ? this.wheelType : <any>null;
        data["diameter"] = this.diameter !== undefined ? this.diameter : <any>null;
        data["thickness"] = this.thickness !== undefined ? this.thickness : <any>null;
        data["holeSize"] = this.holeSize !== undefined ? this.holeSize : <any>null;
        data["abrasive1"] = this.abrasive1 !== undefined ? this.abrasive1 : <any>null;
        data["grit"] = this.grit !== undefined ? this.grit : <any>null;
        data["grade"] = this.grade !== undefined ? this.grade : <any>null;
        data["bond"] = this.bond !== undefined ? this.bond : <any>null;
        data["externalMarkingSpec"] = this.externalMarkingSpec !== undefined ? this.externalMarkingSpec : <any>null;
        data["endUseDesc"] = this.endUseDesc !== undefined ? this.endUseDesc : <any>null;
        data["length"] = this.length !== undefined ? this.length : <any>null;
        data["width"] = this.width !== undefined ? this.width : <any>null;
        data["shape"] = this.shape !== undefined ? this.shape : <any>null;
        data["shapeFamilyDesc"] = this.shapeFamilyDesc !== undefined ? this.shapeFamilyDesc : <any>null;
        data["subShape"] = this.subShape !== undefined ? this.subShape : <any>null;
        data["l1Desc"] = this.l1Desc !== undefined ? this.l1Desc : <any>null;
        data["l2Desc"] = this.l2Desc !== undefined ? this.l2Desc : <any>null;
        data["l3Desc"] = this.l3Desc !== undefined ? this.l3Desc : <any>null;
        data["marketSegment"] = this.marketSegment !== undefined ? this.marketSegment : <any>null;
        data["smR_42"] = this.smR_42 !== undefined ? this.smR_42 : <any>null;
        data["smR_17"] = this.smR_17 !== undefined ? this.smR_17 : <any>null;
        data["smR_Group"] = this.smR_Group !== undefined ? this.smR_Group : <any>null;
        data["segment_Product"] = this.segment_Product !== undefined ? this.segment_Product : <any>null;
        data["channel"] = this.channel !== undefined ? this.channel : <any>null;
        data["salesOffice"] = this.salesOffice !== undefined ? this.salesOffice : <any>null;
        data["region"] = this.region !== undefined ? this.region : <any>null;
        data["division"] = this.division !== undefined ? this.division : <any>null;
        data["sellingPlant"] = this.sellingPlant !== undefined ? this.sellingPlant : <any>null;
        data["capGroup"] = this.capGroup !== undefined ? this.capGroup : <any>null;
        data["marketingCapCode"] = this.marketingCapCode !== undefined ? this.marketingCapCode : <any>null;
        data["date"] = this.date ? this.date.toISOString() : <any>null;
        data["quantity"] = this.quantity !== undefined ? this.quantity : <any>null;
        data["saleUOM"] = this.saleUOM !== undefined ? this.saleUOM : <any>null;
        data["uomConvNumerator"] = this.uomConvNumerator !== undefined ? this.uomConvNumerator : <any>null;
        data["uomConvDenominator"] = this.uomConvDenominator !== undefined ? this.uomConvDenominator : <any>null;
        data["netValue"] = this.netValue !== undefined ? this.netValue : <any>null;
        data["rebate"] = this.rebate !== undefined ? this.rebate : <any>null;
        data["rebateAjustment"] = this.rebateAjustment !== undefined ? this.rebateAjustment : <any>null;
        data["netValue_AfterRebate"] = this.netValue_AfterRebate !== undefined ? this.netValue_AfterRebate : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["province"] = this.province !== undefined ? this.province : <any>null;
        data["salesTerritory"] = this.salesTerritory !== undefined ? this.salesTerritory : <any>null;
        data["salesTerrName"] = this.salesTerrName !== undefined ? this.salesTerrName : <any>null;
        data["salesRepresentative"] = this.salesRepresentative !== undefined ? this.salesRepresentative : <any>null;
        data["salesName"] = this.salesName !== undefined ? this.salesName : <any>null;
        data["usageIndicatorDesc"] = this.usageIndicatorDesc !== undefined ? this.usageIndicatorDesc : <any>null;
        data["purchaseOrderType"] = this.purchaseOrderType !== undefined ? this.purchaseOrderType : <any>null;
        data["period"] = this.period !== undefined ? this.period : <any>null;
        data["markforSalesRep"] = this.markforSalesRep !== undefined ? this.markforSalesRep : <any>null;
        data["markforRegion"] = this.markforRegion !== undefined ? this.markforRegion : <any>null;
        data["cap"] = this.cap !== undefined ? this.cap : <any>null;
        data["custClass"] = this.custClass !== undefined ? this.custClass : <any>null;
        data["markForSalesRepName"] = this.markForSalesRepName !== undefined ? this.markForSalesRepName : <any>null;
        data["salesRepNum"] = this.salesRepNum !== undefined ? this.salesRepNum : <any>null;
        data["outerUpcDesc"] = this.outerUpcDesc !== undefined ? this.outerUpcDesc : <any>null;
        return data; 
    }
}

export class PagedResultDtoOfTempSalesMonthly {
    totalCount!: number;
    items!: TempSalesMonthly[] | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"] !== undefined ? _data["totalCount"] : <any>null;
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(TempSalesMonthly.fromJS(item, _mappings));
            }
        }
    }

    static fromJS(data: any, _mappings?: any): PagedResultDtoOfTempSalesMonthly {
        data = typeof data === 'object' ? data : {};
        return createInstance<PagedResultDtoOfTempSalesMonthly>(data, _mappings, PagedResultDtoOfTempSalesMonthly);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : <any>null;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export class TempSalesMonthlyInputDto {
    salesOffice!: string | null;
    smr!: string | null;
    custClass!: string | null;
    customerSize!: string | null;
    startTime!: number | null;
    endTime!: number | null;
    repNum!: string[] | null;
    filter!: string | null;
    tableColumn!: string | null;
    sorting!: string | null;
    skipCount!: number;
    maxResultCount!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.salesOffice = _data["salesOffice"] !== undefined ? _data["salesOffice"] : <any>null;
            this.smr = _data["smr"] !== undefined ? _data["smr"] : <any>null;
            this.custClass = _data["custClass"] !== undefined ? _data["custClass"] : <any>null;
            this.customerSize = _data["customerSize"] !== undefined ? _data["customerSize"] : <any>null;
            this.startTime = _data["startTime"] !== undefined ? _data["startTime"] : <any>null;
            this.endTime = _data["endTime"] !== undefined ? _data["endTime"] : <any>null;
            if (Array.isArray(_data["repNum"])) {
                this.repNum = [] as any;
                for (let item of _data["repNum"])
                    this.repNum!.push(item);
            }
            this.filter = _data["filter"] !== undefined ? _data["filter"] : <any>null;
            this.tableColumn = _data["tableColumn"] !== undefined ? _data["tableColumn"] : <any>null;
            this.sorting = _data["sorting"] !== undefined ? _data["sorting"] : <any>null;
            this.skipCount = _data["skipCount"] !== undefined ? _data["skipCount"] : <any>null;
            this.maxResultCount = _data["maxResultCount"] !== undefined ? _data["maxResultCount"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): TempSalesMonthlyInputDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<TempSalesMonthlyInputDto>(data, _mappings, TempSalesMonthlyInputDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["salesOffice"] = this.salesOffice !== undefined ? this.salesOffice : <any>null;
        data["smr"] = this.smr !== undefined ? this.smr : <any>null;
        data["custClass"] = this.custClass !== undefined ? this.custClass : <any>null;
        data["customerSize"] = this.customerSize !== undefined ? this.customerSize : <any>null;
        data["startTime"] = this.startTime !== undefined ? this.startTime : <any>null;
        data["endTime"] = this.endTime !== undefined ? this.endTime : <any>null;
        if (Array.isArray(this.repNum)) {
            data["repNum"] = [];
            for (let item of this.repNum)
                data["repNum"].push(item);
        }
        data["filter"] = this.filter !== undefined ? this.filter : <any>null;
        data["tableColumn"] = this.tableColumn !== undefined ? this.tableColumn : <any>null;
        data["sorting"] = this.sorting !== undefined ? this.sorting : <any>null;
        data["skipCount"] = this.skipCount !== undefined ? this.skipCount : <any>null;
        data["maxResultCount"] = this.maxResultCount !== undefined ? this.maxResultCount : <any>null;
        return data; 
    }
}

export class ApplicationInfoDto {
    version!: string | null;
    releaseDate!: Date;
    features!: { [key: string]: boolean; } | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.version = _data["version"] !== undefined ? _data["version"] : <any>null;
            this.releaseDate = _data["releaseDate"] ? new Date(_data["releaseDate"].toString()) : <any>null;
            if (_data["features"]) {
                this.features = {} as any;
                for (let key in _data["features"]) {
                    if (_data["features"].hasOwnProperty(key))
                        this.features![key] = _data["features"][key];
                }
            }
        }
    }

    static fromJS(data: any, _mappings?: any): ApplicationInfoDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<ApplicationInfoDto>(data, _mappings, ApplicationInfoDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["version"] = this.version !== undefined ? this.version : <any>null;
        data["releaseDate"] = this.releaseDate ? this.releaseDate.toISOString() : <any>null;
        if (this.features) {
            data["features"] = {};
            for (let key in this.features) {
                if (this.features.hasOwnProperty(key))
                    data["features"][key] = this.features[key] !== undefined ? this.features[key] : <any>null;
            }
        }
        return data; 
    }
}

export class UserLoginInfoDto {
    name!: string | null;
    surname!: string | null;
    userName!: string | null;
    emailAddress!: string | null;
    sgid!: string | null;
    id!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.surname = _data["surname"] !== undefined ? _data["surname"] : <any>null;
            this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
            this.emailAddress = _data["emailAddress"] !== undefined ? _data["emailAddress"] : <any>null;
            this.sgid = _data["sgid"] !== undefined ? _data["sgid"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): UserLoginInfoDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<UserLoginInfoDto>(data, _mappings, UserLoginInfoDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["surname"] = this.surname !== undefined ? this.surname : <any>null;
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : <any>null;
        data["sgid"] = this.sgid !== undefined ? this.sgid : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class TenantLoginInfoDto {
    tenancyName!: string | null;
    name!: string | null;
    id!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.tenancyName = _data["tenancyName"] !== undefined ? _data["tenancyName"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): TenantLoginInfoDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<TenantLoginInfoDto>(data, _mappings, TenantLoginInfoDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class GetCurrentLoginInformationsOutput {
    application!: ApplicationInfoDto;
    user!: UserLoginInfoDto;
    tenant!: TenantLoginInfoDto;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.application = _data["application"] ? ApplicationInfoDto.fromJS(_data["application"], _mappings) : <any>null;
            this.user = _data["user"] ? UserLoginInfoDto.fromJS(_data["user"], _mappings) : <any>null;
            this.tenant = _data["tenant"] ? TenantLoginInfoDto.fromJS(_data["tenant"], _mappings) : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): GetCurrentLoginInformationsOutput {
        data = typeof data === 'object' ? data : {};
        return createInstance<GetCurrentLoginInformationsOutput>(data, _mappings, GetCurrentLoginInformationsOutput);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["application"] = this.application ? this.application.toJSON() : <any>null;
        data["user"] = this.user ? this.user.toJSON() : <any>null;
        data["tenant"] = this.tenant ? this.tenant.toJSON() : <any>null;
        return data; 
    }
}

export class StandardProHierarchy {
    id!: number;
    soa!: string | null;
    hierarchy1_Eshop_Code!: string | null;
    hierarchy1_Eshop_CH!: string | null;
    hierarchy2_Eshop_Code!: string | null;
    hierarchy2_Eshop_CH!: string | null;
    hierarchyCode_Eshop!: string | null;
    hierarchyCode_SAP!: string | null;
    isDeledted!: boolean;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.soa = _data["soa"] !== undefined ? _data["soa"] : <any>null;
            this.hierarchy1_Eshop_Code = _data["hierarchy1_Eshop_Code"] !== undefined ? _data["hierarchy1_Eshop_Code"] : <any>null;
            this.hierarchy1_Eshop_CH = _data["hierarchy1_Eshop_CH"] !== undefined ? _data["hierarchy1_Eshop_CH"] : <any>null;
            this.hierarchy2_Eshop_Code = _data["hierarchy2_Eshop_Code"] !== undefined ? _data["hierarchy2_Eshop_Code"] : <any>null;
            this.hierarchy2_Eshop_CH = _data["hierarchy2_Eshop_CH"] !== undefined ? _data["hierarchy2_Eshop_CH"] : <any>null;
            this.hierarchyCode_Eshop = _data["hierarchyCode_Eshop"] !== undefined ? _data["hierarchyCode_Eshop"] : <any>null;
            this.hierarchyCode_SAP = _data["hierarchyCode_SAP"] !== undefined ? _data["hierarchyCode_SAP"] : <any>null;
            this.isDeledted = _data["isDeledted"] !== undefined ? _data["isDeledted"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): StandardProHierarchy {
        data = typeof data === 'object' ? data : {};
        return createInstance<StandardProHierarchy>(data, _mappings, StandardProHierarchy);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["soa"] = this.soa !== undefined ? this.soa : <any>null;
        data["hierarchy1_Eshop_Code"] = this.hierarchy1_Eshop_Code !== undefined ? this.hierarchy1_Eshop_Code : <any>null;
        data["hierarchy1_Eshop_CH"] = this.hierarchy1_Eshop_CH !== undefined ? this.hierarchy1_Eshop_CH : <any>null;
        data["hierarchy2_Eshop_Code"] = this.hierarchy2_Eshop_Code !== undefined ? this.hierarchy2_Eshop_Code : <any>null;
        data["hierarchy2_Eshop_CH"] = this.hierarchy2_Eshop_CH !== undefined ? this.hierarchy2_Eshop_CH : <any>null;
        data["hierarchyCode_Eshop"] = this.hierarchyCode_Eshop !== undefined ? this.hierarchyCode_Eshop : <any>null;
        data["hierarchyCode_SAP"] = this.hierarchyCode_SAP !== undefined ? this.hierarchyCode_SAP : <any>null;
        data["isDeledted"] = this.isDeledted !== undefined ? this.isDeledted : <any>null;
        return data; 
    }
}

export class StandardProHierarchyProduct {
    id!: number;
    material!: string | null;
    hierarchyCode_Eshop!: string | null;
    isDeledted!: boolean;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.material = _data["material"] !== undefined ? _data["material"] : <any>null;
            this.hierarchyCode_Eshop = _data["hierarchyCode_Eshop"] !== undefined ? _data["hierarchyCode_Eshop"] : <any>null;
            this.isDeledted = _data["isDeledted"] !== undefined ? _data["isDeledted"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): StandardProHierarchyProduct {
        data = typeof data === 'object' ? data : {};
        return createInstance<StandardProHierarchyProduct>(data, _mappings, StandardProHierarchyProduct);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["material"] = this.material !== undefined ? this.material : <any>null;
        data["hierarchyCode_Eshop"] = this.hierarchyCode_Eshop !== undefined ? this.hierarchyCode_Eshop : <any>null;
        data["isDeledted"] = this.isDeledted !== undefined ? this.isDeledted : <any>null;
        return data; 
    }
}

export class QueryHierarchyProductParameter {
    updateMethod!: string | null;
    readonly success!: boolean;
    soa!: string | null;
    hierarchy1_Eshop_Code!: string | null;
    hierarchy2_Eshop_Code!: string | null;
    plant!: string | null;
    id!: number;
    material!: string | null;
    globalDescrip!: string | null;
    division!: string | null;
    hierarchyCode_Eshop!: string | null;
    hierarchy1_Eshop_CH!: string | null;
    hierarchy2_Eshop_CH!: string | null;
    hierarchyCode_SAP!: string | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.updateMethod = _data["updateMethod"] !== undefined ? _data["updateMethod"] : <any>null;
            (<any>this).success = _data["success"] !== undefined ? _data["success"] : <any>null;
            this.soa = _data["soa"] !== undefined ? _data["soa"] : <any>null;
            this.hierarchy1_Eshop_Code = _data["hierarchy1_Eshop_Code"] !== undefined ? _data["hierarchy1_Eshop_Code"] : <any>null;
            this.hierarchy2_Eshop_Code = _data["hierarchy2_Eshop_Code"] !== undefined ? _data["hierarchy2_Eshop_Code"] : <any>null;
            this.plant = _data["plant"] !== undefined ? _data["plant"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.material = _data["material"] !== undefined ? _data["material"] : <any>null;
            this.globalDescrip = _data["globalDescrip"] !== undefined ? _data["globalDescrip"] : <any>null;
            this.division = _data["division"] !== undefined ? _data["division"] : <any>null;
            this.hierarchyCode_Eshop = _data["hierarchyCode_Eshop"] !== undefined ? _data["hierarchyCode_Eshop"] : <any>null;
            this.hierarchy1_Eshop_CH = _data["hierarchy1_Eshop_CH"] !== undefined ? _data["hierarchy1_Eshop_CH"] : <any>null;
            this.hierarchy2_Eshop_CH = _data["hierarchy2_Eshop_CH"] !== undefined ? _data["hierarchy2_Eshop_CH"] : <any>null;
            this.hierarchyCode_SAP = _data["hierarchyCode_SAP"] !== undefined ? _data["hierarchyCode_SAP"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): QueryHierarchyProductParameter {
        data = typeof data === 'object' ? data : {};
        return createInstance<QueryHierarchyProductParameter>(data, _mappings, QueryHierarchyProductParameter);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["updateMethod"] = this.updateMethod !== undefined ? this.updateMethod : <any>null;
        data["success"] = this.success !== undefined ? this.success : <any>null;
        data["soa"] = this.soa !== undefined ? this.soa : <any>null;
        data["hierarchy1_Eshop_Code"] = this.hierarchy1_Eshop_Code !== undefined ? this.hierarchy1_Eshop_Code : <any>null;
        data["hierarchy2_Eshop_Code"] = this.hierarchy2_Eshop_Code !== undefined ? this.hierarchy2_Eshop_Code : <any>null;
        data["plant"] = this.plant !== undefined ? this.plant : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["material"] = this.material !== undefined ? this.material : <any>null;
        data["globalDescrip"] = this.globalDescrip !== undefined ? this.globalDescrip : <any>null;
        data["division"] = this.division !== undefined ? this.division : <any>null;
        data["hierarchyCode_Eshop"] = this.hierarchyCode_Eshop !== undefined ? this.hierarchyCode_Eshop : <any>null;
        data["hierarchy1_Eshop_CH"] = this.hierarchy1_Eshop_CH !== undefined ? this.hierarchy1_Eshop_CH : <any>null;
        data["hierarchy2_Eshop_CH"] = this.hierarchy2_Eshop_CH !== undefined ? this.hierarchy2_Eshop_CH : <any>null;
        data["hierarchyCode_SAP"] = this.hierarchyCode_SAP !== undefined ? this.hierarchyCode_SAP : <any>null;
        return data; 
    }
}

export class StrategicProductDto {
    materialNum!: string | null;
    channel!: string | null;
    type!: string | null;
    eaStrategicCategory!: string | null;
    salesIncentive!: string | null;
    distributorManagement!: string | null;
    validFrom!: string | null;
    validTo!: string | null;
    updateMethod!: string | null;
    readonly currentStatus!: boolean;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.materialNum = _data["materialNum"] !== undefined ? _data["materialNum"] : <any>null;
            this.channel = _data["channel"] !== undefined ? _data["channel"] : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.eaStrategicCategory = _data["eaStrategicCategory"] !== undefined ? _data["eaStrategicCategory"] : <any>null;
            this.salesIncentive = _data["salesIncentive"] !== undefined ? _data["salesIncentive"] : <any>null;
            this.distributorManagement = _data["distributorManagement"] !== undefined ? _data["distributorManagement"] : <any>null;
            this.validFrom = _data["validFrom"] !== undefined ? _data["validFrom"] : <any>null;
            this.validTo = _data["validTo"] !== undefined ? _data["validTo"] : <any>null;
            this.updateMethod = _data["updateMethod"] !== undefined ? _data["updateMethod"] : <any>null;
            (<any>this).currentStatus = _data["currentStatus"] !== undefined ? _data["currentStatus"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): StrategicProductDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<StrategicProductDto>(data, _mappings, StrategicProductDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["materialNum"] = this.materialNum !== undefined ? this.materialNum : <any>null;
        data["channel"] = this.channel !== undefined ? this.channel : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["eaStrategicCategory"] = this.eaStrategicCategory !== undefined ? this.eaStrategicCategory : <any>null;
        data["salesIncentive"] = this.salesIncentive !== undefined ? this.salesIncentive : <any>null;
        data["distributorManagement"] = this.distributorManagement !== undefined ? this.distributorManagement : <any>null;
        data["validFrom"] = this.validFrom !== undefined ? this.validFrom : <any>null;
        data["validTo"] = this.validTo !== undefined ? this.validTo : <any>null;
        data["updateMethod"] = this.updateMethod !== undefined ? this.updateMethod : <any>null;
        data["currentStatus"] = this.currentStatus !== undefined ? this.currentStatus : <any>null;
        return data; 
    }
}

export class StrategicProduct {
    id!: number;
    materialNum!: string | null;
    channel!: string | null;
    type!: string | null;
    eaStrategicCategory!: string | null;
    salesIncentive!: string | null;
    distributorManagement!: string | null;
    validFrom!: Date;
    validTo!: Date;
    isDeledted!: boolean;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.materialNum = _data["materialNum"] !== undefined ? _data["materialNum"] : <any>null;
            this.channel = _data["channel"] !== undefined ? _data["channel"] : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.eaStrategicCategory = _data["eaStrategicCategory"] !== undefined ? _data["eaStrategicCategory"] : <any>null;
            this.salesIncentive = _data["salesIncentive"] !== undefined ? _data["salesIncentive"] : <any>null;
            this.distributorManagement = _data["distributorManagement"] !== undefined ? _data["distributorManagement"] : <any>null;
            this.validFrom = _data["validFrom"] ? new Date(_data["validFrom"].toString()) : <any>null;
            this.validTo = _data["validTo"] ? new Date(_data["validTo"].toString()) : <any>null;
            this.isDeledted = _data["isDeledted"] !== undefined ? _data["isDeledted"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): StrategicProduct {
        data = typeof data === 'object' ? data : {};
        return createInstance<StrategicProduct>(data, _mappings, StrategicProduct);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["materialNum"] = this.materialNum !== undefined ? this.materialNum : <any>null;
        data["channel"] = this.channel !== undefined ? this.channel : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["eaStrategicCategory"] = this.eaStrategicCategory !== undefined ? this.eaStrategicCategory : <any>null;
        data["salesIncentive"] = this.salesIncentive !== undefined ? this.salesIncentive : <any>null;
        data["distributorManagement"] = this.distributorManagement !== undefined ? this.distributorManagement : <any>null;
        data["validFrom"] = this.validFrom ? this.validFrom.toISOString() : <any>null;
        data["validTo"] = this.validTo ? this.validTo.toISOString() : <any>null;
        data["isDeledted"] = this.isDeledted !== undefined ? this.isDeledted : <any>null;
        return data; 
    }
}

export class SubPlatFormInput {
    upc!: string | null;
    soldTo!: string | null;
    col1!: string | null;
    col2!: string | null;
    col3!: string | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.upc = _data["upc"] !== undefined ? _data["upc"] : <any>null;
            this.soldTo = _data["soldTo"] !== undefined ? _data["soldTo"] : <any>null;
            this.col1 = _data["col1"] !== undefined ? _data["col1"] : <any>null;
            this.col2 = _data["col2"] !== undefined ? _data["col2"] : <any>null;
            this.col3 = _data["col3"] !== undefined ? _data["col3"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): SubPlatFormInput {
        data = typeof data === 'object' ? data : {};
        return createInstance<SubPlatFormInput>(data, _mappings, SubPlatFormInput);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["upc"] = this.upc !== undefined ? this.upc : <any>null;
        data["soldTo"] = this.soldTo !== undefined ? this.soldTo : <any>null;
        data["col1"] = this.col1 !== undefined ? this.col1 : <any>null;
        data["col2"] = this.col2 !== undefined ? this.col2 : <any>null;
        data["col3"] = this.col3 !== undefined ? this.col3 : <any>null;
        return data; 
    }
}

export enum SysDictDataCategory {
    CustomerSize = 1,
    SQLQuery = 2,
    CustomCategory = 999,
}

export class SysDictDto {
    keyName!: string | null;
    dataValue!: string | null;
    description!: string | null;
    disabled!: boolean;
    isSystem!: boolean;
    parentId!: number | null;
    jsonData!: string | null;
    orderIndex!: number | null;
    dataCategory!: SysDictDataCategory;
    id!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.keyName = _data["keyName"] !== undefined ? _data["keyName"] : <any>null;
            this.dataValue = _data["dataValue"] !== undefined ? _data["dataValue"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.disabled = _data["disabled"] !== undefined ? _data["disabled"] : <any>null;
            this.isSystem = _data["isSystem"] !== undefined ? _data["isSystem"] : <any>null;
            this.parentId = _data["parentId"] !== undefined ? _data["parentId"] : <any>null;
            this.jsonData = _data["jsonData"] !== undefined ? _data["jsonData"] : <any>null;
            this.orderIndex = _data["orderIndex"] !== undefined ? _data["orderIndex"] : <any>null;
            this.dataCategory = _data["dataCategory"] !== undefined ? _data["dataCategory"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): SysDictDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<SysDictDto>(data, _mappings, SysDictDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["keyName"] = this.keyName !== undefined ? this.keyName : <any>null;
        data["dataValue"] = this.dataValue !== undefined ? this.dataValue : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["disabled"] = this.disabled !== undefined ? this.disabled : <any>null;
        data["isSystem"] = this.isSystem !== undefined ? this.isSystem : <any>null;
        data["parentId"] = this.parentId !== undefined ? this.parentId : <any>null;
        data["jsonData"] = this.jsonData !== undefined ? this.jsonData : <any>null;
        data["orderIndex"] = this.orderIndex !== undefined ? this.orderIndex : <any>null;
        data["dataCategory"] = this.dataCategory !== undefined ? this.dataCategory : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class GetSysDictForViewDto {
    sysDict!: SysDictDto;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.sysDict = _data["sysDict"] ? SysDictDto.fromJS(_data["sysDict"], _mappings) : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): GetSysDictForViewDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<GetSysDictForViewDto>(data, _mappings, GetSysDictForViewDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysDict"] = this.sysDict ? this.sysDict.toJSON() : <any>null;
        return data; 
    }
}

export class PagedResultDtoOfGetSysDictForViewDto {
    totalCount!: number;
    items!: GetSysDictForViewDto[] | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"] !== undefined ? _data["totalCount"] : <any>null;
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetSysDictForViewDto.fromJS(item, _mappings));
            }
        }
    }

    static fromJS(data: any, _mappings?: any): PagedResultDtoOfGetSysDictForViewDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<PagedResultDtoOfGetSysDictForViewDto>(data, _mappings, PagedResultDtoOfGetSysDictForViewDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : <any>null;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export class CreateOrEditSysDictDto {
    keyName!: string | null;
    dataValue!: string | null;
    parentId!: number | null;
    description!: string | null;
    disabled!: boolean;
    jsonData!: string | null;
    orderIndex!: number | null;
    dataCategory!: SysDictDataCategory;
    id!: number | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.keyName = _data["keyName"] !== undefined ? _data["keyName"] : <any>null;
            this.dataValue = _data["dataValue"] !== undefined ? _data["dataValue"] : <any>null;
            this.parentId = _data["parentId"] !== undefined ? _data["parentId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.disabled = _data["disabled"] !== undefined ? _data["disabled"] : <any>null;
            this.jsonData = _data["jsonData"] !== undefined ? _data["jsonData"] : <any>null;
            this.orderIndex = _data["orderIndex"] !== undefined ? _data["orderIndex"] : <any>null;
            this.dataCategory = _data["dataCategory"] !== undefined ? _data["dataCategory"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): CreateOrEditSysDictDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<CreateOrEditSysDictDto>(data, _mappings, CreateOrEditSysDictDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["keyName"] = this.keyName !== undefined ? this.keyName : <any>null;
        data["dataValue"] = this.dataValue !== undefined ? this.dataValue : <any>null;
        data["parentId"] = this.parentId !== undefined ? this.parentId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["disabled"] = this.disabled !== undefined ? this.disabled : <any>null;
        data["jsonData"] = this.jsonData !== undefined ? this.jsonData : <any>null;
        data["orderIndex"] = this.orderIndex !== undefined ? this.orderIndex : <any>null;
        data["dataCategory"] = this.dataCategory !== undefined ? this.dataCategory : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class GetSysDictForEditOutput {
    sysDict!: CreateOrEditSysDictDto;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.sysDict = _data["sysDict"] ? CreateOrEditSysDictDto.fromJS(_data["sysDict"], _mappings) : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): GetSysDictForEditOutput {
        data = typeof data === 'object' ? data : {};
        return createInstance<GetSysDictForEditOutput>(data, _mappings, GetSysDictForEditOutput);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysDict"] = this.sysDict ? this.sysDict.toJSON() : <any>null;
        return data; 
    }
}

export class CreateTenantDto {
    tenancyName!: string;
    name!: string;
    adminEmailAddress!: string;
    connectionString!: string | null;
    isActive!: boolean;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.tenancyName = _data["tenancyName"] !== undefined ? _data["tenancyName"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.adminEmailAddress = _data["adminEmailAddress"] !== undefined ? _data["adminEmailAddress"] : <any>null;
            this.connectionString = _data["connectionString"] !== undefined ? _data["connectionString"] : <any>null;
            this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): CreateTenantDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<CreateTenantDto>(data, _mappings, CreateTenantDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["adminEmailAddress"] = this.adminEmailAddress !== undefined ? this.adminEmailAddress : <any>null;
        data["connectionString"] = this.connectionString !== undefined ? this.connectionString : <any>null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        return data; 
    }
}

export class TenantDto {
    tenancyName!: string;
    name!: string;
    isActive!: boolean;
    id!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.tenancyName = _data["tenancyName"] !== undefined ? _data["tenancyName"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): TenantDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<TenantDto>(data, _mappings, TenantDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName !== undefined ? this.tenancyName : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class PagedResultDtoOfTenantDto {
    totalCount!: number;
    items!: TenantDto[] | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"] !== undefined ? _data["totalCount"] : <any>null;
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(TenantDto.fromJS(item, _mappings));
            }
        }
    }

    static fromJS(data: any, _mappings?: any): PagedResultDtoOfTenantDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<PagedResultDtoOfTenantDto>(data, _mappings, PagedResultDtoOfTenantDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : <any>null;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export class AuthenticateModel {
    userNameOrEmailAddress!: string;
    password!: string;
    rememberClient!: boolean;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.userNameOrEmailAddress = _data["userNameOrEmailAddress"] !== undefined ? _data["userNameOrEmailAddress"] : <any>null;
            this.password = _data["password"] !== undefined ? _data["password"] : <any>null;
            this.rememberClient = _data["rememberClient"] !== undefined ? _data["rememberClient"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): AuthenticateModel {
        data = typeof data === 'object' ? data : {};
        return createInstance<AuthenticateModel>(data, _mappings, AuthenticateModel);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userNameOrEmailAddress"] = this.userNameOrEmailAddress !== undefined ? this.userNameOrEmailAddress : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        data["rememberClient"] = this.rememberClient !== undefined ? this.rememberClient : <any>null;
        return data; 
    }
}

export class AuthenticateResultModel {
    accessToken!: string | null;
    encryptedAccessToken!: string | null;
    expireInSeconds!: number;
    userId!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.accessToken = _data["accessToken"] !== undefined ? _data["accessToken"] : <any>null;
            this.encryptedAccessToken = _data["encryptedAccessToken"] !== undefined ? _data["encryptedAccessToken"] : <any>null;
            this.expireInSeconds = _data["expireInSeconds"] !== undefined ? _data["expireInSeconds"] : <any>null;
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): AuthenticateResultModel {
        data = typeof data === 'object' ? data : {};
        return createInstance<AuthenticateResultModel>(data, _mappings, AuthenticateResultModel);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken !== undefined ? this.accessToken : <any>null;
        data["encryptedAccessToken"] = this.encryptedAccessToken !== undefined ? this.encryptedAccessToken : <any>null;
        data["expireInSeconds"] = this.expireInSeconds !== undefined ? this.expireInSeconds : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        return data; 
    }
}

export class ExternalLoginProviderInfoModel {
    name!: string | null;
    clientId!: string | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.clientId = _data["clientId"] !== undefined ? _data["clientId"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): ExternalLoginProviderInfoModel {
        data = typeof data === 'object' ? data : {};
        return createInstance<ExternalLoginProviderInfoModel>(data, _mappings, ExternalLoginProviderInfoModel);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["clientId"] = this.clientId !== undefined ? this.clientId : <any>null;
        return data; 
    }
}

export class ExternalAuthenticateModel {
    authProvider!: string;
    providerKey!: string;
    providerAccessCode!: string;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.authProvider = _data["authProvider"] !== undefined ? _data["authProvider"] : <any>null;
            this.providerKey = _data["providerKey"] !== undefined ? _data["providerKey"] : <any>null;
            this.providerAccessCode = _data["providerAccessCode"] !== undefined ? _data["providerAccessCode"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): ExternalAuthenticateModel {
        data = typeof data === 'object' ? data : {};
        return createInstance<ExternalAuthenticateModel>(data, _mappings, ExternalAuthenticateModel);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["authProvider"] = this.authProvider !== undefined ? this.authProvider : <any>null;
        data["providerKey"] = this.providerKey !== undefined ? this.providerKey : <any>null;
        data["providerAccessCode"] = this.providerAccessCode !== undefined ? this.providerAccessCode : <any>null;
        return data; 
    }
}

export class ExternalAuthenticateResultModel {
    accessToken!: string | null;
    encryptedAccessToken!: string | null;
    expireInSeconds!: number;
    waitingForActivation!: boolean;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.accessToken = _data["accessToken"] !== undefined ? _data["accessToken"] : <any>null;
            this.encryptedAccessToken = _data["encryptedAccessToken"] !== undefined ? _data["encryptedAccessToken"] : <any>null;
            this.expireInSeconds = _data["expireInSeconds"] !== undefined ? _data["expireInSeconds"] : <any>null;
            this.waitingForActivation = _data["waitingForActivation"] !== undefined ? _data["waitingForActivation"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): ExternalAuthenticateResultModel {
        data = typeof data === 'object' ? data : {};
        return createInstance<ExternalAuthenticateResultModel>(data, _mappings, ExternalAuthenticateResultModel);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken !== undefined ? this.accessToken : <any>null;
        data["encryptedAccessToken"] = this.encryptedAccessToken !== undefined ? this.encryptedAccessToken : <any>null;
        data["expireInSeconds"] = this.expireInSeconds !== undefined ? this.expireInSeconds : <any>null;
        data["waitingForActivation"] = this.waitingForActivation !== undefined ? this.waitingForActivation : <any>null;
        return data; 
    }
}

export class UserListRoleDto {
    roleId!: number;
    roleName!: string | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.roleId = _data["roleId"] !== undefined ? _data["roleId"] : <any>null;
            this.roleName = _data["roleName"] !== undefined ? _data["roleName"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): UserListRoleDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<UserListRoleDto>(data, _mappings, UserListRoleDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId !== undefined ? this.roleId : <any>null;
        data["roleName"] = this.roleName !== undefined ? this.roleName : <any>null;
        return data; 
    }
}

export class UserListDto {
    name!: string | null;
    surname!: string | null;
    userName!: string | null;
    emailAddress!: string | null;
    phoneNumber!: string | null;
    profilePictureId!: string | null;
    isEmailConfirmed!: boolean;
    roles!: UserListRoleDto[] | null;
    isActive!: boolean;
    creationTime!: Date;
    sgid!: string | null;
    id!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.surname = _data["surname"] !== undefined ? _data["surname"] : <any>null;
            this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
            this.emailAddress = _data["emailAddress"] !== undefined ? _data["emailAddress"] : <any>null;
            this.phoneNumber = _data["phoneNumber"] !== undefined ? _data["phoneNumber"] : <any>null;
            this.profilePictureId = _data["profilePictureId"] !== undefined ? _data["profilePictureId"] : <any>null;
            this.isEmailConfirmed = _data["isEmailConfirmed"] !== undefined ? _data["isEmailConfirmed"] : <any>null;
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(UserListRoleDto.fromJS(item, _mappings));
            }
            this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : <any>null;
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>null;
            this.sgid = _data["sgid"] !== undefined ? _data["sgid"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): UserListDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<UserListDto>(data, _mappings, UserListDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["surname"] = this.surname !== undefined ? this.surname : <any>null;
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : <any>null;
        data["phoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : <any>null;
        data["profilePictureId"] = this.profilePictureId !== undefined ? this.profilePictureId : <any>null;
        data["isEmailConfirmed"] = this.isEmailConfirmed !== undefined ? this.isEmailConfirmed : <any>null;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item.toJSON());
        }
        data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>null;
        data["sgid"] = this.sgid !== undefined ? this.sgid : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class PagedResultDtoOfUserListDto {
    totalCount!: number;
    items!: UserListDto[] | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"] !== undefined ? _data["totalCount"] : <any>null;
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(UserListDto.fromJS(item, _mappings));
            }
        }
    }

    static fromJS(data: any, _mappings?: any): PagedResultDtoOfUserListDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<PagedResultDtoOfUserListDto>(data, _mappings, PagedResultDtoOfUserListDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : <any>null;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export class CreateUserDto {
    userName!: string;
    name!: string;
    surname!: string;
    emailAddress!: string;
    isActive!: boolean;
    roleNames!: string[] | null;
    password!: string;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.surname = _data["surname"] !== undefined ? _data["surname"] : <any>null;
            this.emailAddress = _data["emailAddress"] !== undefined ? _data["emailAddress"] : <any>null;
            this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : <any>null;
            if (Array.isArray(_data["roleNames"])) {
                this.roleNames = [] as any;
                for (let item of _data["roleNames"])
                    this.roleNames!.push(item);
            }
            this.password = _data["password"] !== undefined ? _data["password"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): CreateUserDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<CreateUserDto>(data, _mappings, CreateUserDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["surname"] = this.surname !== undefined ? this.surname : <any>null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : <any>null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        if (Array.isArray(this.roleNames)) {
            data["roleNames"] = [];
            for (let item of this.roleNames)
                data["roleNames"].push(item);
        }
        data["password"] = this.password !== undefined ? this.password : <any>null;
        return data; 
    }
}

export class UserDto {
    userName!: string;
    name!: string;
    surname!: string;
    emailAddress!: string;
    isActive!: boolean;
    fullName!: string | null;
    lastLoginTime!: Date | null;
    creationTime!: Date;
    roleNames!: string[] | null;
    id!: number;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.surname = _data["surname"] !== undefined ? _data["surname"] : <any>null;
            this.emailAddress = _data["emailAddress"] !== undefined ? _data["emailAddress"] : <any>null;
            this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : <any>null;
            this.fullName = _data["fullName"] !== undefined ? _data["fullName"] : <any>null;
            this.lastLoginTime = _data["lastLoginTime"] ? new Date(_data["lastLoginTime"].toString()) : <any>null;
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>null;
            if (Array.isArray(_data["roleNames"])) {
                this.roleNames = [] as any;
                for (let item of _data["roleNames"])
                    this.roleNames!.push(item);
            }
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): UserDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<UserDto>(data, _mappings, UserDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["surname"] = this.surname !== undefined ? this.surname : <any>null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : <any>null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["fullName"] = this.fullName !== undefined ? this.fullName : <any>null;
        data["lastLoginTime"] = this.lastLoginTime ? this.lastLoginTime.toISOString() : <any>null;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>null;
        if (Array.isArray(this.roleNames)) {
            data["roleNames"] = [];
            for (let item of this.roleNames)
                data["roleNames"].push(item);
        }
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export class ListResultDtoOfRoleDto {
    items!: RoleDto[] | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RoleDto.fromJS(item, _mappings));
            }
        }
    }

    static fromJS(data: any, _mappings?: any): ListResultDtoOfRoleDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<ListResultDtoOfRoleDto>(data, _mappings, ListResultDtoOfRoleDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export class ChangeUserLanguageDto {
    languageName!: string;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.languageName = _data["languageName"] !== undefined ? _data["languageName"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): ChangeUserLanguageDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<ChangeUserLanguageDto>(data, _mappings, ChangeUserLanguageDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["languageName"] = this.languageName !== undefined ? this.languageName : <any>null;
        return data; 
    }
}

export class ChangePasswordDto {
    currentPassword!: string;
    newPassword!: string;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.currentPassword = _data["currentPassword"] !== undefined ? _data["currentPassword"] : <any>null;
            this.newPassword = _data["newPassword"] !== undefined ? _data["newPassword"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): ChangePasswordDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<ChangePasswordDto>(data, _mappings, ChangePasswordDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["currentPassword"] = this.currentPassword !== undefined ? this.currentPassword : <any>null;
        data["newPassword"] = this.newPassword !== undefined ? this.newPassword : <any>null;
        return data; 
    }
}

export class ResetPasswordDto {
    adminPassword!: string;
    userId!: number;
    newPassword!: string;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.adminPassword = _data["adminPassword"] !== undefined ? _data["adminPassword"] : <any>null;
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.newPassword = _data["newPassword"] !== undefined ? _data["newPassword"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): ResetPasswordDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<ResetPasswordDto>(data, _mappings, ResetPasswordDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["adminPassword"] = this.adminPassword !== undefined ? this.adminPassword : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["newPassword"] = this.newPassword !== undefined ? this.newPassword : <any>null;
        return data; 
    }
}

export class UserEditDto {
    id!: number | null;
    name!: string;
    surname!: string;
    userName!: string;
    emailAddress!: string;
    phoneNumber!: string | null;
    password!: string | null;
    isActive!: boolean;
    shouldChangePasswordOnNextLogin!: boolean;
    isTwoFactorEnabled!: boolean;
    isLockoutEnabled!: boolean;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.surname = _data["surname"] !== undefined ? _data["surname"] : <any>null;
            this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
            this.emailAddress = _data["emailAddress"] !== undefined ? _data["emailAddress"] : <any>null;
            this.phoneNumber = _data["phoneNumber"] !== undefined ? _data["phoneNumber"] : <any>null;
            this.password = _data["password"] !== undefined ? _data["password"] : <any>null;
            this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : <any>null;
            this.shouldChangePasswordOnNextLogin = _data["shouldChangePasswordOnNextLogin"] !== undefined ? _data["shouldChangePasswordOnNextLogin"] : <any>null;
            this.isTwoFactorEnabled = _data["isTwoFactorEnabled"] !== undefined ? _data["isTwoFactorEnabled"] : <any>null;
            this.isLockoutEnabled = _data["isLockoutEnabled"] !== undefined ? _data["isLockoutEnabled"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): UserEditDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<UserEditDto>(data, _mappings, UserEditDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["surname"] = this.surname !== undefined ? this.surname : <any>null;
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : <any>null;
        data["phoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["shouldChangePasswordOnNextLogin"] = this.shouldChangePasswordOnNextLogin !== undefined ? this.shouldChangePasswordOnNextLogin : <any>null;
        data["isTwoFactorEnabled"] = this.isTwoFactorEnabled !== undefined ? this.isTwoFactorEnabled : <any>null;
        data["isLockoutEnabled"] = this.isLockoutEnabled !== undefined ? this.isLockoutEnabled : <any>null;
        return data; 
    }
}

export class CreateOrUpdateUserInput {
    user!: UserEditDto;
    assignedRoleNames!: string[];
    sendActivationEmail!: boolean;
    setRandomPassword!: boolean;
    organizationUnits!: number[] | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.user = _data["user"] ? UserEditDto.fromJS(_data["user"], _mappings) : new UserEditDto();
            if (Array.isArray(_data["assignedRoleNames"])) {
                this.assignedRoleNames = [] as any;
                for (let item of _data["assignedRoleNames"])
                    this.assignedRoleNames!.push(item);
            }
            this.sendActivationEmail = _data["sendActivationEmail"] !== undefined ? _data["sendActivationEmail"] : <any>null;
            this.setRandomPassword = _data["setRandomPassword"] !== undefined ? _data["setRandomPassword"] : <any>null;
            if (Array.isArray(_data["organizationUnits"])) {
                this.organizationUnits = [] as any;
                for (let item of _data["organizationUnits"])
                    this.organizationUnits!.push(item);
            }
        }
    }

    static fromJS(data: any, _mappings?: any): CreateOrUpdateUserInput {
        data = typeof data === 'object' ? data : {};
        return createInstance<CreateOrUpdateUserInput>(data, _mappings, CreateOrUpdateUserInput);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["user"] = this.user ? this.user.toJSON() : <any>null;
        if (Array.isArray(this.assignedRoleNames)) {
            data["assignedRoleNames"] = [];
            for (let item of this.assignedRoleNames)
                data["assignedRoleNames"].push(item);
        }
        data["sendActivationEmail"] = this.sendActivationEmail !== undefined ? this.sendActivationEmail : <any>null;
        data["setRandomPassword"] = this.setRandomPassword !== undefined ? this.setRandomPassword : <any>null;
        if (Array.isArray(this.organizationUnits)) {
            data["organizationUnits"] = [];
            for (let item of this.organizationUnits)
                data["organizationUnits"].push(item);
        }
        return data; 
    }
}

export class UserRoleDto {
    roleId!: number;
    roleName!: string | null;
    roleDisplayName!: string | null;
    isAssigned!: boolean;
    inheritedFromOrganizationUnit!: boolean;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.roleId = _data["roleId"] !== undefined ? _data["roleId"] : <any>null;
            this.roleName = _data["roleName"] !== undefined ? _data["roleName"] : <any>null;
            this.roleDisplayName = _data["roleDisplayName"] !== undefined ? _data["roleDisplayName"] : <any>null;
            this.isAssigned = _data["isAssigned"] !== undefined ? _data["isAssigned"] : <any>null;
            this.inheritedFromOrganizationUnit = _data["inheritedFromOrganizationUnit"] !== undefined ? _data["inheritedFromOrganizationUnit"] : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): UserRoleDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<UserRoleDto>(data, _mappings, UserRoleDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId !== undefined ? this.roleId : <any>null;
        data["roleName"] = this.roleName !== undefined ? this.roleName : <any>null;
        data["roleDisplayName"] = this.roleDisplayName !== undefined ? this.roleDisplayName : <any>null;
        data["isAssigned"] = this.isAssigned !== undefined ? this.isAssigned : <any>null;
        data["inheritedFromOrganizationUnit"] = this.inheritedFromOrganizationUnit !== undefined ? this.inheritedFromOrganizationUnit : <any>null;
        return data; 
    }
}

export class GetUserForEditOutput {
    profilePictureId!: string | null;
    user!: UserEditDto;
    roles!: UserRoleDto[] | null;
    allOrganizationUnits!: OrganizationUnitDto[] | null;
    memberedOrganizationUnits!: string[] | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.profilePictureId = _data["profilePictureId"] !== undefined ? _data["profilePictureId"] : <any>null;
            this.user = _data["user"] ? UserEditDto.fromJS(_data["user"], _mappings) : <any>null;
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(UserRoleDto.fromJS(item, _mappings));
            }
            if (Array.isArray(_data["allOrganizationUnits"])) {
                this.allOrganizationUnits = [] as any;
                for (let item of _data["allOrganizationUnits"])
                    this.allOrganizationUnits!.push(OrganizationUnitDto.fromJS(item, _mappings));
            }
            if (Array.isArray(_data["memberedOrganizationUnits"])) {
                this.memberedOrganizationUnits = [] as any;
                for (let item of _data["memberedOrganizationUnits"])
                    this.memberedOrganizationUnits!.push(item);
            }
        }
    }

    static fromJS(data: any, _mappings?: any): GetUserForEditOutput {
        data = typeof data === 'object' ? data : {};
        return createInstance<GetUserForEditOutput>(data, _mappings, GetUserForEditOutput);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["profilePictureId"] = this.profilePictureId !== undefined ? this.profilePictureId : <any>null;
        data["user"] = this.user ? this.user.toJSON() : <any>null;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item.toJSON());
        }
        if (Array.isArray(this.allOrganizationUnits)) {
            data["allOrganizationUnits"] = [];
            for (let item of this.allOrganizationUnits)
                data["allOrganizationUnits"].push(item.toJSON());
        }
        if (Array.isArray(this.memberedOrganizationUnits)) {
            data["memberedOrganizationUnits"] = [];
            for (let item of this.memberedOrganizationUnits)
                data["memberedOrganizationUnits"].push(item);
        }
        return data; 
    }
}

export class PagedResultDtoOfUserDto {
    totalCount!: number;
    items!: UserDto[] | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"] !== undefined ? _data["totalCount"] : <any>null;
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(UserDto.fromJS(item, _mappings));
            }
        }
    }

    static fromJS(data: any, _mappings?: any): PagedResultDtoOfUserDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<PagedResultDtoOfUserDto>(data, _mappings, PagedResultDtoOfUserDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : <any>null;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

export class ActionPlan {
    actionPlan_ID!: number;
    actionPlan_Priority!: number | null;
    actionPlan_Desc!: string | null;
    actionPlan_Status!: number | null;
    actionPlan_DeadLine!: Date | null;
    report_ID!: number | null;
    report!: Report;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.actionPlan_ID = _data["actionPlan_ID"] !== undefined ? _data["actionPlan_ID"] : <any>null;
            this.actionPlan_Priority = _data["actionPlan_Priority"] !== undefined ? _data["actionPlan_Priority"] : <any>null;
            this.actionPlan_Desc = _data["actionPlan_Desc"] !== undefined ? _data["actionPlan_Desc"] : <any>null;
            this.actionPlan_Status = _data["actionPlan_Status"] !== undefined ? _data["actionPlan_Status"] : <any>null;
            this.actionPlan_DeadLine = _data["actionPlan_DeadLine"] ? new Date(_data["actionPlan_DeadLine"].toString()) : <any>null;
            this.report_ID = _data["report_ID"] !== undefined ? _data["report_ID"] : <any>null;
            this.report = _data["report"] ? Report.fromJS(_data["report"], _mappings) : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): ActionPlan {
        data = typeof data === 'object' ? data : {};
        return createInstance<ActionPlan>(data, _mappings, ActionPlan);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["actionPlan_ID"] = this.actionPlan_ID !== undefined ? this.actionPlan_ID : <any>null;
        data["actionPlan_Priority"] = this.actionPlan_Priority !== undefined ? this.actionPlan_Priority : <any>null;
        data["actionPlan_Desc"] = this.actionPlan_Desc !== undefined ? this.actionPlan_Desc : <any>null;
        data["actionPlan_Status"] = this.actionPlan_Status !== undefined ? this.actionPlan_Status : <any>null;
        data["actionPlan_DeadLine"] = this.actionPlan_DeadLine ? this.actionPlan_DeadLine.toISOString() : <any>null;
        data["report_ID"] = this.report_ID !== undefined ? this.report_ID : <any>null;
        data["report"] = this.report ? this.report.toJSON() : <any>null;
        return data; 
    }
}

export class Report {
    report_ID!: number;
    sgi!: string | null;
    entryDate!: Date | null;
    updateDate!: Date | null;
    schedule_ID!: number | null;
    reportBody!: string | null;
    actionPlan!: ActionPlan[] | null;
    schedule!: Schedule;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.report_ID = _data["report_ID"] !== undefined ? _data["report_ID"] : <any>null;
            this.sgi = _data["sgi"] !== undefined ? _data["sgi"] : <any>null;
            this.entryDate = _data["entryDate"] ? new Date(_data["entryDate"].toString()) : <any>null;
            this.updateDate = _data["updateDate"] ? new Date(_data["updateDate"].toString()) : <any>null;
            this.schedule_ID = _data["schedule_ID"] !== undefined ? _data["schedule_ID"] : <any>null;
            this.reportBody = _data["reportBody"] !== undefined ? _data["reportBody"] : <any>null;
            if (Array.isArray(_data["actionPlan"])) {
                this.actionPlan = [] as any;
                for (let item of _data["actionPlan"])
                    this.actionPlan!.push(ActionPlan.fromJS(item, _mappings));
            }
            this.schedule = _data["schedule"] ? Schedule.fromJS(_data["schedule"], _mappings) : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): Report {
        data = typeof data === 'object' ? data : {};
        return createInstance<Report>(data, _mappings, Report);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["report_ID"] = this.report_ID !== undefined ? this.report_ID : <any>null;
        data["sgi"] = this.sgi !== undefined ? this.sgi : <any>null;
        data["entryDate"] = this.entryDate ? this.entryDate.toISOString() : <any>null;
        data["updateDate"] = this.updateDate ? this.updateDate.toISOString() : <any>null;
        data["schedule_ID"] = this.schedule_ID !== undefined ? this.schedule_ID : <any>null;
        data["reportBody"] = this.reportBody !== undefined ? this.reportBody : <any>null;
        if (Array.isArray(this.actionPlan)) {
            data["actionPlan"] = [];
            for (let item of this.actionPlan)
                data["actionPlan"].push(item.toJSON());
        }
        data["schedule"] = this.schedule ? this.schedule.toJSON() : <any>null;
        return data; 
    }
}

export class Schedule_People {
    schedule_Id!: number;
    people_Prefix!: string | null;
    people_Id!: string | null;
    schedule!: Schedule;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.schedule_Id = _data["schedule_Id"] !== undefined ? _data["schedule_Id"] : <any>null;
            this.people_Prefix = _data["people_Prefix"] !== undefined ? _data["people_Prefix"] : <any>null;
            this.people_Id = _data["people_Id"] !== undefined ? _data["people_Id"] : <any>null;
            this.schedule = _data["schedule"] ? Schedule.fromJS(_data["schedule"], _mappings) : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): Schedule_People {
        data = typeof data === 'object' ? data : {};
        return createInstance<Schedule_People>(data, _mappings, Schedule_People);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schedule_Id"] = this.schedule_Id !== undefined ? this.schedule_Id : <any>null;
        data["people_Prefix"] = this.people_Prefix !== undefined ? this.people_Prefix : <any>null;
        data["people_Id"] = this.people_Id !== undefined ? this.people_Id : <any>null;
        data["schedule"] = this.schedule ? this.schedule.toJSON() : <any>null;
        return data; 
    }
}

export class VisitType {
    visitType_Id!: number;
    visitType_Desc!: string | null;
    visitType_Prefix!: string | null;
    schedule!: Schedule[] | null;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.visitType_Id = _data["visitType_Id"] !== undefined ? _data["visitType_Id"] : <any>null;
            this.visitType_Desc = _data["visitType_Desc"] !== undefined ? _data["visitType_Desc"] : <any>null;
            this.visitType_Prefix = _data["visitType_Prefix"] !== undefined ? _data["visitType_Prefix"] : <any>null;
            if (Array.isArray(_data["schedule"])) {
                this.schedule = [] as any;
                for (let item of _data["schedule"])
                    this.schedule!.push(Schedule.fromJS(item, _mappings));
            }
        }
    }

    static fromJS(data: any, _mappings?: any): VisitType {
        data = typeof data === 'object' ? data : {};
        return createInstance<VisitType>(data, _mappings, VisitType);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["visitType_Id"] = this.visitType_Id !== undefined ? this.visitType_Id : <any>null;
        data["visitType_Desc"] = this.visitType_Desc !== undefined ? this.visitType_Desc : <any>null;
        data["visitType_Prefix"] = this.visitType_Prefix !== undefined ? this.visitType_Prefix : <any>null;
        if (Array.isArray(this.schedule)) {
            data["schedule"] = [];
            for (let item of this.schedule)
                data["schedule"].push(item.toJSON());
        }
        return data; 
    }
}

export class Schedule {
    schedule_ID!: number;
    sgi!: string | null;
    entryDate!: Date | null;
    custNum!: string | null;
    scheduleStart!: Date | null;
    scheduleEnd!: Date | null;
    scheduleSubject!: string | null;
    scheduleBody!: string | null;
    custNum_Prefix!: string | null;
    schedule_UniqueOutlookId!: string | null;
    schedule_DeletedDate!: Date | null;
    schedule_Deleted!: boolean | null;
    visitType_Id!: number | null;
    visit_OldCviewId!: string | null;
    schedule_UniqueOutlookKey!: string | null;
    visit_OldCRMName!: string | null;
    attachments!: Attachments[] | null;
    report!: Report[] | null;
    schedule_People!: Schedule_People[] | null;
    visitType!: VisitType;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.schedule_ID = _data["schedule_ID"] !== undefined ? _data["schedule_ID"] : <any>null;
            this.sgi = _data["sgi"] !== undefined ? _data["sgi"] : <any>null;
            this.entryDate = _data["entryDate"] ? new Date(_data["entryDate"].toString()) : <any>null;
            this.custNum = _data["custNum"] !== undefined ? _data["custNum"] : <any>null;
            this.scheduleStart = _data["scheduleStart"] ? new Date(_data["scheduleStart"].toString()) : <any>null;
            this.scheduleEnd = _data["scheduleEnd"] ? new Date(_data["scheduleEnd"].toString()) : <any>null;
            this.scheduleSubject = _data["scheduleSubject"] !== undefined ? _data["scheduleSubject"] : <any>null;
            this.scheduleBody = _data["scheduleBody"] !== undefined ? _data["scheduleBody"] : <any>null;
            this.custNum_Prefix = _data["custNum_Prefix"] !== undefined ? _data["custNum_Prefix"] : <any>null;
            this.schedule_UniqueOutlookId = _data["schedule_UniqueOutlookId"] !== undefined ? _data["schedule_UniqueOutlookId"] : <any>null;
            this.schedule_DeletedDate = _data["schedule_DeletedDate"] ? new Date(_data["schedule_DeletedDate"].toString()) : <any>null;
            this.schedule_Deleted = _data["schedule_Deleted"] !== undefined ? _data["schedule_Deleted"] : <any>null;
            this.visitType_Id = _data["visitType_Id"] !== undefined ? _data["visitType_Id"] : <any>null;
            this.visit_OldCviewId = _data["visit_OldCviewId"] !== undefined ? _data["visit_OldCviewId"] : <any>null;
            this.schedule_UniqueOutlookKey = _data["schedule_UniqueOutlookKey"] !== undefined ? _data["schedule_UniqueOutlookKey"] : <any>null;
            this.visit_OldCRMName = _data["visit_OldCRMName"] !== undefined ? _data["visit_OldCRMName"] : <any>null;
            if (Array.isArray(_data["attachments"])) {
                this.attachments = [] as any;
                for (let item of _data["attachments"])
                    this.attachments!.push(Attachments.fromJS(item, _mappings));
            }
            if (Array.isArray(_data["report"])) {
                this.report = [] as any;
                for (let item of _data["report"])
                    this.report!.push(Report.fromJS(item, _mappings));
            }
            if (Array.isArray(_data["schedule_People"])) {
                this.schedule_People = [] as any;
                for (let item of _data["schedule_People"])
                    this.schedule_People!.push(Schedule_People.fromJS(item, _mappings));
            }
            this.visitType = _data["visitType"] ? VisitType.fromJS(_data["visitType"], _mappings) : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): Schedule {
        data = typeof data === 'object' ? data : {};
        return createInstance<Schedule>(data, _mappings, Schedule);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schedule_ID"] = this.schedule_ID !== undefined ? this.schedule_ID : <any>null;
        data["sgi"] = this.sgi !== undefined ? this.sgi : <any>null;
        data["entryDate"] = this.entryDate ? this.entryDate.toISOString() : <any>null;
        data["custNum"] = this.custNum !== undefined ? this.custNum : <any>null;
        data["scheduleStart"] = this.scheduleStart ? this.scheduleStart.toISOString() : <any>null;
        data["scheduleEnd"] = this.scheduleEnd ? this.scheduleEnd.toISOString() : <any>null;
        data["scheduleSubject"] = this.scheduleSubject !== undefined ? this.scheduleSubject : <any>null;
        data["scheduleBody"] = this.scheduleBody !== undefined ? this.scheduleBody : <any>null;
        data["custNum_Prefix"] = this.custNum_Prefix !== undefined ? this.custNum_Prefix : <any>null;
        data["schedule_UniqueOutlookId"] = this.schedule_UniqueOutlookId !== undefined ? this.schedule_UniqueOutlookId : <any>null;
        data["schedule_DeletedDate"] = this.schedule_DeletedDate ? this.schedule_DeletedDate.toISOString() : <any>null;
        data["schedule_Deleted"] = this.schedule_Deleted !== undefined ? this.schedule_Deleted : <any>null;
        data["visitType_Id"] = this.visitType_Id !== undefined ? this.visitType_Id : <any>null;
        data["visit_OldCviewId"] = this.visit_OldCviewId !== undefined ? this.visit_OldCviewId : <any>null;
        data["schedule_UniqueOutlookKey"] = this.schedule_UniqueOutlookKey !== undefined ? this.schedule_UniqueOutlookKey : <any>null;
        data["visit_OldCRMName"] = this.visit_OldCRMName !== undefined ? this.visit_OldCRMName : <any>null;
        if (Array.isArray(this.attachments)) {
            data["attachments"] = [];
            for (let item of this.attachments)
                data["attachments"].push(item.toJSON());
        }
        if (Array.isArray(this.report)) {
            data["report"] = [];
            for (let item of this.report)
                data["report"].push(item.toJSON());
        }
        if (Array.isArray(this.schedule_People)) {
            data["schedule_People"] = [];
            for (let item of this.schedule_People)
                data["schedule_People"].push(item.toJSON());
        }
        data["visitType"] = this.visitType ? this.visitType.toJSON() : <any>null;
        return data; 
    }
}

export class Attachments {
    id!: number;
    fileName!: string | null;
    fileBinary!: string | null;
    schedule_ID!: number | null;
    fileTitle!: string | null;
    schedule!: Schedule;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.fileName = _data["fileName"] !== undefined ? _data["fileName"] : <any>null;
            this.fileBinary = _data["fileBinary"] !== undefined ? _data["fileBinary"] : <any>null;
            this.schedule_ID = _data["schedule_ID"] !== undefined ? _data["schedule_ID"] : <any>null;
            this.fileTitle = _data["fileTitle"] !== undefined ? _data["fileTitle"] : <any>null;
            this.schedule = _data["schedule"] ? Schedule.fromJS(_data["schedule"], _mappings) : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): Attachments {
        data = typeof data === 'object' ? data : {};
        return createInstance<Attachments>(data, _mappings, Attachments);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["fileName"] = this.fileName !== undefined ? this.fileName : <any>null;
        data["fileBinary"] = this.fileBinary !== undefined ? this.fileBinary : <any>null;
        data["schedule_ID"] = this.schedule_ID !== undefined ? this.schedule_ID : <any>null;
        data["fileTitle"] = this.fileTitle !== undefined ? this.fileTitle : <any>null;
        data["schedule"] = this.schedule ? this.schedule.toJSON() : <any>null;
        return data; 
    }
}

export class ScheduleModel {
    custClass!: string | null;
    saP_SalesOffice!: string | null;
    lead_MarketSegment!: string | null;
    schedule_ID!: number;
    sgi!: string | null;
    entryDate!: Date | null;
    custNum!: string | null;
    scheduleStart!: Date | null;
    scheduleEnd!: Date | null;
    scheduleSubject!: string | null;
    scheduleBody!: string | null;
    custNum_Prefix!: string | null;
    schedule_UniqueOutlookId!: string | null;
    schedule_DeletedDate!: Date | null;
    schedule_Deleted!: boolean | null;
    visitType_Id!: number | null;
    visit_OldCviewId!: string | null;
    schedule_UniqueOutlookKey!: string | null;
    visit_OldCRMName!: string | null;
    attachments!: Attachments[] | null;
    report!: Report[] | null;
    schedule_People!: Schedule_People[] | null;
    visitType!: VisitType;

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.custClass = _data["custClass"] !== undefined ? _data["custClass"] : <any>null;
            this.saP_SalesOffice = _data["saP_SalesOffice"] !== undefined ? _data["saP_SalesOffice"] : <any>null;
            this.lead_MarketSegment = _data["lead_MarketSegment"] !== undefined ? _data["lead_MarketSegment"] : <any>null;
            this.schedule_ID = _data["schedule_ID"] !== undefined ? _data["schedule_ID"] : <any>null;
            this.sgi = _data["sgi"] !== undefined ? _data["sgi"] : <any>null;
            this.entryDate = _data["entryDate"] ? new Date(_data["entryDate"].toString()) : <any>null;
            this.custNum = _data["custNum"] !== undefined ? _data["custNum"] : <any>null;
            this.scheduleStart = _data["scheduleStart"] ? new Date(_data["scheduleStart"].toString()) : <any>null;
            this.scheduleEnd = _data["scheduleEnd"] ? new Date(_data["scheduleEnd"].toString()) : <any>null;
            this.scheduleSubject = _data["scheduleSubject"] !== undefined ? _data["scheduleSubject"] : <any>null;
            this.scheduleBody = _data["scheduleBody"] !== undefined ? _data["scheduleBody"] : <any>null;
            this.custNum_Prefix = _data["custNum_Prefix"] !== undefined ? _data["custNum_Prefix"] : <any>null;
            this.schedule_UniqueOutlookId = _data["schedule_UniqueOutlookId"] !== undefined ? _data["schedule_UniqueOutlookId"] : <any>null;
            this.schedule_DeletedDate = _data["schedule_DeletedDate"] ? new Date(_data["schedule_DeletedDate"].toString()) : <any>null;
            this.schedule_Deleted = _data["schedule_Deleted"] !== undefined ? _data["schedule_Deleted"] : <any>null;
            this.visitType_Id = _data["visitType_Id"] !== undefined ? _data["visitType_Id"] : <any>null;
            this.visit_OldCviewId = _data["visit_OldCviewId"] !== undefined ? _data["visit_OldCviewId"] : <any>null;
            this.schedule_UniqueOutlookKey = _data["schedule_UniqueOutlookKey"] !== undefined ? _data["schedule_UniqueOutlookKey"] : <any>null;
            this.visit_OldCRMName = _data["visit_OldCRMName"] !== undefined ? _data["visit_OldCRMName"] : <any>null;
            if (Array.isArray(_data["attachments"])) {
                this.attachments = [] as any;
                for (let item of _data["attachments"])
                    this.attachments!.push(Attachments.fromJS(item, _mappings));
            }
            if (Array.isArray(_data["report"])) {
                this.report = [] as any;
                for (let item of _data["report"])
                    this.report!.push(Report.fromJS(item, _mappings));
            }
            if (Array.isArray(_data["schedule_People"])) {
                this.schedule_People = [] as any;
                for (let item of _data["schedule_People"])
                    this.schedule_People!.push(Schedule_People.fromJS(item, _mappings));
            }
            this.visitType = _data["visitType"] ? VisitType.fromJS(_data["visitType"], _mappings) : <any>null;
        }
    }

    static fromJS(data: any, _mappings?: any): ScheduleModel {
        data = typeof data === 'object' ? data : {};
        return createInstance<ScheduleModel>(data, _mappings, ScheduleModel);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["custClass"] = this.custClass !== undefined ? this.custClass : <any>null;
        data["saP_SalesOffice"] = this.saP_SalesOffice !== undefined ? this.saP_SalesOffice : <any>null;
        data["lead_MarketSegment"] = this.lead_MarketSegment !== undefined ? this.lead_MarketSegment : <any>null;
        data["schedule_ID"] = this.schedule_ID !== undefined ? this.schedule_ID : <any>null;
        data["sgi"] = this.sgi !== undefined ? this.sgi : <any>null;
        data["entryDate"] = this.entryDate ? this.entryDate.toISOString() : <any>null;
        data["custNum"] = this.custNum !== undefined ? this.custNum : <any>null;
        data["scheduleStart"] = this.scheduleStart ? this.scheduleStart.toISOString() : <any>null;
        data["scheduleEnd"] = this.scheduleEnd ? this.scheduleEnd.toISOString() : <any>null;
        data["scheduleSubject"] = this.scheduleSubject !== undefined ? this.scheduleSubject : <any>null;
        data["scheduleBody"] = this.scheduleBody !== undefined ? this.scheduleBody : <any>null;
        data["custNum_Prefix"] = this.custNum_Prefix !== undefined ? this.custNum_Prefix : <any>null;
        data["schedule_UniqueOutlookId"] = this.schedule_UniqueOutlookId !== undefined ? this.schedule_UniqueOutlookId : <any>null;
        data["schedule_DeletedDate"] = this.schedule_DeletedDate ? this.schedule_DeletedDate.toISOString() : <any>null;
        data["schedule_Deleted"] = this.schedule_Deleted !== undefined ? this.schedule_Deleted : <any>null;
        data["visitType_Id"] = this.visitType_Id !== undefined ? this.visitType_Id : <any>null;
        data["visit_OldCviewId"] = this.visit_OldCviewId !== undefined ? this.visit_OldCviewId : <any>null;
        data["schedule_UniqueOutlookKey"] = this.schedule_UniqueOutlookKey !== undefined ? this.schedule_UniqueOutlookKey : <any>null;
        data["visit_OldCRMName"] = this.visit_OldCRMName !== undefined ? this.visit_OldCRMName : <any>null;
        if (Array.isArray(this.attachments)) {
            data["attachments"] = [];
            for (let item of this.attachments)
                data["attachments"].push(item.toJSON());
        }
        if (Array.isArray(this.report)) {
            data["report"] = [];
            for (let item of this.report)
                data["report"].push(item.toJSON());
        }
        if (Array.isArray(this.schedule_People)) {
            data["schedule_People"] = [];
            for (let item of this.schedule_People)
                data["schedule_People"].push(item.toJSON());
        }
        data["visitType"] = this.visitType ? this.visitType.toJSON() : <any>null;
        return data; 
    }
}

function jsonParse(json: any, reviver?: any) {
    json = JSON.parse(json, reviver);

    var byid: any = {};
    var refs: any = [];
    json = (function recurse(obj: any, prop?: any, parent?: any) {
        if (typeof obj !== 'object' || !obj)
            return obj;
        
        if ("$ref" in obj) {
            let ref = obj.$ref;
            if (ref in byid)
                return byid[ref];
            refs.push([parent, prop, ref]);
            return undefined;
        } else if ("$id" in obj) {
            let id = obj.$id;
            delete obj.$id;
            if ("$values" in obj)
                obj = obj.$values;
            byid[id] = obj;
        }
        
        if (Array.isArray(obj)) {
            obj = obj.map((v, i) => recurse(v, i, obj));
        } else {
            for (var p in obj) {
                if (obj.hasOwnProperty(p) && obj[p] && typeof obj[p] === 'object')
                    obj[p] = recurse(obj[p], p, obj);
            }
        }

        return obj;
    })(json);

    for (let i = 0; i < refs.length; i++) {
        const ref = refs[i];
        ref[0][ref[1]] = byid[ref[2]];
    }

    return json;
}

function createInstance<T>(data: any, mappings: any, type: any): T {
    if (!mappings)
        mappings = [];
    else {
        let mapping = mappings.filter((m: any) => m.source === data);
        if (mapping.length === 1)
            return <T>mapping[0].target;
    }

    let result: any = new type();
    mappings.push({ source: data, target: result });
    result.init(data, mappings);
    return result;
}

export class ApiException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}